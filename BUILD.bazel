load("//bazel:flags.bzl", "CPP_FLAGS", "MAPLIBRE_FLAGS")
load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
load("//bazel:core.bzl", "MLN_CORE_SOURCE", "MLN_CORE_HEADERS", "MLN_OPENGL_SOURCE", "MLN_OPENGL_HEADERS", "MLN_DRAWABLES_SOURCE", "MLN_DRAWABLES_HEADERS")

string_flag(
    name = "renderer",
    build_setting_default = "drawable",
    values=["legacy", "drawable", "split"]
)

config_setting(
    name = "legacy_renderer",
    flag_values = {
        ":renderer": "legacy"
    }
)

config_setting(
    name = "drawable_renderer",
        flag_values = {
        ":renderer": "drawable"
    }
)

config_setting(
    name = "split_renderer",
    flag_values = {
        ":renderer": "split"
    }
)

# This is defined by both
# platform/default/filesource-files.json
# and
# src/core-files.json
# because they have dependencies on each other
cc_library(
    name = "mbgl-core",
    srcs = MLN_CORE_SOURCE + select({
        ":drawable_renderer": MLN_DRAWABLES_SOURCE,
        ":split_renderer": MLN_DRAWABLES_SOURCE,
        "//conditions:default": []
    }) + MLN_OPENGL_SOURCE,
    hdrs = MLN_CORE_HEADERS + select({
        ":drawable_renderer": MLN_DRAWABLES_HEADERS,
        ":split_renderer": MLN_DRAWABLES_HEADERS,
        "//conditions:default": []
    }) + MLN_OPENGL_HEADERS,
    copts = CPP_FLAGS + MAPLIBRE_FLAGS,
    defines = select({
        ":legacy_renderer": ["MLN_LEGACY_RENDERER=1", "MLN_DRAWABLE_RENDERER=0"],
        ":drawable_renderer": ["MLN_LEGACY_RENDERER=0", "MLN_DRAWABLE_RENDERER=1"],
        ":split_renderer": ["MLN_LEGACY_RENDERER=1", "MLN_DRAWABLE_RENDERER=1", "MLN_RENDERER_SPLIT_VIEW=1"],
    }) + select({
        "//:ios": ["GLES_SILENCE_DEPRECATION=1"],
        "//conditions:default": []
    }),
    includes = [
        "include",
        "src",
    ],
    local_defines = [
        r"MLN_VERSION_REV=\"standalone\"",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//vendor:boost",
        "//vendor:csscolorparser",
        "//vendor:earcut.hpp",
        "//vendor:eternal",
        "//vendor:mapbox-base",
        "//vendor:parsedate",
        "//vendor:polylabel",
        "//vendor:protozero",
        "//vendor:unique_resource",
        "//vendor:vector-tile",
        "//vendor:wagyu",
    ] + select({
        "//:ios": [
            "//vendor:icu",
        ],
        "//:linux": [],
    }),
)

genrule(
    name = "git_hash",
    outs = ["hash"],
    cmd = """
        git rev-parse HEAD > $@
    """,
    local = True,
    visibility = ["//visibility:public"],
)

# The next three rules are a bit of a hack
# they are needed until rules_apple has platforms support
# https://github.com/bazelbuild/rules_apple/issues/1658
# Allows passing a command line flag to set the Platform
# bazel build [target] --//:maplibre_platform=ios

string_flag(
    name = "maplibre_platform",
    build_setting_default = "ios",
)

config_setting(
    name = "linux",
    flag_values = {
        ":maplibre_platform": "linux",
    },
)

config_setting(
    name = "ios",
    flag_values = {
        ":maplibre_platform": "ios",
    },
)

exports_files(
    [
        "LICENSE.md",
        "scripts/style-spec-reference/v8.json",
    ],
    visibility = ["//visibility:public"],
)
