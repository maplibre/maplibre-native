{"metadata":{"role":"article","title":"Download Offline Pack","roleHeading":"Article","modules":[{"name":"MapLibre"}]},"identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/OfflinePackExample","interfaceLanguage":"occ"},"primaryContentSections":[{"content":[{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"This example uses UIKit."}],"type":"paragraph"}]},{"inlineContent":[{"text":"This example shows how to download a region as an offline pack. This particular example kicks off the download as soon as the map finished loading. For more control when and how to manage offline regions, see ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/ManageOfflineRegionsExample","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"First, you need to define a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNTilePyramidOfflineRegion"},{"text":". Note that you should be conservative with your zoom level, because each individual tile in the tile pyramid will be individually downloaded. If you want to make a large area available offline, you should prepare a bundle, download this manually and use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage\/addContentsOfURL:withCompletionHandler:"},{"text":". However, this is outside of the scope of this example.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can pass along some user data \/ context with "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage\/addPackForRegion:withContext:completionHandler:","isActive":true,"type":"reference"},{"type":"text","text":". This can be read in the notififications that are emitted. You should listen for these notifications using the names defined by"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePackProgressChangedNotification","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePackErrorNotification","isActive":true,"type":"reference"},{"text":", and","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePackMaximumMapboxTilesReachedNotification"}]}]}]},{"inlineContent":[{"type":"text","text":"as is shown in the example. Note that this last notification is a historical artifact, your tile provider may not have a maximum number of tiles you are allowed to store."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class OfflinePackExample: UIViewController, MLNMapViewDelegate {","    var mapView: MLNMapView!","    var progressView: UIProgressView!","    let jsonDecoder = JSONDecoder()","","    struct UserData: Codable {","        var name: String","    }","","    override func viewDidLoad() {","        super.viewDidLoad()","","        mapView = MLNMapView(frame: view.bounds, styleURL: AMERICANA_STYLE)","        mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight]","        mapView.tintColor = .gray","        mapView.delegate = self","        view.addSubview(mapView)","","        mapView.setCenter(CLLocationCoordinate2D(latitude: 22.27933, longitude: 114.16281),","                          zoomLevel: 13, animated: false)","","        \/\/ Setup offline pack notification handlers.","        NotificationCenter.default.addObserver(self, selector: #selector(offlinePackProgressDidChange), name: NSNotification.Name.MLNOfflinePackProgressChanged, object: nil)","        NotificationCenter.default.addObserver(self, selector: #selector(offlinePackDidReceiveError), name: NSNotification.Name.MLNOfflinePackError, object: nil)","        NotificationCenter.default.addObserver(self, selector: #selector(offlinePackDidReceiveMaximumAllowedMapboxTiles), name: NSNotification.Name.MLNOfflinePackMaximumMapboxTilesReached, object: nil)","    }","","    func mapViewDidFinishLoadingMap(_: MLNMapView) {","        \/\/ Start downloading tiles and resources for z13-14.","        startOfflinePackDownload()","    }","","    override func viewDidDisappear(_ animated: Bool) {","        super.viewDidDisappear(animated)","","        \/\/ When leaving this view controller, suspend offline downloads.","        guard let packs = MLNOfflineStorage.shared.packs else { return }","        for pack in packs {","            if let userInfo = try? jsonDecoder.decode(UserData.self, from: pack.context) {","                print(\"Suspending download of offline pack: '\\(userInfo.name)'\")","            }","","            pack.suspend()","        }","    }","","    func startOfflinePackDownload() {","        \/\/ Create a region that includes the current viewport and any tiles needed to view it when zoomed further in.","        \/\/ Because tile count grows exponentially with the maximum zoom level, you should be conservative with your `toZoomLevel` setting.","        let region = MLNTilePyramidOfflineRegion(styleURL: mapView.styleURL, bounds: mapView.visibleCoordinateBounds, fromZoomLevel: mapView.zoomLevel, toZoomLevel: 14)","","        \/\/ Store some data for identification purposes alongside the downloaded resources.","        let jsonEncoder = JSONEncoder()","","        let userInfo = UserData(name: \"My Offline Pack\")","        let encodedUserInfo = try! jsonEncoder.encode(userInfo)","        print(encodedUserInfo)","","        \/\/ Create and register an offline pack with the shared offline storage object.","","        MLNOfflineStorage.shared.addPack(for: region, withContext: encodedUserInfo) { pack, error in","            guard error == nil else {","                \/\/ The pack couldn’t be created for some reason.","                print(\"Error: \\(error?.localizedDescription ?? \"unknown error\")\")","                return","            }","","            \/\/ Start downloading.","            pack!.resume()","        }","    }","","    \/\/ MARK: - MLNOfflinePack notification handlers","","    @objc func offlinePackProgressDidChange(notification: NSNotification) {","        \/\/ Get the offline pack this notification is regarding,","        \/\/ and the associated user info for the pack; in this case, `name = My Offline Pack`","        if let pack = notification.object as? MLNOfflinePack,","           let userInfo = try? jsonDecoder.decode(UserData.self, from: pack.context)","        {","            let progress = pack.progress","            \/\/ or notification.userInfo![MLNOfflinePackProgressUserInfoKey]!.MLNOfflinePackProgressValue","            let completedResources = progress.countOfResourcesCompleted","            let expectedResources = progress.countOfResourcesExpected","","            \/\/ Calculate current progress percentage.","            let progressPercentage = Float(completedResources) \/ Float(expectedResources)","","            \/\/ Setup the progress bar.","            if progressView == nil {","                progressView = UIProgressView(progressViewStyle: .default)","                let frame = view.bounds.size","                progressView.frame = CGRect(x: frame.width \/ 4, y: frame.height * 0.75, width: frame.width \/ 2, height: 10)","                view.addSubview(progressView)","            }","","            progressView.progress = progressPercentage","","            \/\/ If this pack has finished, print its size and resource count.","            if completedResources == expectedResources {","                let byteCount = ByteCountFormatter.string(fromByteCount: Int64(pack.progress.countOfBytesCompleted), countStyle: ByteCountFormatter.CountStyle.memory)","                print(\"Offline pack “\\(userInfo.name)” completed: \\(byteCount), \\(completedResources) resources\")","            } else {","                \/\/ Otherwise, print download\/verification progress.","                print(\"Offline pack “\\(userInfo.name)” has \\(completedResources) of \\(expectedResources) resources — \\(String(format: \"%.2f\", progressPercentage * 100))%.\")","            }","        }","    }","","    @objc func offlinePackDidReceiveError(notification: NSNotification) {","        if let pack = notification.object as? MLNOfflinePack,","           let userInfo = try? jsonDecoder.decode(UserData.self, from: pack.context),","           let error = notification.userInfo?[MLNOfflinePackUserInfoKey.error] as? NSError","        {","            print(\"Offline pack “\\(userInfo.name)” received error: \\(error.localizedFailureReason ?? \"unknown error\")\")","        }","    }","","    @objc func offlinePackDidReceiveMaximumAllowedMapboxTiles(notification: NSNotification) {","        if let pack = notification.object as? MLNOfflinePack,","           let userInfo = try? jsonDecoder.decode(UserData.self, from: pack.context),","           let maximumCount = (notification.userInfo?[MLNOfflinePackUserInfoKey.maximumCount] as AnyObject).uint64Value","        {","            print(\"Offline pack “\\(userInfo.name)” reached limit of \\(maximumCount) tiles.\")","        }","    }","}"]}],"kind":"content"}],"kind":"article","sections":[],"seeAlsoSections":[{"anchor":"Offline","generated":true,"identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/ManageOfflineRegionsExample"],"title":"Offline"}],"abstract":[{"type":"text","text":"Download a region as an offline pack"}],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"variants":[{"paths":["\/documentation\/maplibre-native-for-ios\/offlinepackexample"],"traits":[{"interfaceLanguage":"occ"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://org.swift.MyProject/documentation/MapLibre":{"type":"topic","abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","kind":"symbol","url":"\/documentation\/maplibre","title":"MapLibre","role":"collection"},"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflinePack":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePack","role":"symbol","fragments":[{"text":"MLNOfflinePack","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/maplibre\/mlnofflinepack","type":"topic","title":"MLNOfflinePack","abstract":[{"text":"An ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePack","isActive":true,"type":"reference"},{"text":" represents a collection of resources necessary for viewing","type":"text"},{"text":" ","type":"text"},{"text":"a region offline to a local database.","type":"text"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflineStorage/addPackForRegion:withContext:completionHandler:":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"addPackForRegion:withContext:completionHandler:"}],"kind":"symbol","abstract":[{"type":"text","text":"Creates and registers an offline pack that downloads the resources needed to"},{"type":"text","text":" "},{"type":"text","text":"use the given region offline."}],"type":"topic","title":"addPackForRegion:withContext:completionHandler:","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage\/addPackForRegion:withContext:completionHandler:","url":"\/documentation\/maplibre\/mlnofflinestorage\/addpackforregion:withcontext:completionhandler:","fragments":[{"kind":"text","text":"- "},{"kind":"identifier","text":"addPackForRegion:withContext:completionHandler:"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNTilePyramidOfflineRegion":{"fragments":[{"kind":"identifier","text":"MLNTilePyramidOfflineRegion"}],"kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNTilePyramidOfflineRegion","abstract":[{"type":"text","text":"An offline region defined by a style URL, geographic coordinate bounds, and"},{"type":"text","text":" "},{"type":"text","text":"range of zoom levels."}],"url":"\/documentation\/maplibre\/mlntilepyramidofflineregion","type":"topic","title":"MLNTilePyramidOfflineRegion","role":"symbol"},"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflineStorage":{"type":"topic","role":"symbol","fragments":[{"kind":"identifier","text":"MLNOfflineStorage"}],"url":"\/documentation\/maplibre\/mlnofflinestorage","kind":"symbol","title":"MLNOfflineStorage","abstract":[{"text":"MLNOfflineStorage implements a singleton (shared object) that manages offline","type":"text"},{"text":" ","type":"text"},{"text":"packs and ambient caching. All of this class’s instance methods are asynchronous,","type":"text"},{"text":" ","type":"text"},{"text":"reflecting the fact that offline resources are stored in a database. The shared","type":"text"},{"text":" ","type":"text"},{"text":"object maintains a canonical collection of offline packs in its ","type":"text"},{"type":"codeVoice","code":"packs"},{"text":" property.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage"},"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflinePackErrorNotification":{"kind":"symbol","url":"\/documentation\/maplibre\/mlnofflinepackerrornotification","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePackErrorNotification","type":"topic","fragments":[{"text":"MLNOfflinePackErrorNotification","kind":"identifier"}],"title":"MLNOfflinePackErrorNotification","abstract":[{"text":"Posted by the shared ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage","isActive":true,"type":"reference"},{"text":" object whenever an ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"object encounters an error while downloading. The error may be recoverable and","type":"text"},{"text":" ","type":"text"},{"text":"may not warrant the user’s attention. For example, the pack’s implementation","type":"text"},{"text":" ","type":"text"},{"text":"may attempt to re-request failed resources based on an exponential backoff","type":"text"},{"text":" ","type":"text"},{"text":"strategy or upon the restoration of network access.","type":"text"}],"role":"symbol"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/ManageOfflineRegionsExample":{"role":"article","title":"Manage Offline Regions","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/ManageOfflineRegionsExample","abstract":[{"type":"text","text":"Query, delete and download offline regions"}],"url":"\/documentation\/maplibre-native-for-ios\/manageofflineregionsexample","kind":"article"},"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflineStorage/addContentsOfURL:withCompletionHandler:":{"role":"symbol","abstract":[{"type":"text","text":"Adds the offline packs located at the given URL to offline storage."}],"fragments":[{"text":"- ","kind":"text"},{"kind":"identifier","text":"addContentsOfURL:withCompletionHandler:"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage\/addContentsOfURL:withCompletionHandler:","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"addContentsOfURL:withCompletionHandler:"}],"type":"topic","url":"\/documentation\/maplibre\/mlnofflinestorage\/addcontentsofurl:withcompletionhandler:","title":"addContentsOfURL:withCompletionHandler:"},"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflinePackMaximumMapboxTilesReachedNotification":{"url":"\/documentation\/maplibre\/mlnofflinepackmaximummapboxtilesreachednotification","title":"MLNOfflinePackMaximumMapboxTilesReachedNotification","abstract":[{"text":"Posted by the shared ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage","isActive":true,"type":"reference"},{"text":" object when the maximum number of","type":"text"},{"text":" ","type":"text"},{"text":"tiles has been downloaded and stored on the current device.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePackMaximumMapboxTilesReachedNotification","role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"MLNOfflinePackMaximumMapboxTilesReachedNotification","kind":"identifier"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflinePackProgressChangedNotification":{"fragments":[{"text":"MLNOfflinePackProgressChangedNotification","kind":"identifier"}],"url":"\/documentation\/maplibre\/mlnofflinepackprogresschangednotification","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePackProgressChangedNotification","abstract":[{"type":"text","text":"Posted by the shared "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage","type":"reference","isActive":true},{"type":"text","text":" object when an "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePack","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"object’s progress changes. The progress may change due to a resource being"},{"type":"text","text":" "},{"type":"text","text":"downloaded or because the pack discovers during the download that more"},{"type":"text","text":" "},{"type":"text","text":"resources are required for offline viewing. This notification is posted"},{"type":"text","text":" "},{"type":"text","text":"whenever any field in the "},{"type":"codeVoice","code":"progress"},{"type":"text","text":" property changes."}],"type":"topic","title":"MLNOfflinePackProgressChangedNotification","kind":"symbol","role":"symbol"}}}