{"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/OfflinePackExample","interfaceLanguage":"occ"},"metadata":{"title":"Download Offline Pack","role":"article","roleHeading":"Article","modules":[{"name":"MapLibre"}]},"seeAlsoSections":[{"identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/ManageOfflineRegionsExample"],"title":"Offline","generated":true}],"primaryContentSections":[{"kind":"content","content":[{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"This example uses UIKit.","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"This example shows how to download a region as an offline pack. This particular example kicks off the download as soon as the map finished loading. For more control when and how to manage offline regions, see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/ManageOfflineRegionsExample"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"First, you need to define a "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNTilePyramidOfflineRegion","type":"reference","isActive":true},{"type":"text","text":". Note that you should be conservative with your zoom level, because each individual tile in the tile pyramid will be individually downloaded. If you want to make a large area available offline, you should prepare a bundle, download this manually and use "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage\/addContentsOfURL:withCompletionHandler:","type":"reference"},{"type":"text","text":". However, this is outside of the scope of this example."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can pass along some user data \/ context with ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage\/addPackForRegion:withContext:completionHandler:","isActive":true,"type":"reference"},{"text":". This can be read in the notififications that are emitted. You should listen for these notifications using the names defined by","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePackProgressChangedNotification","type":"reference"}]}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePackErrorNotification","type":"reference","isActive":true},{"type":"text","text":", and"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePackMaximumMapboxTilesReachedNotification","type":"reference","isActive":true}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"as is shown in the example. Note that this last notification is a historical artifact, your tile provider may not have a maximum number of tiles you are allowed to store."}]},{"type":"codeListing","syntax":"swift","code":["class OfflinePackExample: UIViewController, MLNMapViewDelegate {","    var mapView: MLNMapView!","    var progressView: UIProgressView!","    let jsonDecoder = JSONDecoder()","","    struct UserData: Codable {","        var name: String","    }","","    override func viewDidLoad() {","        super.viewDidLoad()","","        mapView = MLNMapView(frame: view.bounds, styleURL: AMERICANA_STYLE)","        mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight]","        mapView.tintColor = .gray","        mapView.delegate = self","        view.addSubview(mapView)","","        mapView.setCenter(CLLocationCoordinate2D(latitude: 22.27933, longitude: 114.16281),","                          zoomLevel: 13, animated: false)","","        \/\/ Setup offline pack notification handlers.","        NotificationCenter.default.addObserver(self, selector: #selector(offlinePackProgressDidChange), name: NSNotification.Name.MLNOfflinePackProgressChanged, object: nil)","        NotificationCenter.default.addObserver(self, selector: #selector(offlinePackDidReceiveError), name: NSNotification.Name.MLNOfflinePackError, object: nil)","        NotificationCenter.default.addObserver(self, selector: #selector(offlinePackDidReceiveMaximumAllowedMapboxTiles), name: NSNotification.Name.MLNOfflinePackMaximumMapboxTilesReached, object: nil)","    }","","    func mapViewDidFinishLoadingMap(_: MLNMapView) {","        \/\/ Start downloading tiles and resources for z13-14.","        startOfflinePackDownload()","    }","","    override func viewDidDisappear(_ animated: Bool) {","        super.viewDidDisappear(animated)","","        \/\/ When leaving this view controller, suspend offline downloads.","        guard let packs = MLNOfflineStorage.shared.packs else { return }","        for pack in packs {","            if let userInfo = try? jsonDecoder.decode(UserData.self, from: pack.context) {","                print(\"Suspending download of offline pack: '\\(userInfo.name)'\")","            }","","            pack.suspend()","        }","    }","","    func startOfflinePackDownload() {","        \/\/ Create a region that includes the current viewport and any tiles needed to view it when zoomed further in.","        \/\/ Because tile count grows exponentially with the maximum zoom level, you should be conservative with your `toZoomLevel` setting.","        let region = MLNTilePyramidOfflineRegion(styleURL: mapView.styleURL, bounds: mapView.visibleCoordinateBounds, fromZoomLevel: mapView.zoomLevel, toZoomLevel: 14)","","        \/\/ Store some data for identification purposes alongside the downloaded resources.","        let jsonEncoder = JSONEncoder()","","        let userInfo = UserData(name: \"My Offline Pack\")","        let encodedUserInfo = try! jsonEncoder.encode(userInfo)","        print(encodedUserInfo)","","        \/\/ Create and register an offline pack with the shared offline storage object.","","        MLNOfflineStorage.shared.addPack(for: region, withContext: encodedUserInfo) { pack, error in","            guard error == nil else {","                \/\/ The pack couldn’t be created for some reason.","                print(\"Error: \\(error?.localizedDescription ?? \"unknown error\")\")","                return","            }","","            \/\/ Start downloading.","            pack!.resume()","        }","    }","","    \/\/ MARK: - MLNOfflinePack notification handlers","","    @objc func offlinePackProgressDidChange(notification: NSNotification) {","        \/\/ Get the offline pack this notification is regarding,","        \/\/ and the associated user info for the pack; in this case, `name = My Offline Pack`","        if let pack = notification.object as? MLNOfflinePack,","           let userInfo = try? jsonDecoder.decode(UserData.self, from: pack.context)","        {","            let progress = pack.progress","            \/\/ or notification.userInfo![MLNOfflinePackProgressUserInfoKey]!.MLNOfflinePackProgressValue","            let completedResources = progress.countOfResourcesCompleted","            let expectedResources = progress.countOfResourcesExpected","","            \/\/ Calculate current progress percentage.","            let progressPercentage = Float(completedResources) \/ Float(expectedResources)","","            \/\/ Setup the progress bar.","            if progressView == nil {","                progressView = UIProgressView(progressViewStyle: .default)","                let frame = view.bounds.size","                progressView.frame = CGRect(x: frame.width \/ 4, y: frame.height * 0.75, width: frame.width \/ 2, height: 10)","                view.addSubview(progressView)","            }","","            progressView.progress = progressPercentage","","            \/\/ If this pack has finished, print its size and resource count.","            if completedResources == expectedResources {","                let byteCount = ByteCountFormatter.string(fromByteCount: Int64(pack.progress.countOfBytesCompleted), countStyle: ByteCountFormatter.CountStyle.memory)","                print(\"Offline pack “\\(userInfo.name)” completed: \\(byteCount), \\(completedResources) resources\")","            } else {","                \/\/ Otherwise, print download\/verification progress.","                print(\"Offline pack “\\(userInfo.name)” has \\(completedResources) of \\(expectedResources) resources — \\(String(format: \"%.2f\", progressPercentage * 100))%.\")","            }","        }","    }","","    @objc func offlinePackDidReceiveError(notification: NSNotification) {","        if let pack = notification.object as? MLNOfflinePack,","           let userInfo = try? jsonDecoder.decode(UserData.self, from: pack.context),","           let error = notification.userInfo?[MLNOfflinePackUserInfoKey.error] as? NSError","        {","            print(\"Offline pack “\\(userInfo.name)” received error: \\(error.localizedFailureReason ?? \"unknown error\")\")","        }","    }","","    @objc func offlinePackDidReceiveMaximumAllowedMapboxTiles(notification: NSNotification) {","        if let pack = notification.object as? MLNOfflinePack,","           let userInfo = try? jsonDecoder.decode(UserData.self, from: pack.context),","           let maximumCount = (notification.userInfo?[MLNOfflinePackUserInfoKey.maximumCount] as AnyObject).uint64Value","        {","            print(\"Offline pack “\\(userInfo.name)” reached limit of \\(maximumCount) tiles.\")","        }","    }","}"]}]}],"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre-native-for-ios\/offlinepackexample"]}],"abstract":[{"text":"Download a region as an offline pack","type":"text"}],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"references":{"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflinePack":{"url":"\/documentation\/maplibre\/mlnofflinepack","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePack","type":"topic","title":"MLNOfflinePack","fragments":[{"text":"MLNOfflinePack","kind":"identifier"}],"role":"symbol","abstract":[{"text":"An ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePack"},{"type":"text","text":" represents a collection of resources necessary for viewing"},{"text":" ","type":"text"},{"type":"text","text":"a region offline to a local database."}],"kind":"symbol"},"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflineStorage/addContentsOfURL:withCompletionHandler:":{"url":"\/documentation\/maplibre\/mlnofflinestorage\/addcontentsofurl:withcompletionhandler:","abstract":[{"text":"Adds the offline packs located at the given URL to offline storage.","type":"text"}],"fragments":[{"text":"- ","kind":"text"},{"kind":"identifier","text":"addContentsOfURL:withCompletionHandler:"}],"navigatorTitle":[{"text":"addContentsOfURL:withCompletionHandler:","kind":"identifier"}],"kind":"symbol","title":"addContentsOfURL:withCompletionHandler:","role":"symbol","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage\/addContentsOfURL:withCompletionHandler:"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/ManageOfflineRegionsExample":{"title":"Manage Offline Regions","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/ManageOfflineRegionsExample","url":"\/documentation\/maplibre-native-for-ios\/manageofflineregionsexample","type":"topic","role":"article","abstract":[{"text":"Query, delete and download offline regions","type":"text"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflineStorage":{"url":"\/documentation\/maplibre\/mlnofflinestorage","fragments":[{"text":"MLNOfflineStorage","kind":"identifier"}],"kind":"symbol","role":"symbol","title":"MLNOfflineStorage","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage","abstract":[{"type":"text","text":"MLNOfflineStorage implements a singleton (shared object) that manages offline"},{"text":" ","type":"text"},{"type":"text","text":"packs and ambient caching. All of this class’s instance methods are asynchronous,"},{"type":"text","text":" "},{"text":"reflecting the fact that offline resources are stored in a database. The shared","type":"text"},{"type":"text","text":" "},{"text":"object maintains a canonical collection of offline packs in its ","type":"text"},{"code":"packs","type":"codeVoice"},{"type":"text","text":" property."}],"type":"topic"},"doc://org.swift.MyProject/documentation/MapLibre":{"title":"MapLibre","abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}],"url":"\/documentation\/maplibre","type":"topic","kind":"symbol","role":"collection","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre"},"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflineStorage/addPackForRegion:withContext:completionHandler:":{"role":"symbol","fragments":[{"text":"- ","kind":"text"},{"kind":"identifier","text":"addPackForRegion:withContext:completionHandler:"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"addPackForRegion:withContext:completionHandler:","kind":"identifier"}],"url":"\/documentation\/maplibre\/mlnofflinestorage\/addpackforregion:withcontext:completionhandler:","abstract":[{"text":"Creates and registers an offline pack that downloads the resources needed to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use the given region offline."}],"title":"addPackForRegion:withContext:completionHandler:","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage\/addPackForRegion:withContext:completionHandler:"},"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflinePackProgressChangedNotification":{"kind":"symbol","title":"MLNOfflinePackProgressChangedNotification","url":"\/documentation\/maplibre\/mlnofflinepackprogresschangednotification","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePackProgressChangedNotification","type":"topic","role":"symbol","fragments":[{"kind":"identifier","text":"MLNOfflinePackProgressChangedNotification"}],"abstract":[{"text":"Posted by the shared ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage","isActive":true},{"type":"text","text":" object when an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePack"},{"type":"text","text":" "},{"text":"object’s progress changes. The progress may change due to a resource being","type":"text"},{"type":"text","text":" "},{"text":"downloaded or because the pack discovers during the download that more","type":"text"},{"type":"text","text":" "},{"type":"text","text":"resources are required for offline viewing. This notification is posted"},{"type":"text","text":" "},{"text":"whenever any field in the ","type":"text"},{"type":"codeVoice","code":"progress"},{"type":"text","text":" property changes."}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNTilePyramidOfflineRegion":{"role":"symbol","fragments":[{"text":"MLNTilePyramidOfflineRegion","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/maplibre\/mlntilepyramidofflineregion","abstract":[{"text":"An offline region defined by a style URL, geographic coordinate bounds, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"range of zoom levels."}],"title":"MLNTilePyramidOfflineRegion","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNTilePyramidOfflineRegion"},"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflinePackMaximumMapboxTilesReachedNotification":{"url":"\/documentation\/maplibre\/mlnofflinepackmaximummapboxtilesreachednotification","type":"topic","title":"MLNOfflinePackMaximumMapboxTilesReachedNotification","role":"symbol","abstract":[{"type":"text","text":"Posted by the shared "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage","type":"reference","isActive":true},{"type":"text","text":" object when the maximum number of"},{"text":" ","type":"text"},{"text":"tiles has been downloaded and stored on the current device.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePackMaximumMapboxTilesReachedNotification","kind":"symbol","fragments":[{"kind":"identifier","text":"MLNOfflinePackMaximumMapboxTilesReachedNotification"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflinePackErrorNotification":{"fragments":[{"text":"MLNOfflinePackErrorNotification","kind":"identifier"}],"abstract":[{"type":"text","text":"Posted by the shared "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage"},{"text":" object whenever an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage"},{"type":"text","text":" "},{"text":"object encounters an error while downloading. The error may be recoverable and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"may not warrant the user’s attention. For example, the pack’s implementation"},{"type":"text","text":" "},{"text":"may attempt to re-request failed resources based on an exponential backoff","type":"text"},{"text":" ","type":"text"},{"text":"strategy or upon the restoration of network access.","type":"text"}],"type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflinePackErrorNotification","title":"MLNOfflinePackErrorNotification","url":"\/documentation\/maplibre\/mlnofflinepackerrornotification","role":"symbol","kind":"symbol"}}}