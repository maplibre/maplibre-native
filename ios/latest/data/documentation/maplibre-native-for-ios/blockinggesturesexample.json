{"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"roleHeading":"Article","role":"article","title":"Blocking Gestures","modules":[{"name":"MapLibre"}]},"primaryContentSections":[{"kind":"content","content":[{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This example uses SwiftUI."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To constrain the map to a certain area, you need to implement the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapViewDelegate\/mapView:shouldChangeFromCamera:toCamera:"},{"type":"text","text":" method of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapViewDelegate"},{"type":"text","text":". By returning a boolean you can either allow or disallow a camera change."}]},{"syntax":"swift","code":["\/\/ Denver, Colorado","private let center = CLLocationCoordinate2D(latitude: 39.748947, longitude: -104.995882)","","\/\/ Colorado’s bounds","private let colorado = MLNCoordinateBounds(","    sw: CLLocationCoordinate2D(latitude: 36.986207, longitude: -109.049896),","    ne: CLLocationCoordinate2D(latitude: 40.989329, longitude: -102.062592)",")","","struct BlockingGesturesExample: UIViewRepresentable {","    class Coordinator: NSObject, MLNMapViewDelegate {","        func mapView(_ mapView: MLNMapView, shouldChangeFrom _: MLNMapCamera, to newCamera: MLNMapCamera) -> Bool {","            \/\/ Get the current camera to restore it after.","            let currentCamera = mapView.camera","","            \/\/ From the new camera obtain the center to test if it’s inside the boundaries.","            let newCameraCenter = newCamera.centerCoordinate","","            \/\/ Set the map’s visible bounds to newCamera.","            mapView.camera = newCamera","            let newVisibleCoordinates = mapView.visibleCoordinateBounds","","            \/\/ Revert the camera.","            mapView.camera = currentCamera","","            \/\/ Test if the newCameraCenter and newVisibleCoordinates are inside self.colorado.","            let inside = MLNCoordinateInCoordinateBounds(newCameraCenter, colorado)","            let intersects = MLNCoordinateInCoordinateBounds(newVisibleCoordinates.ne, colorado) && MLNCoordinateInCoordinateBounds(newVisibleCoordinates.sw, colorado)","","            return inside && intersects","        }","    }","","    func makeUIView(context: Context) -> MLNMapView {","        let mapView = MLNMapView(frame: .zero, styleURL: VERSATILES_COLORFUL_STYLE)","        mapView.setCenter(center, zoomLevel: 10, direction: 0, animated: false)","        mapView.delegate = context.coordinator","","        return mapView","    }","","    func updateUIView(_: MLNMapView, context _: Context) {}","","    func makeCoordinator() -> Coordinator {","        Coordinator()","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The style used in this example can be found here: "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/ExampleStyles","isActive":true},{"type":"text","text":"."}]}]}],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/LineOnUserTap","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/AnnotationViewExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/BuildingLightExample"],"title":"Map Interaction","generated":true}],"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre-native-for-ios\/blockinggesturesexample"]}],"sections":[],"identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/BlockingGesturesExample","interfaceLanguage":"occ"},"abstract":[{"type":"text","text":"Constrain the map to a certain area."}],"kind":"article","references":{"doc://org.swift.MyProject/documentation/MapLibre":{"url":"\/documentation\/maplibre","abstract":[{"text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling.","type":"text"}],"title":"MapLibre","kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/LineOnUserTap":{"kind":"article","role":"article","title":"Add Line on User Tap","url":"\/documentation\/maplibre-native-for-ios\/lineonusertap","abstract":[{"text":"Demonstrating adding ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true},{"type":"text","text":" annotations and responding to user input."}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/LineOnUserTap","type":"topic"},"doc://org.swift.MyProject/documentation/MapLibre/MLNMapViewDelegate/mapView:shouldChangeFromCamera:toCamera:":{"navigatorTitle":[{"kind":"identifier","text":"mapView:shouldChangeFromCamera:toCamera:"}],"role":"symbol","title":"mapView:shouldChangeFromCamera:toCamera:","type":"topic","kind":"symbol","fragments":[{"kind":"text","text":"- "},{"text":"mapView:shouldChangeFromCamera:toCamera:","kind":"identifier"}],"url":"\/documentation\/maplibre\/mlnmapviewdelegate\/mapview:shouldchangefromcamera:tocamera:","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapViewDelegate\/mapView:shouldChangeFromCamera:toCamera:","abstract":[{"type":"text","text":"Asks the delegate whether the map view should be allowed to change from the"},{"text":" ","type":"text"},{"text":"existing camera to the new camera in response to a user gesture.","type":"text"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/AnnotationViewExample":{"role":"article","title":"Custom Annotation View","type":"topic","kind":"article","url":"\/documentation\/maplibre-native-for-ios\/annotationviewexample","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/AnnotationViewExample","abstract":[{"type":"text","text":"Add a custom annotation view"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","kind":"symbol","url":"\/documentation\/maplibre\/mlnpolyline","fragments":[{"text":"MLNPolyline","kind":"identifier"}],"abstract":[{"text":"An ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true},{"type":"text","text":" object represents a shape consisting of two or more vertices,"},{"text":" ","type":"text"},{"type":"text","text":"specified as "},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"type":"text","text":" instances, and the line segments that"},{"type":"text","text":" "},{"type":"text","text":"connect them. For example, you could use an polyline to represent a road or the"},{"type":"text","text":" "},{"text":"path along which something moves.","type":"text"}],"role":"symbol","title":"MLNPolyline","type":"topic"},"doc://org.swift.MyProject/documentation/MapLibre/MLNMapView":{"kind":"symbol","abstract":[{"text":"An interactive, customizable map view with an interface similar to the one","type":"text"},{"text":" ","type":"text"},{"text":"provided by Apple’s MapKit.","type":"text"}],"title":"MLNMapView","role":"symbol","fragments":[{"kind":"identifier","text":"MLNMapView"}],"type":"topic","url":"\/documentation\/maplibre\/mlnmapview","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/ExampleStyles":{"role":"article","title":"Styles in Examples","type":"topic","kind":"article","url":"\/documentation\/maplibre-native-for-ios\/examplestyles","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/ExampleStyles","abstract":[{"text":"The following styles are used in the examples:","type":"text"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/BuildingLightExample":{"url":"\/documentation\/maplibre-native-for-ios\/buildinglightexample","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/BuildingLightExample","kind":"article","title":"Fill Extrustion Layer","abstract":[{"type":"text","text":"Add a fill extrustion layer and adjust the light dynamically with a slider."}],"type":"topic","role":"article"},"doc://org.swift.MyProject/documentation/MapLibre/MLNMapViewDelegate":{"role":"symbol","url":"\/documentation\/maplibre\/mlnmapviewdelegate","fragments":[{"text":"MLNMapViewDelegate","kind":"identifier"}],"type":"topic","abstract":[{"text":"The ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapViewDelegate","isActive":true},{"type":"text","text":" protocol defines a set of optional methods that you"},{"text":" ","type":"text"},{"type":"text","text":"can use to receive map-related update messages. Because many map operations"},{"text":" ","type":"text"},{"type":"text","text":"require the "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView","isActive":true},{"type":"text","text":" class to load data asynchronously, the map view calls"},{"text":" ","type":"text"},{"type":"text","text":"these methods to notify your application when specific operations complete. The"},{"text":" ","type":"text"},{"text":"map view also uses these methods to request information about annotations","type":"text"},{"type":"text","text":" "},{"text":"displayed on the map, such as the styles and interaction modes to apply to","type":"text"},{"type":"text","text":" "},{"text":"individual annotations.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapViewDelegate","title":"MLNMapViewDelegate"}}}