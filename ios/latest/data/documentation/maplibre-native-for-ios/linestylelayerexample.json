{"sections":[],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"content":[{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"This example uses UIKit."}],"type":"paragraph"}]},{"syntax":"swift","code":["class LineStyleLayerExample: UIViewController, MLNMapViewDelegate {","    var mapView: MLNMapView!","","    override func viewDidLoad() {","        super.viewDidLoad()","","        mapView = MLNMapView(frame: view.bounds, styleURL: VERSATILES_COLORFUL_STYLE)","        mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight]","","        mapView.setCenter(","            CLLocationCoordinate2D(latitude: 45.5076, longitude: -122.6736),","            zoomLevel: 11,","            animated: false","        )","        view.addSubview(mapView)","","        mapView.delegate = self","    }","","    \/\/ Wait until the map is loaded before adding to the map.","    func mapView(_: MLNMapView, didFinishLoading _: MLNStyle) {","        loadGeoJson()","    }","","    func loadGeoJson() {","        DispatchQueue.global().async {","            \/\/ Get the path for example.geojson in the app’s bundle.","            guard let jsonUrl = Bundle.main.url(forResource: \"example\", withExtension: \"geojson\") else {","                preconditionFailure(\"Failed to load local GeoJSON file\")","            }","","            guard let jsonData = try? Data(contentsOf: jsonUrl) else {","                preconditionFailure(\"Failed to parse GeoJSON file\")","            }","","            DispatchQueue.main.async {","                self.drawPolyline(geoJson: jsonData)","            }","        }","    }","","    func drawPolyline(geoJson: Data) {","        \/\/ Add our GeoJSON data to the map as an MLNGeoJSONSource.","        \/\/ We can then reference this data from an MLNStyleLayer.","","        \/\/ MLNMapView.style is optional, so you must guard against it not being set.","        guard let style = mapView.style else { return }","","        guard let shapeFromGeoJSON = try? MLNShape(data: geoJson, encoding: String.Encoding.utf8.rawValue) else {","            fatalError(\"Could not generate MLNShape\")","        }","","        let source = MLNShapeSource(identifier: \"polyline\", shape: shapeFromGeoJSON, options: nil)","        style.addSource(source)","","        \/\/ Create new layer for the line.","        let layer = MLNLineStyleLayer(identifier: \"polyline\", source: source)","","        \/\/ Set the line join and cap to a rounded end.","        layer.lineJoin = NSExpression(forConstantValue: \"round\")","        layer.lineCap = NSExpression(forConstantValue: \"round\")","","        \/\/ Set the line color to a constant blue color.","        layer.lineColor = NSExpression(forConstantValue: UIColor(red: 59 \/ 255, green: 178 \/ 255, blue: 208 \/ 255, alpha: 1))","","        \/\/ Use `NSExpression` to smoothly adjust the line width from 2pt to 20pt between zoom levels 14 and 18. The `interpolationBase` parameter allows the values to interpolate along an exponential curve.","        layer.lineWidth = NSExpression(forMLNInterpolating: NSExpression.zoomLevelVariable, curveType: MLNExpressionInterpolationMode.linear, parameters: nil, stops: NSExpression(forConstantValue: [14: 2, 18: 20]))","","        \/\/ We can also add a second layer that will draw a stroke around the original line.","        let casingLayer = MLNLineStyleLayer(identifier: \"polyline-case\", source: source)","        \/\/ Copy these attributes from the main line layer.","        casingLayer.lineJoin = layer.lineJoin","        casingLayer.lineCap = layer.lineCap","        \/\/ Line gap width represents the space before the outline begins, so should match the main line’s line width exactly.","        casingLayer.lineGapWidth = layer.lineWidth","        \/\/ Stroke color slightly darker than the line color.","        casingLayer.lineColor = NSExpression(forConstantValue: UIColor(red: 41 \/ 255, green: 145 \/ 255, blue: 171 \/ 255, alpha: 1))","        \/\/ Use `NSExpression` to gradually increase the stroke width between zoom levels 14 and 18.","        casingLayer.lineWidth = NSExpression(forMLNInterpolating: NSExpression.zoomLevelVariable, curveType: MLNExpressionInterpolationMode.linear, parameters: nil, stops: NSExpression(forConstantValue: [14: 1, 18: 4]))","","        \/\/ Just for fun, let’s add another copy of the line with a dash pattern.","        let dashedLayer = MLNLineStyleLayer(identifier: \"polyline-dash\", source: source)","        dashedLayer.lineJoin = layer.lineJoin","        dashedLayer.lineCap = layer.lineCap","        dashedLayer.lineColor = NSExpression(forConstantValue: UIColor.white)","        dashedLayer.lineOpacity = NSExpression(forConstantValue: 0.5)","        dashedLayer.lineWidth = layer.lineWidth","        \/\/ Dash pattern in the format [dash, gap, dash, gap, ...]. You’ll want to adjust these values based on the line cap style.","        dashedLayer.lineDashPattern = NSExpression(forConstantValue: [0, 1.5])","","        style.addLayer(layer)","        style.addLayer(dashedLayer)","        style.insertLayer(casingLayer, below: layer)","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"LineStyleLayerExample.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Map Data from OpenStreetMap."}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/LineStyleLayerExample","interfaceLanguage":"occ"},"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre-native-for-ios\/linestylelayerexample"]}],"kind":"article","seeAlsoSections":[{"title":"Styling and Dynamic Data","generated":true,"identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/AnimatedLineExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/WebAPIDataExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/DDSCircleLayerExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/POIAlongRouteExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GeoJSON","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/PMTiles"]}],"abstract":[{"text":"Adding an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer"},{"text":" to the map using a GeoJSON file.","type":"text"}],"metadata":{"role":"article","roleHeading":"Article","title":"Using GeoJSON with a line style layer","modules":[{"name":"MapLibre"}]},"references":{"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer":{"abstract":[{"type":"text","text":"An "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer"},{"type":"text","text":" is a style layer that renders one or more stroked"},{"text":" ","type":"text"},{"type":"text","text":"polylines on the map."}],"role":"symbol","type":"topic","url":"\/documentation\/maplibre\/mlnlinestylelayer","fragments":[{"text":"MLNLineStyleLayer","kind":"identifier"}],"kind":"symbol","title":"MLNLineStyleLayer","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/DDSCircleLayerExample":{"type":"topic","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/DDSCircleLayerExample","title":"Vector Tile Sources","kind":"article","abstract":[{"text":"Add and style a vector tile source","type":"text"}],"url":"\/documentation\/maplibre-native-for-ios\/ddscirclelayerexample"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GeoJSON":{"type":"topic","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GeoJSON","title":"Working with GeoJSON Data","kind":"article","abstract":[],"url":"\/documentation\/maplibre-native-for-ios\/geojson"},"doc://org.swift.MyProject/documentation/MapLibre":{"url":"\/documentation\/maplibre","kind":"symbol","role":"collection","title":"MapLibre","type":"topic","abstract":[{"text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/WebAPIDataExample":{"type":"topic","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/WebAPIDataExample","title":"Showing data from an API","abstract":[{"type":"text","text":"Showing data from an API with custom styling and interaction"}],"kind":"article","url":"\/documentation\/maplibre-native-for-ios\/webapidataexample"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/POIAlongRouteExample":{"type":"topic","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/POIAlongRouteExample","title":"POI Along a Route","kind":"article","abstract":[{"text":"Use an ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":" to show POI and road labels along a route."}],"url":"\/documentation\/maplibre-native-for-ios\/poialongrouteexample"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/PMTiles":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/PMTiles","url":"\/documentation\/maplibre-native-for-ios\/pmtiles","abstract":[{"type":"text","text":"Working with PMTiles"}],"role":"article","type":"topic","kind":"article","title":"PMTiles"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/AnimatedLineExample":{"url":"\/documentation\/maplibre-native-for-ios\/animatedlineexample","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/AnimatedLineExample","abstract":[{"type":"text","text":"Add an animated line to a map"}],"role":"article","type":"topic","kind":"article","title":"Animated Line"},"LineStyleLayerExample.png":{"type":"image","identifier":"LineStyleLayerExample.png","variants":[{"traits":["2x","light"],"url":"\/images\/LineStyleLayerExample@2x.png"}],"alt":null}}}