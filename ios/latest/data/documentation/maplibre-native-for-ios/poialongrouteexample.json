{"seeAlsoSections":[{"title":"Styling and Dynamic Data","anchor":"Styling-and-Dynamic-Data","generated":true,"identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/AnimatedLineExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/WebAPIDataExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/LineStyleLayerExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/DDSCircleLayerExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GeoJSON","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/PMTiles"]}],"primaryContentSections":[{"content":[{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"This example uses UIKit."}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"This example adds a dynamically styled GeoJSON route to the map, similar to "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/LineStyleLayerExample","isActive":true},{"type":"text","text":". However, two existing layers: the "},{"type":"codeVoice","code":"poi"},{"type":"text","text":" layer and the "},{"type":"codeVoice","code":"road_label"},{"type":"text","text":" part of the Americana style are adjusted as well. The contents of these layers are shown or hidden, based on whether they lay inside a polygon around the route. In this example, both the route and the area of the polygon along the route are hardcoded."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The route is styled with three "},{"type":"codeVoice","code":"MLNLineStyleLayer"},{"type":"text","text":"s. We make use of the "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},{"type":"text","text":" to set the widths of these line layers at various zoom levels."}],"type":"paragraph"},{"code":["class POIAlongRouteExample: UIViewController, MLNMapViewDelegate {","    var mapView: MLNMapView!","","    override func viewDidLoad() {","        super.viewDidLoad()","","        mapView = MLNMapView(frame: view.bounds, styleURL: AMERICANA_STYLE)","        mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight]","        mapView.setCenter(","            CLLocationCoordinate2D(latitude: 45.52214, longitude: -122.63748),","            zoomLevel: 18,","            animated: false","        )","        view.addSubview(mapView)","        mapView.delegate = self","    }","","    \/\/ Wait until the map is loaded before adding to the map.","    func mapView(_: MLNMapView, didFinishLoading _: MLNStyle) {","        loadGeoJson()","        restrictPOIVisibleShape()","        setCamera()","    }","","    func loadGeoJson() {","        DispatchQueue.global().async {","            \/\/ Get the path for example.geojson in the app’s bundle.","            guard let jsonUrl = Bundle.main.url(forResource: \"example\", withExtension: \"geojson\") else {","                preconditionFailure(\"Failed to load local GeoJSON file\")","            }","","            guard let jsonData = try? Data(contentsOf: jsonUrl) else {","                preconditionFailure(\"Failed to parse GeoJSON file\")","            }","","            DispatchQueue.main.async {","                self.drawPolyline(geoJson: jsonData)","            }","        }","    }","","    func setCamera() {","        let camera = mapView.camera","        camera.heading = 249.37706203842038","        camera.pitch = 60","        camera.centerCoordinate.latitude = 45.52199780570582","        camera.centerCoordinate.longitude = -122.6418837958432","        mapView.setCamera(camera, animated: false)","        mapView.setZoomLevel(15.062187320447523, animated: false)","    }","","    func drawPolyline(geoJson: Data) {","        \/\/ Add our GeoJSON data to the map as an MLNGeoJSONSource.","        \/\/ We can then reference this data from an MLNStyleLayer.","","        \/\/ MLNMapView.style is optional, so you must guard against it not being set.","        guard let style = mapView.style else { return }","","        guard let shapeFromGeoJSON = try? MLNShape(data: geoJson, encoding: String.Encoding.utf8.rawValue) else {","            fatalError(\"Could not generate MLNShape\")","        }","","        let source = MLNShapeSource(identifier: \"polyline\", shape: shapeFromGeoJSON, options: nil)","        style.addSource(source)","","        \/\/ Create new layer for the line.","        let layer = MLNLineStyleLayer(identifier: \"polyline\", source: source)","","        \/\/ Set the line join and cap to a rounded end.","        layer.lineJoin = NSExpression(forConstantValue: \"round\")","        layer.lineCap = NSExpression(forConstantValue: \"round\")","","        \/\/ Set the line color to a constant blue color.","        layer.lineColor = NSExpression(forConstantValue: UIColor(red: 59 \/ 255, green: 178 \/ 255, blue: 208 \/ 255, alpha: 1))","","        \/\/ Use expression to smoothly adjust the line width from 2pt to 20pt between zoom levels 14 and 18.","        layer.lineWidth = NSExpression(mglJSONObject: [\"interpolate\", [\"linear\"], [\"zoom\"], 14, 2, 18, 20])","","        \/\/ We can also add a second layer that will draw a stroke around the original line.","        let casingLayer = MLNLineStyleLayer(identifier: \"polyline-case\", source: source)","        \/\/ Copy these attributes from the main line layer.","        casingLayer.lineJoin = layer.lineJoin","        casingLayer.lineCap = layer.lineCap","        \/\/ Line gap width represents the space before the outline begins, so should match the main line’s line width exactly.","        casingLayer.lineGapWidth = layer.lineWidth","        \/\/ Stroke color slightly darker than the line color.","        casingLayer.lineColor = NSExpression(forConstantValue: UIColor(red: 41 \/ 255, green: 145 \/ 255, blue: 171 \/ 255, alpha: 1))","        \/\/ Use expression to gradually increase the stroke width between zoom levels 14 and 18.","        casingLayer.lineWidth = NSExpression(mglJSONObject: [\"interpolate\", [\"linear\"], [\"zoom\"], 14, 1, 18, 4])","","        \/\/ Just for fun, let’s add another copy of the line with a dash pattern.","        let dashedLayer = MLNLineStyleLayer(identifier: \"polyline-dash\", source: source)","        dashedLayer.lineJoin = layer.lineJoin","        dashedLayer.lineCap = layer.lineCap","        dashedLayer.lineColor = NSExpression(forConstantValue: UIColor.white)","        dashedLayer.lineOpacity = NSExpression(forConstantValue: 0.5)","        dashedLayer.lineWidth = layer.lineWidth","        \/\/ Dash pattern in the format [dash, gap, dash, gap, ...]. You’ll want to adjust these values based on the line cap style.","        dashedLayer.lineDashPattern = NSExpression(forConstantValue: [0, 1.5])","","        guard let poiLayer = mapView.style?.layer(withIdentifier: \"poi\") as? MLNSymbolStyleLayer else {","            print(\"Could not find poi layer\")","            return","        }","        style.insertLayer(layer, below: poiLayer)","        style.insertLayer(dashedLayer, above: layer)","        style.insertLayer(casingLayer, below: layer)","    }","","    func restrictPOIVisibleShape() {","        \/\/ find poi-label layer","        guard let poiLayer = mapView.style?.layer(withIdentifier: \"poi\") as? MLNSymbolStyleLayer else {","            print(\"Could not find poi layer\")","            return","        }","        \/\/ find road-label layer","        guard let roadLabelLayer = mapView.style?.layer(withIdentifier: \"road_label\") as? MLNSymbolStyleLayer else {","            print(\"Could not find road_label layer\")","            return","        }","        \/\/ show the POI and road that is within this polygon","        let polygonShape = [","            [-122.63730626171188, 45.52288837762333],","            [-122.65455070022612, 45.52299746891552],","            [-122.65747018755947, 45.52177017968134],","            [-122.65992255691913, 45.51931552089448],","            [-122.66015611590598, 45.513696676587045],","            [-122.66696825301655, 45.51375123117057],","            [-122.6672018120034, 45.51222368283956],","            [-122.6571977020749, 45.51225096085216],","            [-122.6570419960839, 45.51822452705878],","            [-122.65392787626189, 45.52106106703124],","            [-122.63567134880579, 45.52114288817623],","            [-122.63657745074761, 45.52288036393409],","            [-122.6373404839605, 45.52291377640398],","        ]","        \/\/ create a polygon class","        let coordinates = polygonShape.map { CLLocationCoordinate2D(latitude: $0[1], longitude: $0[0]) }","        let bufferedRoutePolygon = MLNPolygon(coordinates: coordinates, count: UInt(coordinates.count), interiorPolygons: nil)","        \/\/ apply predicates to these two layers","        poiLayer.predicate = NSPredicate(format: \"SELF IN %@\", bufferedRoutePolygon)","        roadLabelLayer.predicate = NSPredicate(format: \"SELF IN %@\", bufferedRoutePolygon)","    }","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"metadata":{"title":"POI Along a Route","modules":[{"name":"MapLibre"}],"roleHeading":"Article","role":"article"},"kind":"article","identifier":{"interfaceLanguage":"occ","url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/POIAlongRouteExample"},"sections":[],"variants":[{"paths":["\/documentation\/maplibre-native-for-ios\/poialongrouteexample"],"traits":[{"interfaceLanguage":"occ"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Use an ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"text":" to show POI and road labels along a route.","type":"text"}],"references":{"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/DDSCircleLayerExample":{"title":"Vector Tile Sources","type":"topic","url":"\/documentation\/maplibre-native-for-ios\/ddscirclelayerexample","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/DDSCircleLayerExample","abstract":[{"type":"text","text":"Add and style a vector tile source"}],"kind":"article"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/LineStyleLayerExample":{"role":"article","url":"\/documentation\/maplibre-native-for-ios\/linestylelayerexample","title":"Using GeoJSON with a line style layer","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/LineStyleLayerExample","abstract":[{"text":"Adding an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer"},{"text":" to the map using a GeoJSON file.","type":"text"}],"kind":"article"},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"type":"link","title":"interpolate expression","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","titleInlineContent":[{"text":"interpolate expression","type":"text"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},"doc://org.swift.MyProject/documentation/MapLibre":{"kind":"symbol","abstract":[{"text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling.","type":"text"}],"url":"\/documentation\/maplibre","type":"topic","title":"MapLibre","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","role":"collection"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer":{"fragments":[{"text":"MLNLineStyleLayer","kind":"identifier"}],"abstract":[{"text":"An ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer"},{"text":" is a style layer that renders one or more stroked","type":"text"},{"text":" ","type":"text"},{"text":"polylines on the map.","type":"text"}],"kind":"symbol","url":"\/documentation\/maplibre\/mlnlinestylelayer","role":"symbol","title":"MLNLineStyleLayer","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/AnimatedLineExample":{"url":"\/documentation\/maplibre-native-for-ios\/animatedlineexample","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/AnimatedLineExample","type":"topic","role":"article","abstract":[{"type":"text","text":"Add an animated line to a map"}],"title":"Animated Line"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GeoJSON":{"kind":"article","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GeoJSON","url":"\/documentation\/maplibre-native-for-ios\/geojson","title":"Working with GeoJSON Data","role":"article","abstract":[]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/PMTiles":{"type":"topic","abstract":[{"type":"text","text":"Working with PMTiles"}],"title":"PMTiles","kind":"article","url":"\/documentation\/maplibre-native-for-ios\/pmtiles","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/PMTiles"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/WebAPIDataExample":{"kind":"article","abstract":[{"type":"text","text":"Showing data from an API with custom styling and interaction"}],"url":"\/documentation\/maplibre-native-for-ios\/webapidataexample","type":"topic","role":"article","title":"Showing data from an API","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/WebAPIDataExample"}}}