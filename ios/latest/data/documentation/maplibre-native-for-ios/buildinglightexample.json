{"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Add a fill extrustion layer and adjust the light dynamically with a slider."}],"primaryContentSections":[{"kind":"content","content":[{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"text":"This example uses UIKit.","type":"text"}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"This examples adds a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNFillExtrusionStyleLayer"},{"type":"text","text":". The to be rendered height of the buildings is read from the vector data."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The global "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle\/light","isActive":true},{"text":" property is adjusted as the user changes a slider, which affects the fill extrustion layer.","type":"text"}]},{"type":"codeListing","code":["class BuildingLightExample: UIViewController, MLNMapViewDelegate {","    var mapView: MLNMapView!","    var light: MLNLight!","    var slider: UISlider!","    override func viewDidLoad() {","        super.viewDidLoad()","","        mapView = MLNMapView(frame: view.bounds, styleURL: AMERICANA_STYLE)","        mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight]","        mapView.delegate = self","","        \/\/ Center the map on the Flatiron Building in New York, NY.","        mapView.camera = MLNMapCamera(lookingAtCenter: CLLocationCoordinate2D(latitude: 40.7411, longitude: -73.9897), altitude: 1200, pitch: 45, heading: 0)","","        view.addSubview(mapView)","","        addSlider()","    }","","    \/\/ Add a slider to the map view. This will be used to adjust the map's light object.","    func addSlider() {","        slider = UISlider()","        slider.translatesAutoresizingMaskIntoConstraints = false","        slider.autoresizingMask = [.flexibleTopMargin, .flexibleLeftMargin, .flexibleRightMargin]","        slider.minimumValue = -180","        slider.maximumValue = 180","        slider.value = 0","        slider.isContinuous = true","","        slider.addTarget(self, action: #selector(shiftLight), for: .valueChanged)","        view.addSubview(slider)","        NSLayoutConstraint.activate([","            slider.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 40.0),","            slider.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -40.0),","            slider.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -75.0),","        ])","    }","","    func mapView(_: MLNMapView, didFinishLoading style: MLNStyle) {","        \/\/ Add a MLNFillExtrusionStyleLayer.","        addFillExtrusionLayer(style: style)","","        \/\/ Create an MLNLight object.","        light = MLNLight()","","        \/\/ Create an MLNSphericalPosition and set the radial, azimuthal, and polar values.","        \/\/ Radial : Distance from the center of the base of an object to its light. Takes a CGFloat.","        \/\/ Azimuthal : Position of the light relative to its anchor. Takes a CLLocationDirection.","        \/\/ Polar : The height of the light. Takes a CLLocationDirection.","        let position = MLNSphericalPositionMake(5, 180, 80)","        light.position = NSExpression(forConstantValue: NSValue(mlnSphericalPosition: position))","","        \/\/ Set the light anchor to the map and add the light object to the map view's style. The light anchor can be the viewport (or rotates with the viewport) or the map (rotates with the map). To make the viewport the anchor, replace `map` with `viewport`.","        light.anchor = NSExpression(forConstantValue: \"map\")","        style.light = light","    }","","    @objc func shiftLight() {","        \/\/ Use the slider's value to change the light's polar value.","        let position = MLNSphericalPositionMake(5, 180, CLLocationDirection(slider.value))","        light.position = NSExpression(forConstantValue: NSValue(mlnSphericalPosition: position))","        mapView.style?.light = light","    }","","    func addFillExtrusionLayer(style: MLNStyle) {","        \/\/ Access the OpenMapTiles source and use it to create a ``MLNFillExtrusionStyleLayer``. The source identifier is `openmaptiles`. Use the `sources` property on a style to verify source identifiers.","        guard let source = style.source(withIdentifier: \"openmaptiles\") else {","            print(\"Could not find source openmaptiles\")","            return","        }","        let layer = MLNFillExtrusionStyleLayer(identifier: \"extrusion-layer\", source: source)","        layer.sourceLayerIdentifier = \"building\"","        layer.fillExtrusionBase = NSExpression(forKeyPath: \"render_min_height\")","        layer.fillExtrusionHeight = NSExpression(forKeyPath: \"render_height\")","        layer.fillExtrusionOpacity = NSExpression(forConstantValue: 0.8)","        layer.fillExtrusionColor = NSExpression(forConstantValue: UIColor.white)","","        \/\/ Access the map's layer with the identifier \"poi\" and insert the fill extrusion layer below it.","        let symbolLayer = style.layer(withIdentifier: \"poi\")!","        style.insertLayer(layer, below: symbolLayer)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"BuildingLightExample.png"}]}]}],"kind":"article","variants":[{"paths":["\/documentation\/maplibre-native-for-ios\/buildinglightexample"],"traits":[{"interfaceLanguage":"occ"}]}],"metadata":{"modules":[{"name":"MapLibre"}],"title":"Fill Extrustion Layer","role":"article","roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"sections":[],"identifier":{"interfaceLanguage":"occ","url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/BuildingLightExample"},"seeAlsoSections":[{"generated":true,"title":"Map Interaction","identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/LineOnUserTap","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/BlockingGesturesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/AnnotationViewExample"]}],"references":{"BuildingLightExample.png":{"variants":[{"traits":["2x","light"],"url":"\/images\/BuildingLightExample@2x.png"}],"type":"image","alt":null,"identifier":"BuildingLightExample.png"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/LineOnUserTap":{"abstract":[{"type":"text","text":"Demonstrating adding "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true,"type":"reference"},{"text":" annotations and responding to user input.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/LineOnUserTap","kind":"article","type":"topic","url":"\/documentation\/maplibre-native-for-ios\/lineonusertap","role":"article","title":"Add Line on User Tap"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/AnnotationViewExample":{"abstract":[{"text":"Add a custom annotation view","type":"text"}],"role":"article","url":"\/documentation\/maplibre-native-for-ios\/annotationviewexample","title":"Custom Annotation View","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/AnnotationViewExample","type":"topic","kind":"article"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/BlockingGesturesExample":{"title":"Blocking Gestures","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/BlockingGesturesExample","kind":"article","url":"\/documentation\/maplibre-native-for-ios\/blockinggesturesexample","type":"topic","abstract":[{"text":"Constrain the map to a certain area.","type":"text"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNFillExtrusionStyleLayer":{"title":"MLNFillExtrusionStyleLayer","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNFillExtrusionStyleLayer","url":"\/documentation\/maplibre\/mlnfillextrusionstylelayer","kind":"symbol","role":"symbol","fragments":[{"text":"MLNFillExtrusionStyleLayer","kind":"identifier"}],"abstract":[{"text":"An ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNFillExtrusionStyleLayer","type":"reference","isActive":true},{"text":" is a style layer that renders one or more 3D","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"extruded polygons on the map."}],"type":"topic"},"doc://org.swift.MyProject/documentation/MapLibre":{"title":"MapLibre","kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","abstract":[{"text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling.","type":"text"}],"url":"\/documentation\/maplibre"},"doc://org.swift.MyProject/documentation/MapLibre/MLNStyle/light":{"fragments":[{"text":"light","kind":"identifier"}],"title":"light","kind":"symbol","abstract":[{"text":"Provides global light source for the style.","type":"text"}],"role":"symbol","url":"\/documentation\/maplibre\/mlnstyle\/light","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle\/light","type":"topic"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"type":"topic","url":"\/documentation\/maplibre\/mlnpolyline","abstract":[{"type":"text","text":"An "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline"},{"text":" object represents a shape consisting of two or more vertices,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specified as "},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"type":"text","text":" instances, and the line segments that"},{"text":" ","type":"text"},{"type":"text","text":"connect them. For example, you could use an polyline to represent a road or the"},{"text":" ","type":"text"},{"text":"path along which something moves.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","role":"symbol","fragments":[{"text":"MLNPolyline","kind":"identifier"}],"title":"MLNPolyline"}}}