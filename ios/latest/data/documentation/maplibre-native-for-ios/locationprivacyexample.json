{"sections":[],"abstract":[{"type":"text","text":"Requesting precise location with "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLocationManager","isActive":true},{"type":"text","text":"."}],"metadata":{"roleHeading":"Article","title":"User Location & Location Privacy","modules":[{"name":"MapLibre"}],"role":"article"},"primaryContentSections":[{"content":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This example uses SwiftUI."}]}],"type":"aside","name":"Note"},{"inlineContent":[{"type":"text","text":"This example shows how to request a precise location with "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLocationManager","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Letâ€™s prepare your "},{"type":"codeVoice","code":"Info.plist"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"First, provide a description why your app needs to access location:","type":"text"}]},{"code":["<key>NSLocationWhenInUseUsageDescription<\/key>","<string>Dummy Location When In Use Description<\/string>"],"syntax":"plist","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Second, add a description why your app needs precise location:"}]},{"syntax":"plist","code":["<key>NSLocationTemporaryUsageDescriptionDictionary<\/key>","<dict>","  <key>MLNAccuracyAuthorizationDescription<\/key>","  <string>Dummy Precise Location Description<\/string>","<\/dict>"],"type":"codeListing"},{"inlineContent":[{"text":"Third and finally, specify your app only needs reduced location access by default (until you request precise accuracy in the example):","type":"text"}],"type":"paragraph"},{"syntax":"plist","type":"codeListing","code":["<key>NSLocationDefaultAccuracyReduced<\/key>","<true\/>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Coordinator"},{"text":" defined below is also the ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapViewDelegate","type":"reference","isActive":true},{"type":"text","text":". When the location manager authorization changes it will call the relevant method. If precise location has not been granted, a button is shown at the bottom of the map."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"ImpreciseLocation.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the button is pressed a pop-up with the description we set in "},{"type":"codeVoice","code":"Info.plist"},{"type":"text","text":" will be shown:"}]},{"inlineContent":[{"identifier":"PreciseLocationRequestPopup.png","type":"image"}],"type":"paragraph"},{"type":"codeListing","code":["enum LocationAccuracyState {","    case unknown","    case reducedAccuracy","    case fullAccuracy","}","","@MainActor","class PrivacyExampleViewModel: NSObject, ObservableObject {","    @Published var locationAccuracy: LocationAccuracyState = .unknown","    @Published var showTemporaryLocationAuthorization = false","}","","class PrivacyExampleCoordinator: NSObject, MLNMapViewDelegate {","    @ObservedObject private var mapViewModel: PrivacyExampleViewModel","    private var pannedToUserLocation = false","","    init(mapViewModel: PrivacyExampleViewModel) {","        self.mapViewModel = mapViewModel","        super.init()","    }","","    @MainActor func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {","        guard let accuracySetting = manager.accuracyAuthorization else {","            return","        }","","        switch accuracySetting() {","        case .fullAccuracy:","            mapViewModel.locationAccuracy = .fullAccuracy","        case .reducedAccuracy:","            mapViewModel.locationAccuracy = .reducedAccuracy","        @unknown default:","            mapViewModel.locationAccuracy = .unknown","        }","    }","","    \/\/ when a location is available for the first time, we fly to it","    func mapView(_ mapView: MLNMapView, didUpdate _: MLNUserLocation?) {","        guard !pannedToUserLocation else { return }","        guard let userLocation = mapView.userLocation else {","            print(\"User location is currently not available.\")","            return","        }","        mapView.fly(to: MLNMapCamera(lookingAtCenter: userLocation.coordinate, altitude: 100_000, pitch: 0, heading: 0))","        pannedToUserLocation = true","    }","}","","struct PrivacyExampleRepresentable: UIViewRepresentable {","    @ObservedObject var mapViewModel: PrivacyExampleViewModel","","    func makeCoordinator() -> PrivacyExampleCoordinator {","        PrivacyExampleCoordinator(mapViewModel: mapViewModel)","    }","","    func makeUIView(context: Context) -> MLNMapView {","        let mapView = MLNMapView()","","        mapView.delegate = context.coordinator","        mapView.showsUserLocation = true","        return mapView","    }","","    func updateUIView(_ mapView: MLNMapView, context _: Context) {","        if mapViewModel.showTemporaryLocationAuthorization {","            let purposeKey = \"MLNAccuracyAuthorizationDescription\"","            mapView.locationManager.requestTemporaryFullAccuracyAuthorization?(withPurposeKey: purposeKey)","            DispatchQueue.main.async {","                mapViewModel.showTemporaryLocationAuthorization = false","            }","        }","    }","}","","struct LocationPrivacyExampleView: View {","    @StateObject private var viewModel = PrivacyExampleViewModel()","","    var body: some View {","        VStack {","            PrivacyExampleRepresentable(mapViewModel: viewModel)","                .edgesIgnoringSafeArea(.all)","","            if viewModel.locationAccuracy == LocationAccuracyState.reducedAccuracy {","                Button(\"Request Precise Location\") {","                    viewModel.showTemporaryLocationAuthorization.toggle()","                }","                .padding()","                .background(Color.blue)","                .foregroundColor(.white)","                .cornerRadius(8)","            }","        }","    }","}"],"syntax":"swift"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre-native-for-ios\/locationprivacyexample"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"title":"Features","identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/StaticSnapshotExample"],"generated":true}],"identifier":{"interfaceLanguage":"occ","url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/LocationPrivacyExample"},"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"kind":"article","references":{"PreciseLocationRequestPopup.png":{"type":"image","alt":null,"identifier":"PreciseLocationRequestPopup.png","variants":[{"url":"\/images\/PreciseLocationRequestPopup@2x.png","traits":["2x","light"]}]},"ImpreciseLocation.png":{"type":"image","variants":[{"url":"\/images\/ImpreciseLocation@2x.png","traits":["2x","light"]}],"alt":null,"identifier":"ImpreciseLocation.png"},"doc://org.swift.MyProject/documentation/MapLibre":{"abstract":[{"text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling.","type":"text"}],"title":"MapLibre","kind":"symbol","type":"topic","role":"collection","url":"\/documentation\/maplibre","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre"},"doc://org.swift.MyProject/documentation/MapLibre/MLNMapSnapshotter":{"url":"\/documentation\/maplibre\/mlnmapsnapshotter","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapSnapshotter","title":"MLNMapSnapshotter","type":"topic","kind":"symbol","fragments":[{"text":"MLNMapSnapshotter","kind":"identifier"}],"abstract":[{"text":"An ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapSnapshotter","isActive":true},{"type":"text","text":" generates static raster images of the map. Each snapshot"},{"type":"text","text":" "},{"type":"text","text":"image depicts a portion of a map defined by an "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapSnapshotOptions","isActive":true},{"type":"text","text":" object"},{"text":" ","type":"text"},{"text":"you provide. The snapshotter generates an ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapSnapshot","isActive":true},{"text":" object","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"asynchronously, calling "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapSnapshotterDelegate","type":"reference"},{"type":"text","text":" methods if defined, then"},{"text":" ","type":"text"},{"type":"text","text":"passing it into a completion handler once tiles and other resources needed for"},{"text":" ","type":"text"},{"type":"text","text":"the snapshot are finished loading."}],"role":"symbol"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/StaticSnapshotExample":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/StaticSnapshotExample","role":"article","kind":"article","abstract":[{"type":"text","text":"Use "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapSnapshotter","type":"reference"},{"text":" to create snapshots of the map.","type":"text"}],"type":"topic","title":"Making Snapshots","url":"\/documentation\/maplibre-native-for-ios\/staticsnapshotexample"},"doc://org.swift.MyProject/documentation/MapLibre/MLNMapView":{"title":"MLNMapView","type":"topic","kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView","fragments":[{"text":"MLNMapView","kind":"identifier"}],"role":"symbol","url":"\/documentation\/maplibre\/mlnmapview","abstract":[{"text":"An interactive, customizable map view with an interface similar to the one","type":"text"},{"type":"text","text":" "},{"text":"provided by Appleâ€™s MapKit.","type":"text"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNMapViewDelegate":{"title":"MLNMapViewDelegate","type":"topic","kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapViewDelegate","fragments":[{"text":"MLNMapViewDelegate","kind":"identifier"}],"role":"symbol","url":"\/documentation\/maplibre\/mlnmapviewdelegate","abstract":[{"text":"The ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapViewDelegate"},{"text":" protocol defines a set of optional methods that you","type":"text"},{"text":" ","type":"text"},{"text":"can use to receive map-related update messages. Because many map operations","type":"text"},{"text":" ","type":"text"},{"text":"require the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView"},{"type":"text","text":" class to load data asynchronously, the map view calls"},{"text":" ","type":"text"},{"type":"text","text":"these methods to notify your application when specific operations complete. The"},{"type":"text","text":" "},{"type":"text","text":"map view also uses these methods to request information about annotations"},{"type":"text","text":" "},{"type":"text","text":"displayed on the map, such as the styles and interaction modes to apply to"},{"type":"text","text":" "},{"text":"individual annotations.","type":"text"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNLocationManager":{"title":"MLNLocationManager","kind":"symbol","role":"symbol","url":"\/documentation\/maplibre\/mlnlocationmanager","abstract":[{"text":"The ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLocationManager","isActive":true},{"text":" protocol defines a set of methods that a class must","type":"text"},{"type":"text","text":" "},{"type":"text","text":"implement in order to serve as the location manager of an "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView","isActive":true,"type":"reference"},{"text":". A location","type":"text"},{"text":" ","type":"text"},{"text":"manager is responsible for notifying the map view about location-related events,","type":"text"},{"text":" ","type":"text"},{"text":"such as a change in the userâ€™s location. This protocol is similar to the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Core Location frameworkâ€™s "},{"type":"codeVoice","code":"CLLocationManager"},{"type":"text","text":" class, but your implementation"},{"text":" ","type":"text"},{"type":"text","text":"does not need to be based on "},{"code":"CLLocationManager","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","fragments":[{"text":"MLNLocationManager","kind":"identifier"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLocationManager"}}}