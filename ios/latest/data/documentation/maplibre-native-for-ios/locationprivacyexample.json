{"variants":[{"paths":["\/documentation\/maplibre-native-for-ios\/locationprivacyexample"],"traits":[{"interfaceLanguage":"occ"}]}],"sections":[],"kind":"article","schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"Requesting precise location with ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLocationManager","isActive":true,"type":"reference"},{"text":".","type":"text"}],"primaryContentSections":[{"content":[{"content":[{"type":"paragraph","inlineContent":[{"text":"This example uses SwiftUI.","type":"text"}]}],"type":"aside","style":"note","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example shows how to request a precise location with "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLocationManager","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Let’s prepare your ","type":"text"},{"code":"Info.plist","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"First, provide a description why your app needs to access location:","type":"text"}]},{"code":["<key>NSLocationWhenInUseUsageDescription<\/key>","<string>Dummy Location When In Use Description<\/string>"],"syntax":"plist","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Second, add a description why your app needs precise location:","type":"text"}]},{"code":["<key>NSLocationTemporaryUsageDescriptionDictionary<\/key>","<dict>","  <key>MLNAccuracyAuthorizationDescription<\/key>","  <string>Dummy Precise Location Description<\/string>","<\/dict>"],"syntax":"plist","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Third and finally, specify your app only needs reduced location access by default (until you request precise accuracy in the example):","type":"text"}]},{"code":["<key>NSLocationDefaultAccuracyReduced<\/key>","<true\/>"],"syntax":"plist","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Coordinator","type":"codeVoice"},{"type":"text","text":" defined below is also the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapViewDelegate"},{"type":"text","text":". When the location manager authorization changes it will call the relevant method. If precise location has not been granted, a button is shown at the bottom of the map."}]},{"type":"paragraph","inlineContent":[{"identifier":"ImpreciseLocation.png","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"When the button is pressed a pop-up with the description we set in ","type":"text"},{"code":"Info.plist","type":"codeVoice"},{"text":" will be shown:","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"PreciseLocationRequestPopup.png","type":"image"}]},{"code":["enum LocationAccuracyState {","    case unknown","    case reducedAccuracy","    case fullAccuracy","}","","@MainActor","class PrivacyExampleViewModel: NSObject, ObservableObject {","    @Published var locationAccuracy: LocationAccuracyState = .unknown","    @Published var showTemporaryLocationAuthorization = false","}","","class PrivacyExampleCoordinator: NSObject, MLNMapViewDelegate {","    @ObservedObject private var mapViewModel: PrivacyExampleViewModel","    private var pannedToUserLocation = false","","    init(mapViewModel: PrivacyExampleViewModel) {","        self.mapViewModel = mapViewModel","        super.init()","    }","","    @MainActor func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {","        guard let accuracySetting = manager.accuracyAuthorization else {","            return","        }","","        switch accuracySetting() {","        case .fullAccuracy:","            mapViewModel.locationAccuracy = .fullAccuracy","        case .reducedAccuracy:","            mapViewModel.locationAccuracy = .reducedAccuracy","        @unknown default:","            mapViewModel.locationAccuracy = .unknown","        }","    }","","    \/\/ when a location is available for the first time, we fly to it","    func mapView(_ mapView: MLNMapView, didUpdate _: MLNUserLocation?) {","        guard !pannedToUserLocation else { return }","        guard let userLocation = mapView.userLocation else {","            print(\"User location is currently not available.\")","            return","        }","        mapView.fly(to: MLNMapCamera(lookingAtCenter: userLocation.coordinate, altitude: 100_000, pitch: 0, heading: 0))","        pannedToUserLocation = true","    }","}","","struct PrivacyExampleRepresentable: UIViewRepresentable {","    @ObservedObject var mapViewModel: PrivacyExampleViewModel","","    func makeCoordinator() -> PrivacyExampleCoordinator {","        PrivacyExampleCoordinator(mapViewModel: mapViewModel)","    }","","    func makeUIView(context: Context) -> MLNMapView {","        let mapView = MLNMapView()","","        mapView.delegate = context.coordinator","        mapView.showsUserLocation = true","        return mapView","    }","","    func updateUIView(_ mapView: MLNMapView, context _: Context) {","        if mapViewModel.showTemporaryLocationAuthorization {","            let purposeKey = \"MLNAccuracyAuthorizationDescription\"","            mapView.locationManager.requestTemporaryFullAccuracyAuthorization?(withPurposeKey: purposeKey)","            DispatchQueue.main.async {","                mapViewModel.showTemporaryLocationAuthorization = false","            }","        }","    }","}","","struct LocationPrivacyExampleView: View {","    @StateObject private var viewModel = PrivacyExampleViewModel()","","    var body: some View {","        VStack {","            PrivacyExampleRepresentable(mapViewModel: viewModel)","                .edgesIgnoringSafeArea(.all)","","            if viewModel.locationAccuracy == LocationAccuracyState.reducedAccuracy {","                Button(\"Request Precise Location\") {","                    viewModel.showTemporaryLocationAuthorization.toggle()","                }","                .padding()","                .background(Color.blue)","                .foregroundColor(.white)","                .cornerRadius(8)","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"seeAlsoSections":[{"identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/StaticSnapshotExample"],"title":"Features","generated":true,"anchor":"Features"}],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"metadata":{"title":"User Location & Location Privacy","modules":[{"name":"MapLibre"}],"role":"article","roleHeading":"Article"},"identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/LocationPrivacyExample","interfaceLanguage":"occ"},"references":{"ImpreciseLocation.png":{"type":"image","identifier":"ImpreciseLocation.png","alt":null,"variants":[{"url":"\/images\/org.swift.MyProject\/ImpreciseLocation@2x.png","traits":["2x","light"]}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNMapViewDelegate":{"kind":"symbol","abstract":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapViewDelegate","isActive":true,"type":"reference"},{"text":" protocol defines a set of optional methods that you","type":"text"},{"text":" ","type":"text"},{"text":"can use to receive map-related update messages. Because many map operations","type":"text"},{"text":" ","type":"text"},{"text":"require the ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView","isActive":true,"type":"reference"},{"text":" class to load data asynchronously, the map view calls","type":"text"},{"text":" ","type":"text"},{"text":"these methods to notify your application when specific operations complete. The","type":"text"},{"type":"text","text":" "},{"type":"text","text":"map view also uses these methods to request information about annotations"},{"type":"text","text":" "},{"type":"text","text":"displayed on the map, such as the styles and interaction modes to apply to"},{"type":"text","text":" "},{"type":"text","text":"individual annotations."}],"role":"symbol","fragments":[{"text":"MLNMapViewDelegate","kind":"identifier"}],"title":"MLNMapViewDelegate","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapViewDelegate","type":"topic","url":"\/documentation\/maplibre\/mlnmapviewdelegate"},"doc://org.swift.MyProject/documentation/MapLibre/MLNMapView":{"title":"MLNMapView","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView","fragments":[{"text":"MLNMapView","kind":"identifier"}],"abstract":[{"type":"text","text":"An interactive, customizable map view with an interface similar to the one"},{"type":"text","text":" "},{"type":"text","text":"provided by Apple’s MapKit."}],"url":"\/documentation\/maplibre\/mlnmapview","role":"symbol","kind":"symbol"},"doc://org.swift.MyProject/documentation/MapLibre":{"type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","role":"collection","abstract":[{"text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling.","type":"text"}],"title":"MapLibre","kind":"symbol","url":"\/documentation\/maplibre"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLocationManager":{"title":"MLNLocationManager","fragments":[{"kind":"identifier","text":"MLNLocationManager"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLocationManager","kind":"symbol","type":"topic","url":"\/documentation\/maplibre\/mlnlocationmanager","abstract":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLocationManager"},{"type":"text","text":" protocol defines a set of methods that a class must"},{"type":"text","text":" "},{"type":"text","text":"implement in order to serve as the location manager of an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView"},{"type":"text","text":". A location"},{"type":"text","text":" "},{"type":"text","text":"manager is responsible for notifying the map view about location-related events,"},{"type":"text","text":" "},{"type":"text","text":"such as a change in the user’s location. This protocol is similar to the"},{"type":"text","text":" "},{"type":"text","text":"Core Location framework’s "},{"code":"CLLocationManager","type":"codeVoice"},{"type":"text","text":" class, but your implementation"},{"type":"text","text":" "},{"type":"text","text":"does not need to be based on "},{"code":"CLLocationManager","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/StaticSnapshotExample":{"title":"Making Snapshots","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/StaticSnapshotExample","abstract":[{"type":"text","text":"Use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapSnapshotter"},{"type":"text","text":" to create snapshots of the map."}],"role":"article","type":"topic","kind":"article","url":"\/documentation\/maplibre-native-for-ios\/staticsnapshotexample"},"PreciseLocationRequestPopup.png":{"type":"image","identifier":"PreciseLocationRequestPopup.png","alt":null,"variants":[{"url":"\/images\/org.swift.MyProject\/PreciseLocationRequestPopup@2x.png","traits":["2x","light"]}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNMapSnapshotter":{"abstract":[{"text":"An ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapSnapshotter","isActive":true,"type":"reference"},{"text":" generates static raster images of the map. Each snapshot","type":"text"},{"text":" ","type":"text"},{"text":"image depicts a portion of a map defined by an ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapSnapshotOptions","isActive":true,"type":"reference"},{"text":" object","type":"text"},{"text":" ","type":"text"},{"text":"you provide. The snapshotter generates an ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapSnapshot","isActive":true,"type":"reference"},{"text":" object","type":"text"},{"text":" ","type":"text"},{"text":"asynchronously, calling ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapSnapshotterDelegate","isActive":true,"type":"reference"},{"text":" methods if defined, then","type":"text"},{"text":" ","type":"text"},{"text":"passing it into a completion handler once tiles and other resources needed for","type":"text"},{"text":" ","type":"text"},{"text":"the snapshot are finished loading.","type":"text"}],"url":"\/documentation\/maplibre\/mlnmapsnapshotter","kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapSnapshotter","title":"MLNMapSnapshotter","role":"symbol","fragments":[{"kind":"identifier","text":"MLNMapSnapshotter"}],"type":"topic"}}}