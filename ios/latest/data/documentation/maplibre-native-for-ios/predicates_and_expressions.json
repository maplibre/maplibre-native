{"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"],"generated":true,"title":"Other Articles"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"],"traits":[{"interfaceLanguage":"occ"}]}],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"abstract":[{"type":"text","text":"Using "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":" with MapLibre iOS"}],"identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions","interfaceLanguage":"occ"},"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Style layers use predicates and expressions to determine what to display and how"},{"type":"text","text":" "},{"type":"text","text":"to format it. "},{"inlineContent":[{"text":"Predicates","type":"text"}],"type":"emphasis"},{"text":" are represented by the same ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"text":" class that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"filters results from Core Data or items in an "},{"type":"codeVoice","code":"NSArray"},{"text":" in Objective-C.","type":"text"},{"type":"text","text":" "},{"text":"Predicates are based on ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"expressions","type":"text"}]},{"text":", represented by the ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" class.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Somewhat unusually, style layers also use expressions on their own."}]},{"type":"paragraph","inlineContent":[{"text":"This document discusses the specific subset of the predicate and expression","type":"text"},{"type":"text","text":" "},{"text":"syntax supported by this SDK. For a more general introduction to predicates and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expressions, consult the"},{"type":"text","text":" "},{"inlineContent":[{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","isActive":true,"type":"reference"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"in Apple developer documentation. For additional detail on how this SDK has","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"extended the "},{"code":"NSExpression","type":"codeVoice"},{"text":" class, see the ","type":"text"},{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","type":"reference","isActive":true},{"type":"text","text":" header."}]},{"level":2,"anchor":"Using-predicates-to-filter-vector-data","type":"heading","text":"Using predicates to filter vector data"},{"type":"paragraph","inlineContent":[{"text":"Most style layer classes display ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"text":" objects that you can show or hide","type":"text"},{"type":"text","text":" "},{"type":"text","text":"based on the feature’s attributes. Use the "},{"type":"codeVoice","code":"MLNVectorStyleLayer.predicate"},{"type":"text","text":" "},{"type":"text","text":"property to include only the features in the source layer that satisfy a"},{"text":" ","type":"text"},{"text":"condition that you define.","type":"text"}]},{"text":"Operators","level":3,"anchor":"Operators","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following comparison operators are supported:"}]},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key = value"},{"type":"codeVoice","code":"key == value"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSGreaterThanOrEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key >= value"},{"type":"codeVoice","code":"key => value"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSLessThanOrEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"key <= value","type":"codeVoice"},{"type":"codeVoice","code":"key =< value"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSGreaterThanPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"key > value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSLessThanPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"key < value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNotEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key != value"},{"code":"key <> value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSBetweenPredicateOperatorType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"key BETWEEN { 32, 212 }"}],"type":"paragraph"}]]]},{"inlineContent":[{"type":"text","text":"To test whether a feature has or lacks a specific attribute, compare the"},{"type":"text","text":" "},{"type":"text","text":"attribute to "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":". Predicates created using the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSPredicate predicateWithValue:]"},{"type":"text","text":" method are also supported. String"},{"type":"text","text":" "},{"type":"text","text":"operators and custom operators are not supported."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following compound operators are supported:"}]},{"rows":[[[{"inlineContent":[{"code":"NSCompoundPredicateType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAndPredicateType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"predicate1 AND predicate2"},{"code":"predicate1 && predicate2","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSOrPredicateType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"predicate1 OR predicate2","type":"codeVoice"},{"text":"predicate1 || predicate2","type":"text"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNotPredicateType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NOT predicate"},{"type":"codeVoice","code":"!predicate"}],"type":"paragraph"}]]],"type":"table","header":"row"},{"inlineContent":[{"text":"The following aggregate operators are supported:","type":"text"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSInPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSContainsPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key"}]}]]],"type":"table","header":"row"},{"inlineContent":[{"text":"You can use the ","type":"text"},{"type":"codeVoice","code":"IN"},{"type":"text","text":" and "},{"code":"CONTAINS","type":"codeVoice"},{"type":"text","text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature ("},{"type":"codeVoice","code":"SELF"},{"type":"text","text":") lies within a given "},{"code":"MLNShape","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"MLNFeature"},{"type":"text","text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:"}],"type":"paragraph"},{"syntax":"objc","type":"codeListing","code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"]},{"code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The following combinations of comparison operators and modifiers are supported:","type":"text"}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateModifier"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAllPredicateModifier"}]}],[{"inlineContent":[{"code":"NSNotEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ALL haystack != needle"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSAnyPredicateModifier","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"code":"ANY haystack = needle","type":"codeVoice"},{"code":"SOME haystack = needle","type":"codeVoice"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"text":"The following comparison predicate options are supported for comparison and","type":"text"},{"type":"text","text":" "},{"text":"aggregate operators that are used in the predicate:","type":"text"}]},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSComparisonPredicateOptions","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSCaseInsensitivePredicateOption"}]}],[{"type":"paragraph","inlineContent":[{"code":"'QUEBEC' =[c] 'Quebec'","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSDiacriticInsensitivePredicateOption"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"'Québec' =[d] 'Quebec'"}],"type":"paragraph"}]]],"type":"table"},{"inlineContent":[{"type":"text","text":"Other comparison predicate options are unsupported, namely "},{"type":"codeVoice","code":"l"},{"text":" ","type":"text"},{"text":"(for locale sensitivity) and ","type":"text"},{"type":"codeVoice","code":"n"},{"type":"text","text":" (for normalization). A comparison is"},{"text":" ","type":"text"},{"type":"text","text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison"},{"text":" ","type":"text"},{"text":"predicate options are not supported in conjunction with comparison modifiers","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"like "},{"type":"codeVoice","code":"ALL"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"ANY"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Operands","text":"Operands","type":"heading","level":3},{"inlineContent":[{"text":"Operands in predicates can be ","type":"text"},{"isActive":true,"type":"reference","identifier":"#variables"},{"type":"text","text":", "},{"type":"reference","identifier":"#key-paths","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or almost anything else that can appear"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"#using-expressions-to-configure-layout-and-paint-attributes"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Automatic type casting is not performed. Therefore, a feature only matches a","type":"text"},{"type":"text","text":" "},{"text":"predicate if its value for the attribute in question is of the same type as the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value specified in the predicate. Use the "},{"code":"CAST()","type":"codeVoice"},{"text":" operator to convert a key","type":"text"},{"text":" ","type":"text"},{"text":"path or variable into a matching type:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast a value to a number, use ","type":"text"},{"code":"CAST(key, 'NSNumber')","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast a value to a string, use "},{"type":"codeVoice","code":"CAST(key, 'NSString')"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"To cast a value to a color, use "},{"type":"codeVoice","code":"CAST(key, 'UIColor')"},{"type":"text","text":" on iOS and "},{"code":"CAST(key, 'NSColor')","type":"codeVoice"},{"text":" on macOS.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast an "},{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"UIColor"},{"text":" object to an array, use ","type":"text"},{"code":"CAST(noindex(color), 'NSArray')","type":"codeVoice"},{"text":".","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"For details about the predicate format string syntax, consult the “Predicate","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Format String Syntax” chapter of the"},{"text":" ","type":"text"},{"inlineContent":[{"isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"reference","overridingTitle":"Predicate Programming Guide","overridingTitleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}]}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"in Apple developer documentation.","type":"text"}]},{"text":"Using expressions to configure layout and paint attributes","type":"heading","anchor":"Using-expressions-to-configure-layout-and-paint-attributes","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"An expression can contain subexpressions of various types. Each of the supported"},{"type":"text","text":" "},{"type":"text","text":"types of expressions is discussed below."}]},{"text":"Constant values","level":3,"type":"heading","anchor":"Constant-values"},{"inlineContent":[{"text":"A constant value can be of any of the following types:","type":"text"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Objective-C"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"text":" (iOS)","type":"text"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSColor"},{"text":" (macOS)","type":"text"},{"type":"codeVoice","code":"UIColor"},{"text":" (iOS)","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSString"}],"type":"paragraph"}],[{"inlineContent":[{"code":"String","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSString","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"String","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}]}],[{"inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}]],[[{"inlineContent":[{"code":"NSArray<NSNumber>","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"[Float]","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSArray<NSString>"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"[String]"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSValue.CGVectorValue","type":"codeVoice"},{"type":"text","text":" (iOS)"},{"code":"NSValue","type":"codeVoice"},{"text":" containing ","type":"text"},{"code":"CGVector","type":"codeVoice"},{"text":" (macOS)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.cgVectorValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue"},{"text":" containing ","type":"text"},{"code":"CGVector","type":"codeVoice"},{"text":" (macOS)","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSValue.UIEdgeInsetsValue","type":"codeVoice"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"type":"text","text":" (macOS)"}]}],[{"inlineContent":[{"code":"NSValue.uiEdgeInsetsValue","type":"codeVoice"},{"type":"text","text":" (iOS)"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"text":" (macOS)","type":"text"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"text":"For literal floating-point values, use ","type":"text"},{"type":"codeVoice","code":"-[NSNumber numberWithDouble:]"},{"type":"text","text":" instead"},{"text":" ","type":"text"},{"type":"text","text":"of "},{"type":"codeVoice","code":"-[NSNumber numberWithFloat:]"},{"type":"text","text":" to avoid precision issues."}]},{"text":"Key paths","anchor":"Key-paths","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A key path expression refers to an attribute of the "},{"code":"MLNFeature","type":"codeVoice"},{"type":"text","text":" object being"},{"type":"text","text":" "},{"text":"evaluated for display. For example, if a polygon’s ","type":"text"},{"type":"codeVoice","code":"MLNFeature.attributes"},{"type":"text","text":" "},{"type":"text","text":"dictionary contains the "},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" key, then the key path "},{"type":"codeVoice","code":"floorCount"},{"text":" refers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the value of the "},{"code":"floorCount","type":"codeVoice"},{"type":"text","text":" attribute when evaluating that particular"},{"type":"text","text":" "},{"type":"text","text":"polygon."}]},{"inlineContent":[{"text":"The following special attributes are also available on features that are produced","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as a result of clustering multiple point features together in a shape source:"}],"type":"paragraph"},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attribute"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type"}]}],[{"type":"paragraph","inlineContent":[{"text":"Meaning","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"cluster"}]}],[{"inlineContent":[{"type":"text","text":"Bool"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"cluster_id"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"inlineContent":[{"text":"Identifier for the point cluster.","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"point_count","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"type":"paragraph","inlineContent":[{"text":"The number of point features in a given cluster.","type":"text"}]}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"text":"Some characters may not be used directly as part of a key path in a format","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string. For example, if a feature’s attribute is named "},{"type":"codeVoice","code":"ISO 3166-1:2006"},{"type":"text","text":", an"},{"type":"text","text":" "},{"type":"text","text":"expression format string of "},{"code":"lowercase(ISO 3166-1:2006)","type":"codeVoice"},{"type":"text","text":" or a predicate format"},{"type":"text","text":" "},{"type":"text","text":"string of "},{"type":"codeVoice","code":"ISO 3166-1:2006 == 'US-OH'"},{"text":" would raise an exception. Instead, use a","type":"text"},{"type":"text","text":" "},{"code":"%K","type":"codeVoice"},{"text":" placeholder or the ","type":"text"},{"code":"+[NSExpression expressionForKeyPath:]","type":"codeVoice"},{"type":"text","text":" initializer:"}]},{"syntax":"objc","code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"],"type":"codeListing"},{"syntax":"swift","type":"codeListing","code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"]},{"text":"Functions","anchor":"Functions","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of the"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"by the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the following subset is supported in layer attribute values:"}]},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializer parameter"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"average:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"average({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"sum:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sum({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"count:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"count({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"min:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"min({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"max:"}]}],[{"type":"paragraph","inlineContent":[{"code":"max({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"add:to:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 + 2"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"from:subtract:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"2 - 1"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"multiply:by:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"1 * 2"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"divide:by:"}]}],[{"type":"paragraph","inlineContent":[{"code":"1 \/ 2","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"modulus:by:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:(1, 2)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"sqrt:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"sqrt(2)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"log:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"log(10)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"ln:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ln(2)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"raise:toPower:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"2 ** 2"}]}]],[[{"inlineContent":[{"code":"exp:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"exp(0)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ceiling:"}]}],[{"type":"paragraph","inlineContent":[{"code":"ceiling(0.99999)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"abs:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"abs(-1)","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"trunc:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"trunc(6378.1370)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"floor:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"floor(-0.99999)"}]}]],[[{"inlineContent":[{"code":"uppercase:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"uppercase('Elysian Fields')","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lowercase:"}]}],[{"type":"paragraph","inlineContent":[{"code":"lowercase('DOWNTOWN')","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"noindex:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"noindex(0 + 2 + c)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"length:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"length('Wapakoneta')"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"castObject:toType:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CAST(ele, 'NSString')"},{"type":"codeVoice","code":"CAST(ele, 'NSNumber')"}]}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A number of "},{"isActive":true,"type":"reference","identifier":"#MapLibre-specific-functions"},{"type":"text","text":" are also"},{"text":" ","type":"text"},{"type":"text","text":"available."}]},{"type":"paragraph","inlineContent":[{"text":"The following predefined functions are ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"strong"},{"text":" supported:","type":"text"}]},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"Initializer parameter"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"median:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"median({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"inlineContent":[{"code":"mode:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"mode({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"stddev:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"stddev({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"random"}]}],[{"inlineContent":[{"code":"random()","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"randomn:"}]}],[{"type":"paragraph","inlineContent":[{"code":"randomn(10)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"now"}]}],[{"type":"paragraph","inlineContent":[{"code":"now()","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"bitwiseAnd:with:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:(5, 3)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:(5, 3)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:"}]}],[{"inlineContent":[{"code":"bitwiseXor:with:(5, 3)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"leftshift:by:"}]}],[{"inlineContent":[{"code":"leftshift:by:(23, 1)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"rightshift:by:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"rightshift:by:(23, 1)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"onesComplement:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"onesComplement(255)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:(there, here)"}],"type":"paragraph"}]]]},{"text":"Conditionals","anchor":"Conditionals","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conditionals are supported via the built-in"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]","type":"codeVoice"},{"type":"text","text":" "},{"text":"method and ","type":"text"},{"type":"codeVoice","code":"TERNARY()"},{"type":"text","text":" operator. If you need to express multiple cases"},{"text":" ","type":"text"},{"text":"(“else-if”), you can either nest a conditional within a conditional or use the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_if-code","isActive":true},{"text":" or ","type":"text"},{"isActive":true,"type":"reference","identifier":"#code-mgl_match-code"},{"type":"text","text":" function."}]},{"type":"heading","level":3,"text":"Aggregates","anchor":"Aggregates"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Aggregate expressions can contain arrays of expressions. In some cases, it is"},{"text":" ","type":"text"},{"type":"text","text":"possible to use the array itself instead of wrapping the array in an aggregate"},{"text":" ","type":"text"},{"text":"expression.","type":"text"}]},{"level":3,"text":"Variables","type":"heading","anchor":"Variables"},{"inlineContent":[{"text":"The following variables are defined by this SDK for use with style layers:","type":"text"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Variable"}]}],[{"type":"paragraph","inlineContent":[{"text":"Type","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Meaning","type":"text"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"$featureIdentifier"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Any GeoJSON data type","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.featureIdentifierVariableExpression"},{"text":" property.","type":"text"}]}]],[[{"inlineContent":[{"code":"$geometryType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"String"}]}],[{"inlineContent":[{"text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:","type":"text"},{"text":"*   ","type":"text"},{"code":"Point","type":"codeVoice"},{"type":"text","text":" for point features, corresponding to the "},{"code":"MLNPointAnnotation","type":"codeVoice"},{"type":"text","text":" class"},{"text":"*   ","type":"text"},{"code":"LineString","type":"codeVoice"},{"type":"text","text":" for polyline features, corresponding to the "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true,"type":"reference"},{"type":"text","text":" class"},{"text":"*   ","type":"text"},{"code":"Polygon","type":"codeVoice"},{"text":" for polygon features, corresponding to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon"},{"type":"text","text":" class"},{"text":"This variable corresponds to the ","type":"text"},{"code":"NSExpression.geometryTypeVariableExpression","type":"codeVoice"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"$heatmapDensity","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","isActive":true,"type":"reference"},{"type":"text","text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the "},{"type":"codeVoice","code":"heatmapColor"},{"text":" property. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.heatmapDensityVariableExpression"},{"type":"text","text":" property."}]}]],[[{"inlineContent":[{"code":"$zoomLevel","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.zoomLevelVariableExpression"},{"type":"text","text":" property."}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"$lineProgress"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","isActive":true},{"type":"text","text":" property. It corresponds to the "},{"code":"NSExpression.lineProgressVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}],"type":"paragraph"}]]]},{"inlineContent":[{"text":"In addition to these variables, you can define your own variables and refer to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"them elsewhere in the expression. The syntax for defining a variable makes use"},{"text":" ","type":"text"},{"type":"text","text":"of a "},{"overridingTitleInlineContent":[{"type":"text","text":"MapLibre-specific function"}],"isActive":true,"type":"reference","identifier":"#MapLibre-specific-functions","overridingTitle":"MapLibre-specific function"},{"text":" that takes an","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" as an argument:"}],"type":"paragraph"},{"syntax":"objc","code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"],"type":"codeListing"},{"code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"],"type":"codeListing","syntax":"swift"},{"level":2,"anchor":"MapLibre-specific-functions","type":"heading","text":"MapLibre-specific functions"},{"content":[{"inlineContent":[{"text":"Due to a change in iOS 15.5, some of these stopped working. See ","type":"text"},{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","type":"reference","isActive":true},{"text":" for more information and workarounds.","type":"text"}],"type":"paragraph"}],"name":"Warning","style":"warning","type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For compatibility with the MapLibre Style Spec, the following functions"},{"type":"text","text":" "},{"type":"text","text":"are defined by this SDK. When setting a style layer property, you can call these"},{"type":"text","text":" "},{"type":"text","text":"functions just like the predefined functions above, using either the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"text":" method or a convenient format","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"string syntax:"}]},{"level":3,"anchor":"mgldoeshave","text":"mgl_does:have:","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_does:have:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_does:have:(SELF, '🧀🍔')","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"mgl_does:have:(%@, '🧀🍔')"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns a Boolean value indicating whether the dictionary has a value for the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"key or whether the evaluated object ("},{"type":"codeVoice","code":"SELF"},{"type":"text","text":") has a value for the feature"},{"type":"text","text":" "},{"text":"attribute. Compared to the ","type":"text"},{"identifier":"#code-mgl_has-code","isActive":true,"type":"reference"},{"text":" custom function,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that function’s target is instead passed in as the first argument to this"},{"text":" ","type":"text"},{"type":"text","text":"function. Both functions are equivalent to the syntax "},{"code":"key != NIL","type":"codeVoice"},{"type":"text","text":" or"},{"text":" ","type":"text"},{"type":"codeVoice","code":"%@[key] != NIL"},{"text":" but can be used outside of a predicate.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"mglinterpolatewithCurveTypeparametersstops","text":"mgl_interpolate:withCurveType:parameters:stops:","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_interpolate:withCurveType:parameters:stops:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Produces continuous, smooth results by interpolating between pairs of input and"},{"text":" ","type":"text"},{"text":"output values (“stops”). Compared to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"custom function, the input expression (that function’s target) is instead passed"},{"text":" ","type":"text"},{"text":"in as the first argument to this function.","type":"text"}]},{"text":"mgl_step:from:stops:","level":3,"type":"heading","anchor":"mglstepfromstops"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_step:from:stops:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_step:from:stops:(x, 11, %@)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Produces discrete, stepped results by evaluating a piecewise-constant function"},{"text":" ","type":"text"},{"type":"text","text":"defined by pairs of input and output values (“stops”). Compared to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-mgl_stepwithminimum-stops-code","isActive":true},{"text":" custom","type":"text"},{"type":"text","text":" "},{"text":"function, the input expression (that function’s target) is instead passed in as","type":"text"},{"text":" ","type":"text"},{"text":"the first argument to this function.","type":"text"}]},{"level":3,"type":"heading","text":"mgl_join:","anchor":"mgljoin"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_join:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_join({'Old', 'MacDonald'})","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of concatenating together all the elements of an array in"},{"type":"text","text":" "},{"text":"order. Compared to the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-stringbyappendingstring-code","isActive":true,"type":"reference"},{"type":"text","text":" custom"},{"text":" ","type":"text"},{"text":"function, this function takes only one argument, which is an aggregate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression containing the strings to concatenate."}]},{"level":3,"type":"heading","anchor":"mglacos","text":"mgl_acos:"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_acos:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_acos(1)"}]},{"inlineContent":[{"type":"text","text":"Returns the arccosine of the number."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"type":"heading","text":"mgl_asin:","level":3,"anchor":"mglasin"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_asin:","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_asin(0)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the arcsine of the number."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"mgl_atan:","anchor":"mglatan"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_atan:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_atan(20)"}]},{"inlineContent":[{"text":"Returns the arctangent of the number.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"anchor":"mglcos","text":"mgl_cos:","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_cos:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_cos(0)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the cosine of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"text":"mgl_log2:","anchor":"mgllog2","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_log2:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_log2(1024)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the base-2 logarithm of the number."}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_round:","level":3,"anchor":"mglround","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_round:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"mgl_round(1.5)","type":"codeVoice"}]},{"inlineContent":[{"type":"text","text":"Returns the number rounded to the nearest integer. If the number is halfway"},{"type":"text","text":" "},{"text":"between two integers, this function rounds it away from zero.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","text":"mgl_sin:","anchor":"mglsin","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_sin:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin(0)"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the sine of the number.","type":"text"}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"anchor":"mgltan","level":3,"text":"mgl_tan:","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_tan(0)"}]},{"inlineContent":[{"type":"text","text":"Returns the tangent of the number."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"level":3,"text":"mgl_distanceFrom:","anchor":"mgldistanceFrom","type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_distanceFrom:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_distanceFrom(%@)"},{"text":" with an ","type":"text"},{"type":"codeVoice","code":"MLNShape"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the straight-line distance from the evaluated object to the given shape.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","text":"mgl_coalesce:","level":3,"anchor":"mglcoalesce"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_coalesce:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_coalesce({x, y, z})"}]},{"inlineContent":[{"text":"Returns the first non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" value from an array of expressions.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"type":"heading","text":"mgl_attributed:","anchor":"mglattributed"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_attributed:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_attributed({x, y, z})"}],"type":"paragraph"},{"inlineContent":[{"text":"Concatenates and returns the array of ","type":"text"},{"code":"MLNAttributedExpression","type":"codeVoice"},{"type":"text","text":" objects, for use"},{"text":" ","type":"text"},{"type":"text","text":"with the "},{"code":"MLNSymbolStyleLayer.text","type":"codeVoice"},{"type":"text","text":" property."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNAttributedExpression.attributes"},{"type":"text","text":" valid attributes."}]},{"rows":[[[{"inlineContent":[{"type":"text","text":"Key"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Value Type","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"MLNFontNamesAttribute","type":"codeVoice"}]}],[{"inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" evaluating to an ","type":"text"},{"code":"NSString","type":"codeVoice"},{"text":" array.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"MLNFontScaleAttribute"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" evaluating to an ","type":"text"},{"code":"NSNumber","type":"codeVoice"},{"text":" value.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontColorAttribute"}]}],[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"code":"UIColor","type":"codeVoice"},{"text":" (iOS) or ","type":"text"},{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)."}]}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"anchor":"MLNLET","type":"heading","text":"MLN_LET","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_LET:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" Any number of variable names interspersed with their assigned"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" values, followed by an "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" "},{"text":"that may contain references to those variables.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the result of evaluating an expression with the given variable values.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Compared to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"#code-mgl_expressionwithcontext-code","type":"reference"},{"text":" custom","type":"text"},{"text":" ","type":"text"},{"text":"function, this function takes the variable names and values inline before the","type":"text"},{"type":"text","text":" "},{"text":"expression that contains references to those variables.","type":"text"}]},{"text":"MLN_MATCH","level":3,"type":"heading","anchor":"MLNMATCH"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"MLN_MATCH:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" An input expression, then any number of argument pairs, followed by a default","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression. Each argument pair consists of a constant value followed by an"},{"text":" ","type":"text"},{"type":"text","text":"expression to produce as a result of matching that constant value."},{"text":" ","type":"text"},{"type":"text","text":"If the input value is an aggregate expression, then any of the constant values within"},{"text":" ","type":"text"},{"type":"text","text":"that aggregate expression result in the following argument. This is shorthand for"},{"text":" ","type":"text"},{"text":"specifying an argument pair for each of the constant values within that aggregate","type":"text"},{"type":"text","text":" "},{"text":"expression. It is not possible to match the aggregate expression itself.","type":"text"}]},{"inlineContent":[{"text":"Returns the result of matching the input expression against the given constant","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]"},{"type":"text","text":" "},{"text":"method and the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"MLN_IF","level":3,"anchor":"MLNIF","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"MLN_IF:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" Alternating ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":" conditionals and resulting expressions,"},{"type":"text","text":" "},{"text":"followed by a default expression.","type":"text"}]},{"inlineContent":[{"text":"Returns the first expression that meets the condition; otherwise, the default","type":"text"},{"text":" ","type":"text"},{"text":"value. Unlike","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"type":"text","text":" or"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"TERNARY()","type":"codeVoice"},{"type":"text","text":" syntax, this function can accept multiple “if else” conditions"},{"type":"text","text":" "},{"type":"text","text":"and is supported on iOS 8."},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"type":"text","text":" and macOS 10.10."},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"text":"; however, each conditional","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"passed into this function must be wrapped in a constant expression."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"anchor":"MLNFUNCTION","level":3,"text":"MLN_FUNCTION","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_FUNCTION:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"MLN_FUNCTION('typeof', mystery)","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" Any arguments required by the expression operator."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"An expression exactly as defined by the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","isActive":true},{"type":"text","text":"."}]},{"anchor":"Custom-functions","type":"heading","level":2,"text":"Custom functions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following custom functions are also available with the"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForFunction:selectorName:arguments:]","type":"codeVoice"},{"type":"text","text":" method or the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION()"},{"text":" format string syntax.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some of these functions are defined as methods on their respective target"},{"type":"text","text":" "},{"type":"text","text":"classes, but you should not call them directly outside the context of an"},{"type":"text","text":" "},{"type":"text","text":"expression, because the result may differ from the evaluated expression’s result"},{"text":" ","type":"text"},{"type":"text","text":"or may result in undefined behavior."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The MapLibre Style Spec defines some operators for which no custom"},{"text":" ","type":"text"},{"type":"text","text":"function is available. To use these operators in an "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":", call the"},{"text":" ","type":"text"},{"identifier":"#code-mgl_function-code","isActive":true,"type":"reference"},{"type":"text","text":" function with the same arguments"},{"text":" ","type":"text"},{"type":"text","text":"that the operator expects."}]},{"level":3,"anchor":"boolValue","type":"heading","text":"boolValue"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"boolValue"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION(1, 'boolValue')","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a number or string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" None.","type":"text"}]},{"inlineContent":[{"type":"text","text":"A Boolean representation of the target: "},{"type":"codeVoice","code":"FALSE"},{"text":" when then input is an","type":"text"},{"type":"text","text":" "},{"text":"empty string, 0, ","type":"text"},{"type":"codeVoice","code":"FALSE"},{"text":", ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":", or "},{"code":"NaN","type":"codeVoice"},{"type":"text","text":", otherwise "},{"type":"codeVoice","code":"TRUE"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"mgl_has:","anchor":"mglhas","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_has:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to an ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"or the evaluated object ("},{"type":"codeVoice","code":"SELF"},{"text":").","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to an "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" "},{"type":"text","text":"representing the key to look up in the dictionary or the feature attribute to"},{"type":"text","text":" "},{"type":"text","text":"look up in the evaluated object (see "},{"code":"MLNFeature.attributes","type":"codeVoice"},{"text":").","type":"text"}]},{"type":"paragraph","inlineContent":[{"code":"true","type":"codeVoice"},{"type":"text","text":" if the dictionary has a value for the key or if the evaluated"},{"type":"text","text":" "},{"type":"text","text":"object has a value for the feature attribute."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"identifier":"#code-mgl_does-have-code","isActive":true,"type":"reference"},{"type":"text","text":" function, which is used on its own"},{"text":" ","type":"text"},{"type":"text","text":"without the "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator. You can also check whether an object has an"},{"text":" ","type":"text"},{"text":"attribute by comparing the key path to ","type":"text"},{"code":"NIL","type":"codeVoice"},{"type":"text","text":", for example "},{"code":"cheeseburger != NIL","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"burger.cheese != NIL"}]},{"level":3,"anchor":"mglexpressionWithContext","type":"heading","text":"mgl_expressionWithContext:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_expressionWithContext:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)"},{"text":" with","type":"text"},{"type":"text","text":" "},{"text":"a dictionary containing ","type":"text"},{"code":"ios","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"macos","type":"codeVoice"},{"type":"text","text":" keys"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that may contain references to the variables"},{"type":"text","text":" "},{"text":"defined in the context dictionary.","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" An ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"NSString","type":"codeVoice"},{"type":"text","text":"s as keys and"},{"type":"text","text":" "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s as values. Each key is a variable name and each"},{"text":" ","type":"text"},{"type":"text","text":"value is the variable’s value within the target expression."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The target expression with variable subexpressions replaced with the values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"defined in the context dictionary."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"#code-mgl_let-code"},{"type":"text","text":" function, which is used on its own without the"},{"type":"text","text":" "},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator.","type":"text"}]},{"type":"heading","text":"mgl_interpolateWithCurveType:parameters:stops:","level":3,"anchor":"mglinterpolateWithCurveTypeparametersstops"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)"},{"text":" ","type":"text"},{"type":"text","text":"with a dictionary containing zoom levels or other constant values as keys"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a number and contains a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"variable or key path expression."}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" The first argument is one of the following strings denoting curve types:","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"linear"},{"type":"text","text":", "},{"type":"codeVoice","code":"exponential"},{"type":"text","text":", or "},{"code":"cubic-bezier","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The second argument is an expression providing parameters for the curve:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"If the curve type is ","type":"text"},{"type":"codeVoice","code":"linear"},{"type":"text","text":", the argument is "},{"type":"codeVoice","code":"NIL"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the curve type is "},{"code":"exponential","type":"codeVoice"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"type":"text","text":"expression that evaluates to a number, specifying the base of the"},{"text":" ","type":"text"},{"text":"exponential interpolation.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the curve type is "},{"code":"cubic-bezier","type":"codeVoice"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"type":"text","text":"array or aggregate expression containing four expressions, each"},{"text":" ","type":"text"},{"text":"evaluating to a number. The four numbers are control points for the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"cubic Bézier curve."}]}]}]},{"inlineContent":[{"text":"The third argument is an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" object representing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"text":" ","type":"text"},{"text":"values.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A value interpolated along the continuous mathematical function defined by the","type":"text"},{"type":"text","text":" "},{"text":"arguments, with the target as the input to the function.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The input expression is matched against the keys in the stop dictionary. The","type":"text"},{"type":"text","text":" "},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"text":" ","type":"text"},{"type":"text","text":"values may be constant values or "},{"code":"NSExpression","type":"codeVoice"},{"text":" objects. For example, you can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"type":"text","text":" "},{"text":"yellow, orange, and red as the values.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]","type":"codeVoice"},{"type":"text","text":" "},{"text":"method and the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","isActive":true},{"type":"text","text":" "},{"type":"text","text":"function, which is used on its own without the "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}],"type":"paragraph"},{"level":3,"anchor":"mglnumberWithFallbackValues","type":"heading","text":"mgl_numberWithFallbackValues:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"doubleValue","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"floatValue"},{"text":", or","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"decimalValue"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" Zero or more "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"type":"text","text":" "},{"text":"or string.","type":"text"}]},{"inlineContent":[{"type":"text","text":"A numeric representation of the target:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"If the target is ","type":"text"},{"code":"NIL","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a string, it is converted to a number as specified by the","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"doubleValue","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"floatValue"},{"type":"text","text":", or"},{"text":" ","type":"text"},{"code":"decimalValue","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}]},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"text":" ","type":"text"},{"text":"string.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" ","type":"text"},{"text":"Zero or more ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"type":"text","text":" "},{"text":"or string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A numeric representation of the target:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"code":"NIL","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a string, it is converted to a number as specified by the","type":"text"},{"type":"text","text":" "},{"text":"“","type":"text"},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","isActive":true},{"type":"text","text":"”"},{"text":" ","type":"text"},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If multiple values are provided, each one is evaluated in order until the"},{"text":" ","type":"text"},{"type":"text","text":"first successful conversion is obtained."}]}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"type":"text","text":" "},{"text":"number by passing the value and the string ","type":"text"},{"type":"codeVoice","code":"NSNumber"},{"type":"text","text":" into the "},{"code":"CAST()","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"operator."}]},{"anchor":"mglstepWithMinimumstops","type":"heading","level":3,"text":"mgl_stepWithMinimum:stops:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_stepWithMinimum:stops:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)"},{"text":" with","type":"text"},{"text":" ","type":"text"},{"text":"a dictionary with zoom levels or other constant values as keys","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a number and contains a","type":"text"},{"type":"text","text":" "},{"text":"variable or key path expression.","type":"text"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" "},{"text":"The first argument is an expression that evaluates to a number, specifying","type":"text"},{"type":"text","text":" "},{"text":"the minimum value in case the target is less than any of the stops in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"second argument."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The second argument is an "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" object representing the"},{"text":" ","type":"text"},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The output value of the stop whose key is just less than the evaluated target,"},{"type":"text","text":" "},{"text":"or the minimum value if the target is less than the least of the stops’ keys.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"type":"text","text":" "},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"text":" ","type":"text"},{"type":"text","text":"values may be constant values or "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" objects. For example, you can"},{"type":"text","text":" "},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"yellow, orange, and red as the values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"text":"stringByAppendingString:","type":"heading","anchor":"stringByAppendingString","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"stringByAppendingString:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a string."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" "},{"type":"text","text":"One or more "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The target string with each of the argument strings appended in order.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]"},{"type":"text","text":" "},{"type":"text","text":"method and is similar to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"isActive":true,"identifier":"#code-mgl_join-code","type":"reference"},{"type":"text","text":" function, which concatenates multiple"},{"type":"text","text":" "},{"type":"text","text":"expressions and is used on its own without the "},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"stringValue","text":"stringValue"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"stringValue","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION(ele, 'stringValue')","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"type":"text","text":"string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" "},{"text":"None.","type":"text"}]},{"inlineContent":[{"text":"A string representation of the target:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"type":"text","text":"NIL"},{"type":"text","text":", the result is the empty string."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is a Boolean value, the result is the string "},{"type":"codeVoice","code":"true"},{"type":"text","text":" or "},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a number, it is converted to a string as specified by the"},{"text":" ","type":"text"},{"type":"text","text":"“"},{"type":"reference","isActive":true,"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type"},{"text":"”","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}]}]},{"content":[{"inlineContent":[{"text":"If the target is a color, it is converted to a string of the form","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"rgba(r,g,b,a)"},{"type":"text","text":", where "},{"type":"text","text":"r"},{"text":", ","type":"text"},{"text":"g","type":"text"},{"type":"text","text":", and "},{"type":"text","text":"b"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"text","text":"numerals ranging from 0 to 255 and "},{"text":"a","type":"text"},{"type":"text","text":" ranges from 0 to 1."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Otherwise, the target is converted to a string in the format specified by the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"function of the ECMAScript Language Specification.","type":"text"}]}]}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"type":"text","text":" "},{"text":"string by passing the value and the string ","type":"text"},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" "},{"text":"operator.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"sections":[],"metadata":{"title":"Predicates and expressions","roleHeading":"Article","modules":[{"name":"MapLibre"}],"role":"article"},"references":{"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"type":"link","titleInlineContent":[{"type":"text","text":"functions predefined"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","title":"functions predefined","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"titleInlineContent":[{"text":"kernel density estimation","type":"text"}],"type":"link","url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","title":"kernel density estimation","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"type":"link","titleInlineContent":[{"code":"concat","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","title":"concat","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},"https://tc39.github.io/ecma262/#sec-json.stringify":{"titleInlineContent":[{"code":"JSON.stringify()","type":"codeVoice"}],"type":"link","url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","title":"JSON.stringify()","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify"},"#code-mgl_does-have-code":{"type":"link","titleInlineContent":[{"code":"mgl_does:have:","type":"codeVoice"}],"url":"#code-mgl_does-have-code","title":"mgl_does:have:","identifier":"#code-mgl_does-have-code"},"#code-mgl_stepwithminimum-stops-code":{"titleInlineContent":[{"code":"mgl_stepWithMinimum:stops:","type":"codeVoice"}],"type":"link","url":"#code-mgl_stepwithminimum-stops-code","title":"mgl_stepWithMinimum:stops:","identifier":"#code-mgl_stepwithminimum-stops-code"},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"type":"link","titleInlineContent":[{"type":"text","text":"NumberToString"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","title":"NumberToString","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type"},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"titleInlineContent":[{"code":"format","type":"codeVoice"}],"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","title":"format","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"type":"link","titleInlineContent":[{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"text":" method","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","title":"+[NSExpression expressionForFunction:arguments:] method","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init"},"#code-mgl_function-code":{"titleInlineContent":[{"code":"MLN_FUNCTION()","type":"codeVoice"}],"type":"link","url":"#code-mgl_function-code","title":"MLN_FUNCTION()","identifier":"#code-mgl_function-code"},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"type":"link","titleInlineContent":[{"code":"distance","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","title":"distance","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"titleInlineContent":[{"code":"round","type":"codeVoice"}],"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","title":"round","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"type":"link","titleInlineContent":[{"code":"interpolate","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","title":"interpolate","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"role":"symbol","title":"MLNPolyline","abstract":[{"type":"text","text":"An "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline"},{"type":"text","text":" object represents a shape consisting of two or more vertices,"},{"type":"text","text":" "},{"type":"text","text":"specified as "},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"text":" instances, and the line segments that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"connect them. For example, you could use an polyline to represent a road or the"},{"type":"text","text":" "},{"type":"text","text":"path along which something moves."}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","url":"\/documentation\/maplibre\/mlnpolyline","type":"topic","kind":"symbol","fragments":[{"text":"MLNPolyline","kind":"identifier"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"The color gradient with which the line will be drawn. This property only has an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"effect on lines defined by an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource"},{"type":"text","text":" whose "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"option is set to "},{"type":"codeVoice","code":"YES"},{"text":".","type":"text"}],"title":"lineGradient","url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient","fragments":[{"kind":"identifier","text":"lineGradient"}]},"#using-expressions-to-configure-layout-and-paint-attributes":{"titleInlineContent":[{"type":"text","text":"inside an expression"}],"type":"link","url":"#using-expressions-to-configure-layout-and-paint-attributes","title":"inside an expression","identifier":"#using-expressions-to-configure-layout-and-paint-attributes"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"abstract":[{"type":"text","text":"Learn how to work with gesture recognizers"}],"kind":"article","role":"article","url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers","type":"topic","title":"User Interactions","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers"},"https://maplibre.org/maplibre-style-spec/expressions/":{"type":"link","titleInlineContent":[{"text":"MapLibre Style Spec","type":"text"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","title":"MapLibre Style Spec","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","kind":"article","abstract":[{"type":"text","text":"Using URL Templates when defining tile sources"}],"role":"article","url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates","type":"topic","title":"Tile URL Templates"},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"titleInlineContent":[{"code":"match","type":"codeVoice"}],"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","title":"match","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match"},"https://github.com/maplibre/maplibre-native/issues/331":{"type":"link","titleInlineContent":[{"text":"#331","type":"text"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","title":"#331","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},"#code-mgl_let-code":{"titleInlineContent":[{"code":"MLN_LET","type":"codeVoice"}],"type":"link","url":"#code-mgl_let-code","title":"MLN_LET","identifier":"#code-mgl_let-code"},"#code-mgl_if-code":{"type":"link","titleInlineContent":[{"code":"MLN_IF()","type":"codeVoice"}],"url":"#code-mgl_if-code","title":"MLN_IF()","identifier":"#code-mgl_if-code"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"titleInlineContent":[{"code":"has","type":"codeVoice"}],"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","title":"has","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"type":"link","titleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}],"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","title":"Predicate Programming Guide","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","role":"symbol","type":"topic","abstract":[{"type":"text","text":"An "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true},{"type":"text","text":" object represents a closed shape consisting of four or more"},{"type":"text","text":" "},{"text":"vertices, specified as ","type":"text"},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"type":"text","text":" instances, and the edges that"},{"text":" ","type":"text"},{"type":"text","text":"connect them. For example, you could use a polygon shape to represent a"},{"text":" ","type":"text"},{"text":"building, a lake, or an area you want to highlight.","type":"text"}],"url":"\/documentation\/maplibre\/mlnpolygon","fragments":[{"kind":"identifier","text":"MLNPolygon"}],"title":"MLNPolygon"},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"titleInlineContent":[{"code":"log2","type":"codeVoice"}],"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","title":"log2","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"type":"link","titleInlineContent":[{"code":"cos","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","title":"cos","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","kind":"article","role":"article","url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample","type":"topic","title":"Adding Multiple Images","abstract":[{"type":"text","text":"Adding images to the map and assigning them to POI types"}]},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"titleInlineContent":[{"code":"mgl_interpolate:withCurveType:parameters:stops:","type":"codeVoice"}],"type":"link","url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","title":"mgl_interpolate:withCurveType:parameters:stops:","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"role":"article","type":"topic","url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","kind":"article","abstract":[{"type":"text","text":"MapLibre Native for iOS supports custom "},{"type":"codeVoice","code":"Info.plist"},{"text":" keys in your application in order to configure various settings.","type":"text"}],"title":"Info.plist Keys"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"role":"article","type":"topic","url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts","abstract":[{"type":"text","text":"Using custom fonts"}],"kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","title":"Customizing Fonts"},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"type":"link","titleInlineContent":[{"code":"step","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","title":"step","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"titleInlineContent":[{"code":"asin","type":"codeVoice"}],"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","title":"asin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},"#code-mgl_expressionwithcontext-code":{"type":"link","titleInlineContent":[{"code":"mgl_expressionWithContext:","type":"codeVoice"}],"url":"#code-mgl_expressionwithcontext-code","title":"mgl_expressionWithContext:","identifier":"#code-mgl_expressionwithcontext-code"},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"titleInlineContent":[{"code":"acos","type":"codeVoice"}],"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","title":"acos","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"type":"link","titleInlineContent":[{"code":"to-number","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","title":"to-number","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},"#variables":{"titleInlineContent":[{"type":"text","text":"variables"}],"type":"link","url":"#variables","title":"variables","identifier":"#variables"},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"type":"link","titleInlineContent":[{"code":"coalesce","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","title":"coalesce","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce"},"#key-paths":{"titleInlineContent":[{"text":"key paths","type":"text"}],"type":"link","url":"#key-paths","title":"key paths","identifier":"#key-paths"},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"type":"link","titleInlineContent":[{"code":"tan","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","title":"tan","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan"},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"titleInlineContent":[{"code":"sin","type":"codeVoice"}],"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","title":"sin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin"},"#MapLibre-specific-functions":{"type":"link","titleInlineContent":[{"text":"MapLibre-specific functions","type":"text"}],"url":"#MapLibre-specific-functions","title":"MapLibre-specific functions","identifier":"#MapLibre-specific-functions"},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"role":"symbol","url":"\/documentation\/maplibre\/mlnshapesource","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","kind":"symbol","abstract":[{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference"},{"text":" is a map content source that supplies vector shapes to be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"shown on the map. The shapes may be instances of "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true},{"text":" or ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or they may be defined by local or external"},{"type":"text","text":" "},{"type":"text","text":"GeoJSON"},{"text":" code. A shape source is added to an","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle"},{"type":"text","text":" object along with an "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true},{"text":" object. The vector style","type":"text"},{"type":"text","text":" "},{"type":"text","text":"layer defines the appearance of any content supplied by the shape source. You"},{"text":" ","type":"text"},{"type":"text","text":"can update a shape source by setting its "},{"type":"codeVoice","code":"shape"},{"type":"text","text":" or "},{"type":"codeVoice","code":"URL"},{"type":"text","text":" property."}],"fragments":[{"kind":"identifier","text":"MLNShapeSource"}],"title":"MLNShapeSource"},"#code-mgl_has-code":{"titleInlineContent":[{"code":"mgl_has:","type":"codeVoice"}],"type":"link","url":"#code-mgl_has-code","title":"mgl_has:","identifier":"#code-mgl_has-code"},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"type":"link","titleInlineContent":[{"code":"NSExpression+MLNAdditions.h","type":"codeVoice"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","title":"NSExpression+MLNAdditions.h","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h"},"doc://org.swift.MyProject/documentation/MapLibre":{"url":"\/documentation\/maplibre","title":"MapLibre","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","kind":"symbol","abstract":[{"text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling.","type":"text"}],"role":"collection"},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"titleInlineContent":[{"code":"case","type":"codeVoice"}],"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","title":"case","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case"},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"type":"link","titleInlineContent":[{"type":"text","text":"ToNumber Applied to the String Type"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","title":"ToNumber Applied to the String Type","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type"},"#code-mgl_match-code":{"titleInlineContent":[{"code":"MLN_MATCH()","type":"codeVoice"}],"type":"link","url":"#code-mgl_match-code","title":"MLN_MATCH()","identifier":"#code-mgl_match-code"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"role":"article","type":"topic","url":"\/documentation\/maplibre-native-for-ios\/for_style_authors","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors","kind":"article","abstract":[],"title":"Information for Style Authors"},"#code-mgl_join-code":{"type":"link","titleInlineContent":[{"code":"mgl_join:","type":"codeVoice"}],"url":"#code-mgl_join-code","title":"mgl_join:","identifier":"#code-mgl_join-code"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"titleInlineContent":[{"code":"to-string","type":"codeVoice"}],"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","title":"to-string","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string"},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"type":"link","titleInlineContent":[{"code":"atan","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","title":"atan","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"titleInlineContent":[{"code":"let","type":"codeVoice"}],"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","title":"let","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"},"#code-stringbyappendingstring-code":{"type":"link","titleInlineContent":[{"code":"stringByAppendingString:","type":"codeVoice"}],"url":"#code-stringbyappendingstring-code","title":"stringByAppendingString:","identifier":"#code-stringbyappendingstring-code"},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"titleInlineContent":[{"code":"mgl_interpolateWithCurveType:parameters:stops:","type":"codeVoice"}],"type":"link","url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","title":"mgl_interpolateWithCurveType:parameters:stops:","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code"}}}