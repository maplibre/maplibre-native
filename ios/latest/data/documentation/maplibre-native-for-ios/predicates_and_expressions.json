{"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Style layers use predicates and expressions to determine what to display and how","type":"text"},{"type":"text","text":" "},{"text":"to format it. ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Predicates"}]},{"type":"text","text":" are represented by the same "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":" class that"},{"type":"text","text":" "},{"text":"filters results from Core Data or items in an ","type":"text"},{"code":"NSArray","type":"codeVoice"},{"text":" in Objective-C.","type":"text"},{"type":"text","text":" "},{"text":"Predicates are based on ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"expressions","type":"text"}]},{"text":", represented by the ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" class."},{"text":" ","type":"text"},{"type":"text","text":"Somewhat unusually, style layers also use expressions on their own."}]},{"inlineContent":[{"type":"text","text":"This document discusses the specific subset of the predicate and expression"},{"text":" ","type":"text"},{"text":"syntax supported by this SDK. For a more general introduction to predicates and","type":"text"},{"type":"text","text":" "},{"text":"expressions, consult the","type":"text"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","isActive":true,"type":"reference"}]},{"type":"text","text":" "},{"type":"text","text":"in Apple developer documentation. For additional detail on how this SDK has"},{"type":"text","text":" "},{"type":"text","text":"extended the "},{"type":"codeVoice","code":"NSExpression"},{"text":" class, see the ","type":"text"},{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","type":"reference","isActive":true},{"type":"text","text":" header."}],"type":"paragraph"},{"type":"heading","text":"Using predicates to filter vector data","level":2,"anchor":"Using-predicates-to-filter-vector-data"},{"type":"paragraph","inlineContent":[{"text":"Most style layer classes display ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"text":" objects that you can show or hide","type":"text"},{"type":"text","text":" "},{"type":"text","text":"based on the feature’s attributes. Use the "},{"code":"MLNVectorStyleLayer.predicate","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"property to include only the features in the source layer that satisfy a"},{"type":"text","text":" "},{"type":"text","text":"condition that you define."}]},{"level":3,"type":"heading","anchor":"Operators","text":"Operators"},{"inlineContent":[{"type":"text","text":"The following comparison operators are supported:"}],"type":"paragraph"},{"rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"code":"key = value","type":"codeVoice"},{"code":"key == value","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSGreaterThanOrEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"key >= value","type":"codeVoice"},{"type":"codeVoice","code":"key => value"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSLessThanOrEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key <= value"},{"code":"key =< value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSGreaterThanPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key > value"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSLessThanPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key < value"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"code":"key != value","type":"codeVoice"},{"code":"key <> value","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSBetweenPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key BETWEEN { 32, 212 }"}],"type":"paragraph"}]]],"header":"row","type":"table"},{"type":"paragraph","inlineContent":[{"text":"To test whether a feature has or lacks a specific attribute, compare the","type":"text"},{"text":" ","type":"text"},{"text":"attribute to ","type":"text"},{"code":"NULL","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"NIL","type":"codeVoice"},{"type":"text","text":". Predicates created using the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSPredicate predicateWithValue:]"},{"text":" method are also supported. String","type":"text"},{"text":" ","type":"text"},{"text":"operators and custom operators are not supported.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The following compound operators are supported:"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSCompoundPredicateType"}]}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAndPredicateType"}]}],[{"type":"paragraph","inlineContent":[{"code":"predicate1 AND predicate2","type":"codeVoice"},{"code":"predicate1 && predicate2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSOrPredicateType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"predicate1 OR predicate2","type":"codeVoice"},{"type":"text","text":"predicate1 || predicate2"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNotPredicateType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NOT predicate"},{"type":"codeVoice","code":"!predicate"}],"type":"paragraph"}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following aggregate operators are supported:"}]},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSInPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSContainsPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key"}],"type":"paragraph"}]]]},{"inlineContent":[{"text":"You can use the ","type":"text"},{"code":"IN","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"CONTAINS","type":"codeVoice"},{"text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature (","type":"text"},{"type":"codeVoice","code":"SELF"},{"text":") lies within a given ","type":"text"},{"type":"codeVoice","code":"MLNShape"},{"text":" or ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"type":"text","text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:"}],"type":"paragraph"},{"code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"],"type":"codeListing","syntax":"objc"},{"type":"codeListing","syntax":"swift","code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"]},{"inlineContent":[{"type":"text","text":"The following combinations of comparison operators and modifiers are supported:"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSComparisonPredicateModifier","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"inlineContent":[{"code":"NSAllPredicateModifier","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"ALL haystack != needle"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSAnyPredicateModifier"}],"type":"paragraph"}],[{"inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"ANY haystack = needle","type":"codeVoice"},{"type":"codeVoice","code":"SOME haystack = needle"}]}]]],"header":"row","type":"table"},{"inlineContent":[{"text":"The following comparison predicate options are supported for comparison and","type":"text"},{"text":" ","type":"text"},{"text":"aggregate operators that are used in the predicate:","type":"text"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateOptions"}]}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSCaseInsensitivePredicateOption"}]}],[{"inlineContent":[{"type":"codeVoice","code":"'QUEBEC' =[c] 'Quebec'"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSDiacriticInsensitivePredicateOption","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"'Québec' =[d] 'Quebec'","type":"codeVoice"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"text":"Other comparison predicate options are unsupported, namely ","type":"text"},{"type":"codeVoice","code":"l"},{"text":" ","type":"text"},{"text":"(for locale sensitivity) and ","type":"text"},{"type":"codeVoice","code":"n"},{"type":"text","text":" (for normalization). A comparison is"},{"type":"text","text":" "},{"text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"predicate options are not supported in conjunction with comparison modifiers"},{"text":" ","type":"text"},{"text":"like ","type":"text"},{"type":"codeVoice","code":"ALL"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ANY"},{"text":".","type":"text"}]},{"text":"Operands","type":"heading","level":3,"anchor":"Operands"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Operands in predicates can be "},{"type":"reference","identifier":"#variables","isActive":true},{"text":", ","type":"text"},{"identifier":"#key-paths","isActive":true,"type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"or almost anything else that can appear","type":"text"},{"text":" ","type":"text"},{"identifier":"#using-expressions-to-configure-layout-and-paint-attributes","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Automatic type casting is not performed. Therefore, a feature only matches a"},{"text":" ","type":"text"},{"text":"predicate if its value for the attribute in question is of the same type as the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value specified in the predicate. Use the "},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" operator to convert a key"},{"text":" ","type":"text"},{"type":"text","text":"path or variable into a matching type:"}]},{"items":[{"content":[{"inlineContent":[{"text":"To cast a value to a number, use ","type":"text"},{"type":"codeVoice","code":"CAST(key, 'NSNumber')"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"To cast a value to a string, use ","type":"text"},{"type":"codeVoice","code":"CAST(key, 'NSString')"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"To cast a value to a color, use ","type":"text"},{"code":"CAST(key, 'UIColor')","type":"codeVoice"},{"text":" on iOS and ","type":"text"},{"type":"codeVoice","code":"CAST(key, 'NSColor')"},{"type":"text","text":" on macOS."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"To cast an ","type":"text"},{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" or "},{"type":"codeVoice","code":"UIColor"},{"text":" object to an array, use ","type":"text"},{"code":"CAST(noindex(color), 'NSArray')","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"For details about the predicate format string syntax, consult the “Predicate","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Format String Syntax” chapter of the"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","overridingTitle":"Predicate Programming Guide","type":"reference","isActive":true,"overridingTitleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}]}]},{"type":"text","text":" "},{"text":"in Apple developer documentation.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Using-expressions-to-configure-layout-and-paint-attributes","text":"Using expressions to configure layout and paint attributes","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An expression can contain subexpressions of various types. Each of the supported"},{"text":" ","type":"text"},{"type":"text","text":"types of expressions is discussed below."}]},{"level":3,"text":"Constant values","type":"heading","anchor":"Constant-values"},{"inlineContent":[{"text":"A constant value can be of any of the following types:","type":"text"}],"type":"paragraph"},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"text":"In Objective-C","type":"text"}]}],[{"inlineContent":[{"text":"In Swift","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"text":" (iOS)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSString","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSString"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNumber.doubleValue","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSNumber.doubleValue","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSArray<NSNumber>","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"[Float]"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSArray<NSString>"}]}],[{"type":"paragraph","inlineContent":[{"code":"[String]","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.CGVectorValue"},{"type":"text","text":" (iOS)"},{"code":"NSValue","type":"codeVoice"},{"type":"text","text":" containing "},{"code":"CGVector","type":"codeVoice"},{"text":" (macOS)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSValue.cgVectorValue","type":"codeVoice"},{"type":"text","text":" (iOS)"},{"code":"NSValue","type":"codeVoice"},{"type":"text","text":" containing "},{"code":"CGVector","type":"codeVoice"},{"text":" (macOS)","type":"text"}]}]],[[{"inlineContent":[{"code":"NSValue.UIEdgeInsetsValue","type":"codeVoice"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"text":" (macOS)","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"NSValue.uiEdgeInsetsValue","type":"codeVoice"},{"type":"text","text":" (iOS)"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"text":" (macOS)","type":"text"}]}]]],"header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For literal floating-point values, use "},{"type":"codeVoice","code":"-[NSNumber numberWithDouble:]"},{"text":" instead","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of "},{"code":"-[NSNumber numberWithFloat:]","type":"codeVoice"},{"type":"text","text":" to avoid precision issues."}]},{"text":"Key paths","type":"heading","level":3,"anchor":"Key-paths"},{"inlineContent":[{"type":"text","text":"A key path expression refers to an attribute of the "},{"type":"codeVoice","code":"MLNFeature"},{"text":" object being","type":"text"},{"type":"text","text":" "},{"type":"text","text":"evaluated for display. For example, if a polygon’s "},{"type":"codeVoice","code":"MLNFeature.attributes"},{"type":"text","text":" "},{"text":"dictionary contains the ","type":"text"},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" key, then the key path "},{"code":"floorCount","type":"codeVoice"},{"type":"text","text":" refers"},{"text":" ","type":"text"},{"text":"to the value of the ","type":"text"},{"type":"codeVoice","code":"floorCount"},{"text":" attribute when evaluating that particular","type":"text"},{"type":"text","text":" "},{"text":"polygon.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following special attributes are also available on features that are produced","type":"text"},{"type":"text","text":" "},{"text":"as a result of clustering multiple point features together in a shape source:","type":"text"}]},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Attribute","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Type","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"Meaning"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"cluster","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bool"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"cluster_id"}]}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"Identifier for the point cluster."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"point_count","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"The number of point features in a given cluster."}],"type":"paragraph"}]]],"header":"row"},{"inlineContent":[{"type":"text","text":"Some characters may not be used directly as part of a key path in a format"},{"text":" ","type":"text"},{"type":"text","text":"string. For example, if a feature’s attribute is named "},{"type":"codeVoice","code":"ISO 3166-1:2006"},{"type":"text","text":", an"},{"type":"text","text":" "},{"text":"expression format string of ","type":"text"},{"type":"codeVoice","code":"lowercase(ISO 3166-1:2006)"},{"text":" or a predicate format","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"string of "},{"type":"codeVoice","code":"ISO 3166-1:2006 == 'US-OH'"},{"text":" would raise an exception. Instead, use a","type":"text"},{"type":"text","text":" "},{"code":"%K","type":"codeVoice"},{"text":" placeholder or the ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForKeyPath:]"},{"type":"text","text":" initializer:"}],"type":"paragraph"},{"code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"],"syntax":"objc","type":"codeListing"},{"code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"],"syntax":"swift","type":"codeListing"},{"anchor":"Functions","type":"heading","level":3,"text":"Functions"},{"inlineContent":[{"type":"text","text":"Of the"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","type":"reference"},{"text":" ","type":"text"},{"text":"by the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"the following subset is supported in layer attribute values:","type":"text"}],"type":"paragraph"},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Initializer parameter","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"inlineContent":[{"code":"average:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"average({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sum:"}]}],[{"type":"paragraph","inlineContent":[{"code":"sum({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"count:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"count({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"min:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"min({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"max:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"max({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"add:to:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 + 2"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"from:subtract:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"2 - 1"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"multiply:by:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"1 * 2","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"divide:by:"}]}],[{"type":"paragraph","inlineContent":[{"code":"1 \/ 2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"modulus:by:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"modulus:by:(1, 2)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"sqrt:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt(2)"}]}]],[[{"inlineContent":[{"code":"log:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"log(10)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ln:"}]}],[{"inlineContent":[{"code":"ln(2)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"raise:toPower:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"2 ** 2"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"exp:"}]}],[{"type":"paragraph","inlineContent":[{"code":"exp(0)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ceiling:"}]}],[{"type":"paragraph","inlineContent":[{"code":"ceiling(0.99999)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"abs:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"abs(-1)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"trunc:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"trunc(6378.1370)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"floor:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"floor(-0.99999)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"uppercase:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"uppercase('Elysian Fields')"}]}]],[[{"inlineContent":[{"code":"lowercase:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"lowercase('DOWNTOWN')"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"noindex:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"noindex(0 + 2 + c)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"length:"}]}],[{"type":"paragraph","inlineContent":[{"code":"length('Wapakoneta')","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"castObject:toType:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"CAST(ele, 'NSString')"},{"type":"codeVoice","code":"CAST(ele, 'NSNumber')"}],"type":"paragraph"}]]],"header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A number of "},{"identifier":"#MapLibre-specific-functions","type":"reference","isActive":true},{"text":" are also","type":"text"},{"text":" ","type":"text"},{"text":"available.","type":"text"}]},{"inlineContent":[{"text":"The following predefined functions are ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" supported:"}],"type":"paragraph"},{"rows":[[[{"inlineContent":[{"text":"Initializer parameter","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"median:"}]}],[{"type":"paragraph","inlineContent":[{"code":"median({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"mode:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"mode({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"stddev:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"stddev({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"random"}]}],[{"inlineContent":[{"type":"codeVoice","code":"random()"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"randomn:"}]}],[{"inlineContent":[{"code":"randomn(10)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"now","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"now()"}]}]],[[{"inlineContent":[{"code":"bitwiseAnd:with:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"bitwiseAnd:with:(5, 3)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:(5, 3)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"bitwiseXor:with:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:(5, 3)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"leftshift:by:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"leftshift:by:(23, 1)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rightshift:by:"}]}],[{"type":"paragraph","inlineContent":[{"code":"rightshift:by:(23, 1)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"onesComplement:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"onesComplement(255)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:(there, here)"}],"type":"paragraph"}]]],"type":"table","header":"row"},{"type":"heading","level":3,"text":"Conditionals","anchor":"Conditionals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conditionals are supported via the built-in"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"type":"text","text":" "},{"text":"method and ","type":"text"},{"code":"TERNARY()","type":"codeVoice"},{"text":" operator. If you need to express multiple cases","type":"text"},{"text":" ","type":"text"},{"text":"(“else-if”), you can either nest a conditional within a conditional or use the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-mgl_if-code","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"isActive":true,"identifier":"#code-mgl_match-code","type":"reference"},{"text":" function.","type":"text"}]},{"text":"Aggregates","level":3,"anchor":"Aggregates","type":"heading"},{"inlineContent":[{"type":"text","text":"Aggregate expressions can contain arrays of expressions. In some cases, it is"},{"type":"text","text":" "},{"type":"text","text":"possible to use the array itself instead of wrapping the array in an aggregate"},{"type":"text","text":" "},{"text":"expression.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"Variables","text":"Variables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following variables are defined by this SDK for use with style layers:"}]},{"header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"Variable"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Type"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Meaning"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"$featureIdentifier"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Any GeoJSON data type"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.featureIdentifierVariableExpression"},{"type":"text","text":" property."}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"$geometryType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"String"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:"},{"type":"text","text":"*   "},{"code":"Point","type":"codeVoice"},{"text":" for point features, corresponding to the ","type":"text"},{"type":"codeVoice","code":"MLNPointAnnotation"},{"type":"text","text":" class"},{"text":"*   ","type":"text"},{"code":"LineString","type":"codeVoice"},{"text":" for polyline features, corresponding to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline"},{"type":"text","text":" class"},{"type":"text","text":"*   "},{"code":"Polygon","type":"codeVoice"},{"type":"text","text":" for polygon features, corresponding to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon"},{"text":" class","type":"text"},{"type":"text","text":"This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.geometryTypeVariableExpression"},{"text":" property.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$heatmapDensity"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","isActive":true},{"type":"text","text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the "},{"code":"heatmapColor","type":"codeVoice"},{"type":"text","text":" property. This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.heatmapDensityVariableExpression"},{"text":" property.","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$zoomLevel"}]}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the ","type":"text"},{"code":"NSExpression.zoomLevelVariableExpression","type":"codeVoice"},{"type":"text","text":" property."}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"$lineProgress"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"inlineContent":[{"type":"text","text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","isActive":true,"type":"reference"},{"text":" property. It corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.lineProgressVariableExpression"},{"text":" property.","type":"text"}],"type":"paragraph"}]]],"type":"table"},{"inlineContent":[{"text":"In addition to these variables, you can define your own variables and refer to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"them elsewhere in the expression. The syntax for defining a variable makes use"},{"text":" ","type":"text"},{"text":"of a ","type":"text"},{"identifier":"#MapLibre-specific-functions","overridingTitleInlineContent":[{"text":"MapLibre-specific function","type":"text"}],"type":"reference","overridingTitle":"MapLibre-specific function","isActive":true},{"text":" that takes an","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" as an argument:"}],"type":"paragraph"},{"code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"],"type":"codeListing","syntax":"objc"},{"code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"],"type":"codeListing","syntax":"swift"},{"anchor":"MapLibre-specific-functions","level":2,"type":"heading","text":"MapLibre-specific functions"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to a change in iOS 15.5, some of these stopped working. See "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},{"type":"text","text":" for more information and workarounds."}]}],"name":"Warning","type":"aside","style":"warning"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For compatibility with the MapLibre Style Spec, the following functions"},{"type":"text","text":" "},{"type":"text","text":"are defined by this SDK. When setting a style layer property, you can call these"},{"type":"text","text":" "},{"type":"text","text":"functions just like the predefined functions above, using either the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"type":"text","text":" method or a convenient format"},{"text":" ","type":"text"},{"type":"text","text":"string syntax:"}]},{"anchor":"mgldoeshave","type":"heading","level":3,"text":"mgl_does:have:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"mgl_does:have:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:(SELF, '🧀🍔')"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"mgl_does:have:(%@, '🧀🍔')"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns a Boolean value indicating whether the dictionary has a value for the","type":"text"},{"type":"text","text":" "},{"text":"key or whether the evaluated object (","type":"text"},{"type":"codeVoice","code":"SELF"},{"text":") has a value for the feature","type":"text"},{"text":" ","type":"text"},{"text":"attribute. Compared to the ","type":"text"},{"identifier":"#code-mgl_has-code","isActive":true,"type":"reference"},{"type":"text","text":" custom function,"},{"type":"text","text":" "},{"type":"text","text":"that function’s target is instead passed in as the first argument to this"},{"type":"text","text":" "},{"text":"function. Both functions are equivalent to the syntax ","type":"text"},{"code":"key != NIL","type":"codeVoice"},{"text":" or","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"%@[key] != NIL"},{"type":"text","text":" but can be used outside of a predicate."}]},{"text":"mgl_interpolate:withCurveType:parameters:stops:","anchor":"mglinterpolatewithCurveTypeparametersstops","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Produces continuous, smooth results by interpolating between pairs of input and","type":"text"},{"type":"text","text":" "},{"text":"output values (“stops”). Compared to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","isActive":true},{"text":" ","type":"text"},{"text":"custom function, the input expression (that function’s target) is instead passed","type":"text"},{"text":" ","type":"text"},{"text":"in as the first argument to this function.","type":"text"}]},{"level":3,"type":"heading","anchor":"mglstepfromstops","text":"mgl_step:from:stops:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_step:from:stops:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_step:from:stops:(x, 11, %@)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Produces discrete, stepped results by evaluating a piecewise-constant function"},{"type":"text","text":" "},{"type":"text","text":"defined by pairs of input and output values (“stops”). Compared to the"},{"text":" ","type":"text"},{"isActive":true,"identifier":"#code-mgl_stepwithminimum-stops-code","type":"reference"},{"type":"text","text":" custom"},{"type":"text","text":" "},{"text":"function, the input expression (that function’s target) is instead passed in as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the first argument to this function."}]},{"text":"mgl_join:","type":"heading","anchor":"mgljoin","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_join:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_join({'Old', 'MacDonald'})","type":"codeVoice"}]},{"inlineContent":[{"type":"text","text":"Returns the result of concatenating together all the elements of an array in"},{"text":" ","type":"text"},{"type":"text","text":"order. Compared to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"#code-stringbyappendingstring-code"},{"type":"text","text":" custom"},{"text":" ","type":"text"},{"type":"text","text":"function, this function takes only one argument, which is an aggregate"},{"text":" ","type":"text"},{"type":"text","text":"expression containing the strings to concatenate."}],"type":"paragraph"},{"anchor":"mglacos","text":"mgl_acos:","level":3,"type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_acos:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_acos(1)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the arccosine of the number.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"anchor":"mglasin","type":"heading","level":3,"text":"mgl_asin:"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_asin:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_asin(0)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the arcsine of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","level":3,"anchor":"mglatan","text":"mgl_atan:"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_atan:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_atan(20)"}]},{"inlineContent":[{"type":"text","text":"Returns the arctangent of the number."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","text":"mgl_cos:","anchor":"mglcos","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_cos:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_cos(0)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the cosine of the number."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"mgllog2","level":3,"text":"mgl_log2:"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_log2:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_log2(1024)"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the base-2 logarithm of the number.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"level":3,"anchor":"mglround","type":"heading","text":"mgl_round:"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_round:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_round(1.5)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the number rounded to the nearest integer. If the number is halfway"},{"type":"text","text":" "},{"text":"between two integers, this function rounds it away from zero.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"anchor":"mglsin","text":"mgl_sin:","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_sin:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin(0)"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the sine of the number.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mgltan","level":3,"text":"mgl_tan:","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan:"}]},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan(0)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the tangent of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"mgl_distanceFrom:","level":3,"anchor":"mgldistanceFrom","type":"heading"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_distanceFrom:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_distanceFrom(%@)"},{"type":"text","text":" with an "},{"type":"codeVoice","code":"MLNShape"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the straight-line distance from the evaluated object to the given shape."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"type":"heading","text":"mgl_coalesce:","level":3,"anchor":"mglcoalesce"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_coalesce:"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_coalesce({x, y, z})","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the first non-"},{"type":"codeVoice","code":"nil"},{"text":" value from an array of expressions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","level":3,"text":"mgl_attributed:","anchor":"mglattributed"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_attributed:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_attributed({x, y, z})"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Concatenates and returns the array of ","type":"text"},{"type":"codeVoice","code":"MLNAttributedExpression"},{"text":" objects, for use","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"MLNSymbolStyleLayer.text"},{"text":" property.","type":"text"}]},{"inlineContent":[{"code":"MLNAttributedExpression.attributes","type":"codeVoice"},{"type":"text","text":" valid attributes."}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Key","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Value Type"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"MLNFontNamesAttribute","type":"codeVoice"}]}],[{"inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" evaluating to an "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" array."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"MLNFontScaleAttribute"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"text":" evaluating to an ","type":"text"},{"type":"codeVoice","code":"NSNumber"},{"text":" value.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontColorAttribute"}]}],[{"inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"text":" evaluating to an ","type":"text"},{"type":"codeVoice","code":"UIColor"},{"text":" (iOS) or ","type":"text"},{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)."}],"type":"paragraph"}]]]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"MLNLET","text":"MLN_LET"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_LET:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" Any number of variable names interspersed with their assigned"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" values, followed by an "},{"type":"codeVoice","code":"NSExpression"},{"text":" ","type":"text"},{"type":"text","text":"that may contain references to those variables."}]},{"inlineContent":[{"text":"Returns the result of evaluating an expression with the given variable values.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Compared to the"},{"type":"text","text":" "},{"identifier":"#code-mgl_expressionwithcontext-code","type":"reference","isActive":true},{"type":"text","text":" custom"},{"text":" ","type":"text"},{"text":"function, this function takes the variable names and values inline before the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression that contains references to those variables."}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"MLNMATCH","text":"MLN_MATCH"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"MLN_MATCH:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" An input expression, then any number of argument pairs, followed by a default","type":"text"},{"type":"text","text":" "},{"text":"expression. Each argument pair consists of a constant value followed by an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression to produce as a result of matching that constant value."},{"text":" ","type":"text"},{"text":"If the input value is an aggregate expression, then any of the constant values within","type":"text"},{"text":" ","type":"text"},{"text":"that aggregate expression result in the following argument. This is shorthand for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specifying an argument pair for each of the constant values within that aggregate"},{"text":" ","type":"text"},{"type":"text","text":"expression. It is not possible to match the aggregate expression itself."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the result of matching the input expression against the given constant","type":"text"},{"type":"text","text":" "},{"text":"values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","level":3,"text":"MLN_IF","anchor":"MLNIF"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_IF:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" Alternating ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" conditionals and resulting expressions,"},{"type":"text","text":" "},{"type":"text","text":"followed by a default expression."}]},{"type":"paragraph","inlineContent":[{"text":"Returns the first expression that meets the condition; otherwise, the default","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value. Unlike"},{"text":" ","type":"text"},{"code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]","type":"codeVoice"},{"type":"text","text":" or"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"TERNARY()"},{"type":"text","text":" syntax, this function can accept multiple “if else” conditions"},{"text":" ","type":"text"},{"text":"and is supported on iOS 8.","type":"text"},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"type":"text","text":" and macOS 10.10."},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"text":"; however, each conditional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"passed into this function must be wrapped in a constant expression."}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"MLN_FUNCTION","type":"heading","level":3,"anchor":"MLNFUNCTION"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_FUNCTION:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"MLN_FUNCTION('typeof', mystery)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" Any arguments required by the expression operator."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"An expression exactly as defined by the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Custom-functions","text":"Custom functions","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"The following custom functions are also available with the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:selectorName:arguments:]"},{"type":"text","text":" method or the"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" format string syntax."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some of these functions are defined as methods on their respective target"},{"text":" ","type":"text"},{"type":"text","text":"classes, but you should not call them directly outside the context of an"},{"type":"text","text":" "},{"text":"expression, because the result may differ from the evaluated expression’s result","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or may result in undefined behavior."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The MapLibre Style Spec defines some operators for which no custom"},{"type":"text","text":" "},{"type":"text","text":"function is available. To use these operators in an "},{"type":"codeVoice","code":"NSExpression"},{"text":", call the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"#code-mgl_function-code","type":"reference"},{"text":" function with the same arguments","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that the operator expects."}]},{"text":"boolValue","type":"heading","level":3,"anchor":"boolValue"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"boolValue","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(1, 'boolValue')"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number or string."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" None.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Boolean representation of the target: "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":" when then input is an"},{"type":"text","text":" "},{"text":"empty string, 0, ","type":"text"},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"NaN"},{"text":", otherwise ","type":"text"},{"type":"codeVoice","code":"TRUE"},{"text":".","type":"text"}]},{"text":"mgl_has:","type":"heading","level":3,"anchor":"mglhas"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_has:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to an "},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" "},{"type":"text","text":"or the evaluated object ("},{"type":"codeVoice","code":"SELF"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to an ","type":"text"},{"type":"codeVoice","code":"NSString"},{"text":" ","type":"text"},{"type":"text","text":"representing the key to look up in the dictionary or the feature attribute to"},{"text":" ","type":"text"},{"type":"text","text":"look up in the evaluated object (see "},{"code":"MLNFeature.attributes","type":"codeVoice"},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"true"},{"type":"text","text":" if the dictionary has a value for the key or if the evaluated"},{"type":"text","text":" "},{"type":"text","text":"object has a value for the feature attribute."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"#code-mgl_does-have-code"},{"text":" function, which is used on its own","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without the "},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator. You can also check whether an object has an","type":"text"},{"type":"text","text":" "},{"text":"attribute by comparing the key path to ","type":"text"},{"code":"NIL","type":"codeVoice"},{"type":"text","text":", for example "},{"code":"cheeseburger != NIL","type":"codeVoice"},{"type":"text","text":" "},{"text":"or ","type":"text"},{"type":"codeVoice","code":"burger.cheese != NIL"}],"type":"paragraph"},{"text":"mgl_expressionWithContext:","anchor":"mglexpressionWithContext","level":3,"type":"heading"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_expressionWithContext:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)"},{"type":"text","text":" with"},{"type":"text","text":" "},{"type":"text","text":"a dictionary containing "},{"type":"codeVoice","code":"ios"},{"type":"text","text":" and "},{"type":"codeVoice","code":"macos"},{"type":"text","text":" keys"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that may contain references to the variables"},{"text":" ","type":"text"},{"text":"defined in the context dictionary.","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" with ","type":"text"},{"code":"NSString","type":"codeVoice"},{"text":"s as keys and","type":"text"},{"text":" ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":"s as values. Each key is a variable name and each","type":"text"},{"type":"text","text":" "},{"text":"value is the variable’s value within the target expression.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The target expression with variable subexpressions replaced with the values"},{"type":"text","text":" "},{"text":"defined in the context dictionary.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-mgl_let-code","isActive":true},{"type":"text","text":" function, which is used on its own without the"},{"text":" ","type":"text"},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}]},{"level":3,"anchor":"mglinterpolateWithCurveTypeparametersstops","type":"heading","text":"mgl_interpolateWithCurveType:parameters:stops:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)"},{"text":" ","type":"text"},{"text":"with a dictionary containing zoom levels or other constant values as keys","type":"text"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a number and contains a"},{"text":" ","type":"text"},{"type":"text","text":"variable or key path expression."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" The first argument is one of the following strings denoting curve types:","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"linear"},{"text":", ","type":"text"},{"code":"exponential","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"cubic-bezier","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"The second argument is an expression providing parameters for the curve:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"linear"},{"type":"text","text":", the argument is "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the curve type is ","type":"text"},{"code":"exponential","type":"codeVoice"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"type":"text","text":"expression that evaluates to a number, specifying the base of the"},{"text":" ","type":"text"},{"type":"text","text":"exponential interpolation."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"cubic-bezier"},{"type":"text","text":", the argument is an"},{"text":" ","type":"text"},{"text":"array or aggregate expression containing four expressions, each","type":"text"},{"type":"text","text":" "},{"type":"text","text":"evaluating to a number. The four numbers are control points for the"},{"type":"text","text":" "},{"text":"cubic Bézier curve.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"The third argument is an ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" object representing the"},{"type":"text","text":" "},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A value interpolated along the continuous mathematical function defined by the","type":"text"},{"type":"text","text":" "},{"text":"arguments, with the target as the input to the function.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"text":" ","type":"text"},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"type":"text","text":" "},{"type":"text","text":"values may be constant values or "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" objects. For example, you can"},{"type":"text","text":" "},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"type":"text","text":" "},{"text":"yellow, orange, and red as the values.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code"},{"type":"text","text":" "},{"text":"function, which is used on its own without the ","type":"text"},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}]},{"text":"mgl_numberWithFallbackValues:","type":"heading","level":3,"anchor":"mglnumberWithFallbackValues"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"floatValue","type":"codeVoice"},{"type":"text","text":", or"},{"text":" ","type":"text"},{"code":"decimalValue","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"type":"text","text":"string."}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" Zero or more "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"type":"text","text":" "},{"type":"text","text":"or string."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A numeric representation of the target:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"code":"FALSE","type":"codeVoice"},{"text":", the result is 0.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a string, it is converted to a number as specified by the","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"doubleValue"},{"text":",","type":"text"},{"type":"text","text":" "},{"code":"floatValue","type":"codeVoice"},{"text":", or","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"decimalValue"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"text":" ","type":"text"},{"type":"text","text":"string."}]},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"Zero or more "},{"code":"NSExpression","type":"codeVoice"},{"text":"s, each evaluating to a Boolean value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or string."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A numeric representation of the target:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"If the target is ","type":"text"},{"code":"NIL","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"FALSE","type":"codeVoice"},{"text":", the result is 0.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"If the target is a string, it is converted to a number as specified by the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"“"},{"isActive":true,"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type"},{"type":"text","text":"”"},{"type":"text","text":" "},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If multiple values are provided, each one is evaluated in order until the","type":"text"},{"type":"text","text":" "},{"text":"first successful conversion is obtained.","type":"text"}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"type":"text","text":" "},{"text":"number by passing the value and the string ","type":"text"},{"code":"NSNumber","type":"codeVoice"},{"text":" into the ","type":"text"},{"code":"CAST()","type":"codeVoice"},{"text":" ","type":"text"},{"text":"operator.","type":"text"}]},{"anchor":"mglstepWithMinimumstops","level":3,"type":"heading","text":"mgl_stepWithMinimum:stops:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)"},{"type":"text","text":" with"},{"type":"text","text":" "},{"text":"a dictionary with zoom levels or other constant values as keys","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a number and contains a","type":"text"},{"type":"text","text":" "},{"text":"variable or key path expression.","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" "},{"text":"The first argument is an expression that evaluates to a number, specifying","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the minimum value in case the target is less than any of the stops in the"},{"type":"text","text":" "},{"text":"second argument.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The second argument is an "},{"type":"codeVoice","code":"NSDictionary"},{"text":" object representing the","type":"text"},{"type":"text","text":" "},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The output value of the stop whose key is just less than the evaluated target,"},{"type":"text","text":" "},{"text":"or the minimum value if the target is less than the least of the stops’ keys.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"text":" ","type":"text"},{"text":"keys may be feature attribute values, zoom levels, or heatmap densities. The","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values may be constant values or "},{"type":"codeVoice","code":"NSExpression"},{"text":" objects. For example, you can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"type":"text","text":" "},{"type":"text","text":"yellow, orange, and red as the values."}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"stringByAppendingString","type":"heading","text":"stringByAppendingString:"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"stringByAppendingString:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')"}]},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" "},{"text":"One or more ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a string."}]},{"type":"paragraph","inlineContent":[{"text":"The target string with each of the argument strings appended in order.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]"},{"text":" ","type":"text"},{"text":"method and is similar to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"#code-mgl_join-code"},{"type":"text","text":" function, which concatenates multiple"},{"text":" ","type":"text"},{"text":"expressions and is used on its own without the ","type":"text"},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}]},{"text":"stringValue","type":"heading","level":3,"anchor":"stringValue"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"stringValue","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(ele, 'stringValue')"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"text":"string.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"text":"None.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A string representation of the target:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is "},{"text":"NIL","type":"text"},{"type":"text","text":", the result is the empty string."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a Boolean value, the result is the string "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is a number, it is converted to a string as specified by the"},{"type":"text","text":" "},{"type":"text","text":"“"},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","isActive":true},{"type":"text","text":"”"},{"text":" ","type":"text"},{"text":"algorithm of the ECMAScript Language Specification.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the target is a color, it is converted to a string of the form","type":"text"},{"text":" ","type":"text"},{"code":"rgba(r,g,b,a)","type":"codeVoice"},{"type":"text","text":", where "},{"type":"text","text":"r"},{"type":"text","text":", "},{"text":"g","type":"text"},{"type":"text","text":", and "},{"type":"text","text":"b"},{"text":" are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"numerals ranging from 0 to 255 and "},{"type":"text","text":"a"},{"type":"text","text":" ranges from 0 to 1."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Otherwise, the target is converted to a string in the format specified by the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","isActive":true},{"type":"text","text":" "},{"type":"text","text":"function of the ECMAScript Language Specification."}]}]}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. You can also cast a value to a","type":"text"},{"text":" ","type":"text"},{"text":"string by passing the value and the string ","type":"text"},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" "},{"type":"text","text":"operator."}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions","interfaceLanguage":"occ"},"kind":"article","abstract":[{"type":"text","text":"Using "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" with MapLibre iOS"}],"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"]}],"sections":[],"metadata":{"title":"Predicates and expressions","modules":[{"name":"MapLibre"}],"roleHeading":"Article","role":"article"},"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"],"title":"Other Articles"}],"references":{"#code-mgl_stepwithminimum-stops-code":{"identifier":"#code-mgl_stepwithminimum-stops-code","title":"mgl_stepWithMinimum:stops:","type":"link","titleInlineContent":[{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}],"url":"#code-mgl_stepwithminimum-stops-code"},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"type":"link","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","titleInlineContent":[{"type":"codeVoice","code":"NSExpression+MLNAdditions.h"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","title":"NSExpression+MLNAdditions.h"},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","title":"match","type":"link","titleInlineContent":[{"type":"codeVoice","code":"match"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"role":"article","abstract":[{"type":"text","text":"Learn how to work with gesture recognizers"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","title":"User Interactions","url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers","kind":"article","type":"topic"},"#code-mgl_match-code":{"type":"link","identifier":"#code-mgl_match-code","titleInlineContent":[{"type":"codeVoice","code":"MLN_MATCH()"}],"url":"#code-mgl_match-code","title":"MLN_MATCH()"},"#key-paths":{"identifier":"#key-paths","title":"key paths","type":"link","titleInlineContent":[{"type":"text","text":"key paths"}],"url":"#key-paths"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","titleInlineContent":[{"type":"codeVoice","code":"to-number"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","title":"to-number"},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","title":"cos","type":"link","titleInlineContent":[{"type":"codeVoice","code":"cos"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","titleInlineContent":[{"type":"codeVoice","code":"format"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","title":"format"},"https://tc39.github.io/ecma262/#sec-json.stringify":{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","title":"JSON.stringify()","type":"link","titleInlineContent":[{"type":"codeVoice","code":"JSON.stringify()"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify"},"#code-mgl_let-code":{"type":"link","identifier":"#code-mgl_let-code","titleInlineContent":[{"type":"codeVoice","code":"MLN_LET"}],"url":"#code-mgl_let-code","title":"MLN_LET"},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","title":"concat","type":"link","titleInlineContent":[{"type":"codeVoice","code":"concat"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"abstract":[{"text":"The color gradient with which the line will be drawn. This property only has an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"effect on lines defined by an "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference","isActive":true},{"type":"text","text":" whose "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"option is set to ","type":"text"},{"code":"YES","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"text":"lineGradient","kind":"identifier"}],"type":"topic","kind":"symbol","title":"lineGradient","url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient","role":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient"},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","titleInlineContent":[{"type":"codeVoice","code":"coalesce"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","title":"coalesce"},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","title":"let","type":"link","titleInlineContent":[{"type":"codeVoice","code":"let"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"fragments":[{"text":"MLNShapeSource","kind":"identifier"}],"title":"MLNShapeSource","abstract":[{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference","isActive":true},{"text":" is a map content source that supplies vector shapes to be","type":"text"},{"text":" ","type":"text"},{"text":"shown on the map. The shapes may be instances of ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","type":"reference","isActive":true},{"type":"text","text":" or "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or they may be defined by local or external"},{"type":"text","text":" "},{"type":"text","text":"GeoJSON"},{"text":" code. A shape source is added to an","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle"},{"text":" object along with an ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle"},{"type":"text","text":" object. The vector style"},{"text":" ","type":"text"},{"text":"layer defines the appearance of any content supplied by the shape source. You","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can update a shape source by setting its "},{"code":"shape","type":"codeVoice"},{"type":"text","text":" or "},{"code":"URL","type":"codeVoice"},{"type":"text","text":" property."}],"type":"topic","role":"symbol","url":"\/documentation\/maplibre\/mlnshapesource","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","kind":"symbol"},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","titleInlineContent":[{"type":"codeVoice","code":"round"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","title":"round"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"title":"Information for Style Authors","abstract":[],"type":"topic","role":"article","url":"\/documentation\/maplibre-native-for-ios\/for_style_authors","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors","kind":"article"},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","title":"mgl_interpolateWithCurveType:parameters:stops:","type":"link","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"abstract":[{"type":"text","text":"Using custom fonts"}],"type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","kind":"article","title":"Customizing Fonts","role":"article","url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts"},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","titleInlineContent":[{"type":"codeVoice","code":"interpolate"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","title":"interpolate"},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","title":"NumberToString","type":"link","titleInlineContent":[{"type":"text","text":"NumberToString"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type"},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","titleInlineContent":[{"type":"codeVoice","code":"step"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","title":"step"},"#variables":{"identifier":"#variables","title":"variables","type":"link","titleInlineContent":[{"type":"text","text":"variables"}],"url":"#variables"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"abstract":[{"type":"text","text":"An "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true},{"type":"text","text":" object represents a closed shape consisting of four or more"},{"type":"text","text":" "},{"type":"text","text":"vertices, specified as "},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"type":"text","text":" instances, and the edges that"},{"text":" ","type":"text"},{"text":"connect them. For example, you could use a polygon shape to represent a","type":"text"},{"text":" ","type":"text"},{"text":"building, a lake, or an area you want to highlight.","type":"text"}],"title":"MLNPolygon","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","role":"symbol","kind":"symbol","fragments":[{"text":"MLNPolygon","kind":"identifier"}],"type":"topic","url":"\/documentation\/maplibre\/mlnpolygon"},"#code-stringbyappendingstring-code":{"type":"link","identifier":"#code-stringbyappendingstring-code","titleInlineContent":[{"type":"codeVoice","code":"stringByAppendingString:"}],"url":"#code-stringbyappendingstring-code","title":"stringByAppendingString:"},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","title":"atan","type":"link","titleInlineContent":[{"type":"codeVoice","code":"atan"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","titleInlineContent":[{"type":"codeVoice","code":"to-string"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","title":"to-string"},"doc://org.swift.MyProject/documentation/MapLibre":{"type":"topic","url":"\/documentation\/maplibre","kind":"symbol","title":"MapLibre","abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","role":"collection"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"fragments":[{"kind":"identifier","text":"MLNPolyline"}],"role":"symbol","url":"\/documentation\/maplibre\/mlnpolyline","kind":"symbol","abstract":[{"text":"An ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true,"type":"reference"},{"type":"text","text":" object represents a shape consisting of two or more vertices,"},{"type":"text","text":" "},{"type":"text","text":"specified as "},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"type":"text","text":" instances, and the line segments that"},{"type":"text","text":" "},{"type":"text","text":"connect them. For example, you could use an polyline to represent a road or the"},{"type":"text","text":" "},{"text":"path along which something moves.","type":"text"}],"type":"topic","title":"MLNPolyline","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline"},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","title":"distance","type":"link","titleInlineContent":[{"type":"codeVoice","code":"distance"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},"#using-expressions-to-configure-layout-and-paint-attributes":{"type":"link","identifier":"#using-expressions-to-configure-layout-and-paint-attributes","titleInlineContent":[{"type":"text","text":"inside an expression"}],"url":"#using-expressions-to-configure-layout-and-paint-attributes","title":"inside an expression"},"#code-mgl_join-code":{"identifier":"#code-mgl_join-code","title":"mgl_join:","type":"link","titleInlineContent":[{"type":"codeVoice","code":"mgl_join:"}],"url":"#code-mgl_join-code"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"type":"link","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","titleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}],"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","title":"Predicate Programming Guide"},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","title":"ToNumber Applied to the String Type","type":"link","titleInlineContent":[{"type":"text","text":"ToNumber Applied to the String Type"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type"},"#code-mgl_function-code":{"type":"link","identifier":"#code-mgl_function-code","titleInlineContent":[{"type":"codeVoice","code":"MLN_FUNCTION()"}],"url":"#code-mgl_function-code","title":"MLN_FUNCTION()"},"#code-mgl_has-code":{"identifier":"#code-mgl_has-code","title":"mgl_has:","type":"link","titleInlineContent":[{"type":"codeVoice","code":"mgl_has:"}],"url":"#code-mgl_has-code"},"#code-mgl_does-have-code":{"type":"link","identifier":"#code-mgl_does-have-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_does:have:"}],"url":"#code-mgl_does-have-code","title":"mgl_does:have:"},"#code-mgl_if-code":{"identifier":"#code-mgl_if-code","title":"MLN_IF()","type":"link","titleInlineContent":[{"type":"codeVoice","code":"MLN_IF()"}],"url":"#code-mgl_if-code"},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","titleInlineContent":[{"type":"codeVoice","code":"tan"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","title":"tan"},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","title":"mgl_interpolate:withCurveType:parameters:stops:","type":"link","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}],"url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code"},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","titleInlineContent":[{"type":"codeVoice","code":"log2"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","title":"log2"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","title":"has","type":"link","titleInlineContent":[{"type":"codeVoice","code":"has"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","title":"Info.plist Keys","role":"article","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","abstract":[{"type":"text","text":"MapLibre Native for iOS supports custom "},{"type":"codeVoice","code":"Info.plist"},{"type":"text","text":" keys in your application in order to configure various settings."}],"type":"topic"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","titleInlineContent":[{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"text":" method","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","title":"+[NSExpression expressionForFunction:arguments:] method"},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","title":"sin","type":"link","titleInlineContent":[{"type":"codeVoice","code":"sin"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","titleInlineContent":[{"type":"codeVoice","code":"asin"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","title":"asin"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","title":"functions predefined","type":"link","titleInlineContent":[{"type":"text","text":"functions predefined"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","titleInlineContent":[{"type":"text","text":"kernel density estimation"}],"url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","title":"kernel density estimation"},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","title":"acos","type":"link","titleInlineContent":[{"type":"codeVoice","code":"acos"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"type":"topic","url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates","abstract":[{"text":"Using URL Templates when defining tile sources","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","role":"article","title":"Tile URL Templates","kind":"article"},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","titleInlineContent":[{"type":"codeVoice","code":"case"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","title":"case"},"https://maplibre.org/maplibre-style-spec/expressions/":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","title":"MapLibre Style Spec","type":"link","titleInlineContent":[{"type":"text","text":"MapLibre Style Spec"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/"},"https://github.com/maplibre/maplibre-native/issues/331":{"type":"link","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","titleInlineContent":[{"type":"text","text":"#331"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","title":"#331"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample","title":"Adding Multiple Images","role":"article","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","abstract":[{"text":"Adding images to the map and assigning them to POI types","type":"text"}],"type":"topic"},"#MapLibre-specific-functions":{"identifier":"#MapLibre-specific-functions","title":"MapLibre-specific functions","type":"link","titleInlineContent":[{"type":"text","text":"MapLibre-specific functions"}],"url":"#MapLibre-specific-functions"},"#code-mgl_expressionwithcontext-code":{"type":"link","identifier":"#code-mgl_expressionwithcontext-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_expressionWithContext:"}],"url":"#code-mgl_expressionwithcontext-code","title":"mgl_expressionWithContext:"}}}