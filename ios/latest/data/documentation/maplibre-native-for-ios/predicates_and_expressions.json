{"variants":[{"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"],"traits":[{"interfaceLanguage":"occ"}]}],"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"text","text":"Style layers use predicates and expressions to determine what to display and how"},{"type":"text","text":" "},{"type":"text","text":"to format it. "},{"type":"emphasis","inlineContent":[{"text":"Predicates","type":"text"}]},{"text":" are represented by the same ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":" class that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"filters results from Core Data or items in an "},{"type":"codeVoice","code":"NSArray"},{"text":" in Objective-C.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Predicates are based on "},{"type":"emphasis","inlineContent":[{"type":"text","text":"expressions"}]},{"text":", represented by the ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" class."},{"type":"text","text":" "},{"type":"text","text":"Somewhat unusually, style layers also use expressions on their own."}],"type":"paragraph"},{"inlineContent":[{"text":"This document discusses the specific subset of the predicate and expression","type":"text"},{"type":"text","text":" "},{"type":"text","text":"syntax supported by this SDK. For a more general introduction to predicates and"},{"text":" ","type":"text"},{"type":"text","text":"expressions, consult the"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html"}]},{"type":"text","text":" "},{"type":"text","text":"in Apple developer documentation. For additional detail on how this SDK has"},{"text":" ","type":"text"},{"text":"extended the ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" class, see the "},{"type":"reference","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","isActive":true},{"type":"text","text":" header."}],"type":"paragraph"},{"type":"heading","text":"Using predicates to filter vector data","level":2,"anchor":"Using-predicates-to-filter-vector-data"},{"inlineContent":[{"type":"text","text":"Most style layer classes display "},{"type":"codeVoice","code":"MLNFeature"},{"type":"text","text":" objects that you can show or hide"},{"type":"text","text":" "},{"text":"based on the feature’s attributes. Use the ","type":"text"},{"type":"codeVoice","code":"MLNVectorStyleLayer.predicate"},{"text":" ","type":"text"},{"type":"text","text":"property to include only the features in the source layer that satisfy a"},{"type":"text","text":" "},{"text":"condition that you define.","type":"text"}],"type":"paragraph"},{"text":"Operators","level":3,"anchor":"Operators","type":"heading"},{"inlineContent":[{"type":"text","text":"The following comparison operators are supported:"}],"type":"paragraph"},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"key = value","type":"codeVoice"},{"code":"key == value","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSGreaterThanOrEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key >= value"},{"code":"key => value","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"NSLessThanOrEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key <= value"},{"code":"key =< value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSGreaterThanPredicateOperatorType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"key > value"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSLessThanPredicateOperatorType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"key < value"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSNotEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key != value"},{"type":"codeVoice","code":"key <> value"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSBetweenPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key BETWEEN { 32, 212 }"}]}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"text":"To test whether a feature has or lacks a specific attribute, compare the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"attribute to "},{"type":"codeVoice","code":"NULL"},{"text":" or ","type":"text"},{"code":"NIL","type":"codeVoice"},{"type":"text","text":". Predicates created using the"},{"text":" ","type":"text"},{"code":"+[NSPredicate predicateWithValue:]","type":"codeVoice"},{"type":"text","text":" method are also supported. String"},{"text":" ","type":"text"},{"type":"text","text":"operators and custom operators are not supported."}]},{"inlineContent":[{"text":"The following compound operators are supported:","type":"text"}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"code":"NSCompoundPredicateType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSAndPredicateType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"predicate1 AND predicate2"},{"type":"codeVoice","code":"predicate1 && predicate2"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSOrPredicateType"}]}],[{"inlineContent":[{"code":"predicate1 OR predicate2","type":"codeVoice"},{"type":"text","text":"predicate1 || predicate2"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotPredicateType"}]}],[{"type":"paragraph","inlineContent":[{"code":"NOT predicate","type":"codeVoice"},{"type":"codeVoice","code":"!predicate"}]}]]]},{"inlineContent":[{"type":"text","text":"The following aggregate operators are supported:"}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSInPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSContainsPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key","type":"codeVoice"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"IN"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"CONTAINS"},{"type":"text","text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature ("},{"code":"SELF","type":"codeVoice"},{"text":") lies within a given ","type":"text"},{"type":"codeVoice","code":"MLNShape"},{"type":"text","text":" or "},{"code":"MLNFeature","type":"codeVoice"},{"type":"text","text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:"}]},{"syntax":"objc","code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"],"type":"codeListing"},{"type":"codeListing","syntax":"swift","code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following combinations of comparison operators and modifiers are supported:"}]},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateModifier"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAllPredicateModifier"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSNotEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ALL haystack != needle"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSAnyPredicateModifier","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"ANY haystack = needle","type":"codeVoice"},{"code":"SOME haystack = needle","type":"codeVoice"}]}]]],"type":"table"},{"inlineContent":[{"type":"text","text":"The following comparison predicate options are supported for comparison and"},{"type":"text","text":" "},{"text":"aggregate operators that are used in the predicate:","type":"text"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateOptions"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSCaseInsensitivePredicateOption","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"'QUEBEC' =[c] 'Quebec'","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSDiacriticInsensitivePredicateOption"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"'Québec' =[d] 'Quebec'"}]}]]]},{"type":"paragraph","inlineContent":[{"text":"Other comparison predicate options are unsupported, namely ","type":"text"},{"type":"codeVoice","code":"l"},{"text":" ","type":"text"},{"type":"text","text":"(for locale sensitivity) and "},{"code":"n","type":"codeVoice"},{"text":" (for normalization). A comparison is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison"},{"type":"text","text":" "},{"text":"predicate options are not supported in conjunction with comparison modifiers","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"like "},{"type":"codeVoice","code":"ALL"},{"type":"text","text":" and "},{"code":"ANY","type":"codeVoice"},{"type":"text","text":"."}]},{"text":"Operands","level":3,"type":"heading","anchor":"Operands"},{"type":"paragraph","inlineContent":[{"text":"Operands in predicates can be ","type":"text"},{"isActive":true,"type":"reference","identifier":"#variables"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"#key-paths"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"or almost anything else that can appear","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"#using-expressions-to-configure-layout-and-paint-attributes"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"Automatic type casting is not performed. Therefore, a feature only matches a"},{"text":" ","type":"text"},{"type":"text","text":"predicate if its value for the attribute in question is of the same type as the"},{"type":"text","text":" "},{"type":"text","text":"value specified in the predicate. Use the "},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" operator to convert a key"},{"type":"text","text":" "},{"type":"text","text":"path or variable into a matching type:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast a value to a number, use ","type":"text"},{"type":"codeVoice","code":"CAST(key, 'NSNumber')"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast a value to a string, use "},{"type":"codeVoice","code":"CAST(key, 'NSString')"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"To cast a value to a color, use ","type":"text"},{"type":"codeVoice","code":"CAST(key, 'UIColor')"},{"type":"text","text":" on iOS and "},{"type":"codeVoice","code":"CAST(key, 'NSColor')"},{"type":"text","text":" on macOS."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast an ","type":"text"},{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" or "},{"type":"codeVoice","code":"UIColor"},{"text":" object to an array, use ","type":"text"},{"type":"codeVoice","code":"CAST(noindex(color), 'NSArray')"},{"type":"text","text":"."}]}]}]},{"inlineContent":[{"type":"text","text":"For details about the predicate format string syntax, consult the “Predicate"},{"type":"text","text":" "},{"type":"text","text":"Format String Syntax” chapter of the"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"reference","overridingTitle":"Predicate Programming Guide","overridingTitleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}],"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","isActive":true}]},{"text":" ","type":"text"},{"type":"text","text":"in Apple developer documentation."}],"type":"paragraph"},{"type":"heading","anchor":"Using-expressions-to-configure-layout-and-paint-attributes","text":"Using expressions to configure layout and paint attributes","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"An expression can contain subexpressions of various types. Each of the supported"},{"type":"text","text":" "},{"type":"text","text":"types of expressions is discussed below."}]},{"text":"Constant values","level":3,"anchor":"Constant-values","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A constant value can be of any of the following types:","type":"text"}]},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Objective-C"}]}],[{"inlineContent":[{"type":"text","text":"In Swift"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" (macOS)"},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" (iOS)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSString"}]}],[{"inlineContent":[{"type":"codeVoice","code":"String"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSString"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSArray<NSNumber>","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"[Float]","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"NSArray<NSString>","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"[String]"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSValue.CGVectorValue","type":"codeVoice"},{"type":"text","text":" (iOS)"},{"code":"NSValue","type":"codeVoice"},{"text":" containing ","type":"text"},{"type":"codeVoice","code":"CGVector"},{"text":" (macOS)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.cgVectorValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue"},{"text":" containing ","type":"text"},{"type":"codeVoice","code":"CGVector"},{"type":"text","text":" (macOS)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSValue.UIEdgeInsetsValue","type":"codeVoice"},{"text":" (iOS)","type":"text"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"type":"text","text":" (macOS)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.uiEdgeInsetsValue"},{"text":" (iOS)","type":"text"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"type":"text","text":" (macOS)"}]}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For literal floating-point values, use "},{"code":"-[NSNumber numberWithDouble:]","type":"codeVoice"},{"type":"text","text":" instead"},{"text":" ","type":"text"},{"type":"text","text":"of "},{"code":"-[NSNumber numberWithFloat:]","type":"codeVoice"},{"type":"text","text":" to avoid precision issues."}]},{"type":"heading","text":"Key paths","level":3,"anchor":"Key-paths"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A key path expression refers to an attribute of the "},{"type":"codeVoice","code":"MLNFeature"},{"text":" object being","type":"text"},{"type":"text","text":" "},{"text":"evaluated for display. For example, if a polygon’s ","type":"text"},{"code":"MLNFeature.attributes","type":"codeVoice"},{"type":"text","text":" "},{"text":"dictionary contains the ","type":"text"},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" key, then the key path "},{"code":"floorCount","type":"codeVoice"},{"type":"text","text":" refers"},{"type":"text","text":" "},{"text":"to the value of the ","type":"text"},{"type":"codeVoice","code":"floorCount"},{"text":" attribute when evaluating that particular","type":"text"},{"type":"text","text":" "},{"text":"polygon.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following special attributes are also available on features that are produced"},{"text":" ","type":"text"},{"type":"text","text":"as a result of clustering multiple point features together in a shape source:"}]},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attribute"}]}],[{"inlineContent":[{"type":"text","text":"Type"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Meaning"}]}]],[[{"inlineContent":[{"text":"cluster","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Bool"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"cluster_id"}]}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identifier for the point cluster."}]}]],[[{"inlineContent":[{"type":"text","text":"point_count"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of point features in a given cluster."}]}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some characters may not be used directly as part of a key path in a format"},{"type":"text","text":" "},{"text":"string. For example, if a feature’s attribute is named ","type":"text"},{"type":"codeVoice","code":"ISO 3166-1:2006"},{"type":"text","text":", an"},{"type":"text","text":" "},{"type":"text","text":"expression format string of "},{"code":"lowercase(ISO 3166-1:2006)","type":"codeVoice"},{"text":" or a predicate format","type":"text"},{"type":"text","text":" "},{"text":"string of ","type":"text"},{"type":"codeVoice","code":"ISO 3166-1:2006 == 'US-OH'"},{"text":" would raise an exception. Instead, use a","type":"text"},{"type":"text","text":" "},{"code":"%K","type":"codeVoice"},{"type":"text","text":" placeholder or the "},{"type":"codeVoice","code":"+[NSExpression expressionForKeyPath:]"},{"text":" initializer:","type":"text"}]},{"code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"],"syntax":"objc","type":"codeListing"},{"syntax":"swift","code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"],"type":"codeListing"},{"level":3,"type":"heading","text":"Functions","anchor":"Functions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","isActive":true},{"text":" ","type":"text"},{"text":"by the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","type":"reference","isActive":true},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"the following subset is supported in layer attribute values:","type":"text"}]},{"header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"Initializer parameter"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"average:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"average({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"sum:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"sum({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"count:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"count({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"min:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"min({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"max:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"max({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"add:to:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"1 + 2"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"from:subtract:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"2 - 1"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"multiply:by:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"1 * 2","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"divide:by:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 \/ 2"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:"}]}],[{"inlineContent":[{"code":"modulus:by:(1, 2)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"sqrt:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"sqrt(2)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"log:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"log(10)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ln:"}]}],[{"type":"paragraph","inlineContent":[{"code":"ln(2)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"raise:toPower:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"2 ** 2"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"exp:"}]}],[{"type":"paragraph","inlineContent":[{"code":"exp(0)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"ceiling:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ceiling(0.99999)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"abs:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"abs(-1)"}]}]],[[{"inlineContent":[{"code":"trunc:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"trunc(6378.1370)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"floor:"}]}],[{"inlineContent":[{"code":"floor(-0.99999)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"uppercase:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"uppercase('Elysian Fields')"}]}]],[[{"inlineContent":[{"code":"lowercase:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"lowercase('DOWNTOWN')","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"noindex:"}]}],[{"type":"paragraph","inlineContent":[{"code":"noindex(0 + 2 + c)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"length:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"length('Wapakoneta')","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"castObject:toType:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CAST(ele, 'NSString')"},{"type":"codeVoice","code":"CAST(ele, 'NSNumber')"}]}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"text":"A number of ","type":"text"},{"identifier":"#MapLibre-specific-functions","isActive":true,"type":"reference"},{"type":"text","text":" are also"},{"type":"text","text":" "},{"text":"available.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following predefined functions are ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"strong"},{"type":"text","text":" supported:"}]},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializer parameter"}]}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"median:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"median({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"mode:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"mode({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"stddev:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"stddev({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"random"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"random()"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"randomn:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"randomn(10)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"now"}]}],[{"inlineContent":[{"code":"now()","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:"}]}],[{"type":"paragraph","inlineContent":[{"code":"bitwiseAnd:with:(5, 3)","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"bitwiseOr:with:(5, 3)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"bitwiseXor:with:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:(5, 3)"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"leftshift:by:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"leftshift:by:(23, 1)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rightshift:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rightshift:by:(23, 1)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"onesComplement:"}]}],[{"type":"paragraph","inlineContent":[{"code":"onesComplement(255)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:(there, here)"}]}]]],"header":"row"},{"level":3,"type":"heading","anchor":"Conditionals","text":"Conditionals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conditionals are supported via the built-in"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"text":" ","type":"text"},{"type":"text","text":"method and "},{"type":"codeVoice","code":"TERNARY()"},{"type":"text","text":" operator. If you need to express multiple cases"},{"text":" ","type":"text"},{"type":"text","text":"(“else-if”), you can either nest a conditional within a conditional or use the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"#code-mgl_if-code"},{"type":"text","text":" or "},{"type":"reference","identifier":"#code-mgl_match-code","isActive":true},{"text":" function.","type":"text"}]},{"text":"Aggregates","anchor":"Aggregates","type":"heading","level":3},{"inlineContent":[{"text":"Aggregate expressions can contain arrays of expressions. In some cases, it is","type":"text"},{"text":" ","type":"text"},{"text":"possible to use the array itself instead of wrapping the array in an aggregate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression."}],"type":"paragraph"},{"type":"heading","level":3,"text":"Variables","anchor":"Variables"},{"inlineContent":[{"text":"The following variables are defined by this SDK for use with style layers:","type":"text"}],"type":"paragraph"},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Variable"}]}],[{"type":"paragraph","inlineContent":[{"text":"Type","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Meaning"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$featureIdentifier"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Any GeoJSON data type"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the "},{"code":"NSExpression.featureIdentifierVariableExpression","type":"codeVoice"},{"type":"text","text":" property."}]}]],[[{"type":"paragraph","inlineContent":[{"code":"$geometryType","type":"codeVoice"}]}],[{"inlineContent":[{"text":"String","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:"},{"type":"text","text":"*   "},{"type":"codeVoice","code":"Point"},{"text":" for point features, corresponding to the ","type":"text"},{"type":"codeVoice","code":"MLNPointAnnotation"},{"type":"text","text":" class"},{"text":"*   ","type":"text"},{"type":"codeVoice","code":"LineString"},{"text":" for polyline features, corresponding to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true},{"text":" class","type":"text"},{"type":"text","text":"*   "},{"code":"Polygon","type":"codeVoice"},{"type":"text","text":" for polygon features, corresponding to the "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true},{"text":" class","type":"text"},{"type":"text","text":"This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.geometryTypeVariableExpression"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"$heatmapDensity"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},{"type":"text","text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the "},{"code":"heatmapColor","type":"codeVoice"},{"text":" property. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.heatmapDensityVariableExpression"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$zoomLevel"}]}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the "},{"code":"NSExpression.zoomLevelVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$lineProgress"}]}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","type":"reference","isActive":true},{"text":" property. It corresponds to the ","type":"text"},{"code":"NSExpression.lineProgressVariableExpression","type":"codeVoice"},{"type":"text","text":" property."}]}]]],"header":"row"},{"inlineContent":[{"type":"text","text":"In addition to these variables, you can define your own variables and refer to"},{"type":"text","text":" "},{"type":"text","text":"them elsewhere in the expression. The syntax for defining a variable makes use"},{"type":"text","text":" "},{"type":"text","text":"of a "},{"isActive":true,"identifier":"#MapLibre-specific-functions","type":"reference","overridingTitle":"MapLibre-specific function","overridingTitleInlineContent":[{"text":"MapLibre-specific function","type":"text"}]},{"type":"text","text":" that takes an"},{"type":"text","text":" "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" as an argument:"}],"type":"paragraph"},{"type":"codeListing","code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"],"syntax":"objc"},{"syntax":"swift","code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"],"type":"codeListing"},{"type":"heading","anchor":"MapLibre-specific-functions","text":"MapLibre-specific functions","level":2},{"type":"aside","style":"warning","name":"Warning","content":[{"inlineContent":[{"text":"Due to a change in iOS 15.5, some of these stopped working. See ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},{"text":" for more information and workarounds.","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For compatibility with the MapLibre Style Spec, the following functions"},{"text":" ","type":"text"},{"text":"are defined by this SDK. When setting a style layer property, you can call these","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"functions just like the predefined functions above, using either the"},{"text":" ","type":"text"},{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"type":"text","text":" method or a convenient format"},{"text":" ","type":"text"},{"type":"text","text":"string syntax:"}]},{"text":"mgl_does:have:","anchor":"mgldoeshave","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:(SELF, '🧀🍔')"},{"type":"text","text":" or "},{"code":"mgl_does:have:(%@, '🧀🍔')","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns a Boolean value indicating whether the dictionary has a value for the"},{"type":"text","text":" "},{"text":"key or whether the evaluated object (","type":"text"},{"type":"codeVoice","code":"SELF"},{"type":"text","text":") has a value for the feature"},{"text":" ","type":"text"},{"text":"attribute. Compared to the ","type":"text"},{"type":"reference","identifier":"#code-mgl_has-code","isActive":true},{"text":" custom function,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that function’s target is instead passed in as the first argument to this"},{"text":" ","type":"text"},{"text":"function. Both functions are equivalent to the syntax ","type":"text"},{"type":"codeVoice","code":"key != NIL"},{"text":" or","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"%@[key] != NIL"},{"type":"text","text":" but can be used outside of a predicate."}],"type":"paragraph"},{"text":"mgl_interpolate:withCurveType:parameters:stops:","type":"heading","anchor":"mglinterpolatewithCurveTypeparametersstops","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)","type":"codeVoice"}]},{"inlineContent":[{"text":"Produces continuous, smooth results by interpolating between pairs of input and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"output values (“stops”). Compared to the"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"custom function, the input expression (that function’s target) is instead passed"},{"text":" ","type":"text"},{"text":"in as the first argument to this function.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"mgl_step:from:stops:","anchor":"mglstepfromstops"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_step:from:stops:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_step:from:stops:(x, 11, %@)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Produces discrete, stepped results by evaluating a piecewise-constant function"},{"text":" ","type":"text"},{"text":"defined by pairs of input and output values (“stops”). Compared to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_stepwithminimum-stops-code","isActive":true},{"type":"text","text":" custom"},{"type":"text","text":" "},{"text":"function, the input expression (that function’s target) is instead passed in as","type":"text"},{"text":" ","type":"text"},{"text":"the first argument to this function.","type":"text"}],"type":"paragraph"},{"text":"mgl_join:","level":3,"anchor":"mgljoin","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_join:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_join({'Old', 'MacDonald'})","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of concatenating together all the elements of an array in"},{"text":" ","type":"text"},{"text":"order. Compared to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"#code-stringbyappendingstring-code","type":"reference"},{"text":" custom","type":"text"},{"type":"text","text":" "},{"type":"text","text":"function, this function takes only one argument, which is an aggregate"},{"text":" ","type":"text"},{"type":"text","text":"expression containing the strings to concatenate."}]},{"anchor":"mglacos","level":3,"type":"heading","text":"mgl_acos:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_acos:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_acos(1)"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the arccosine of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","level":3,"text":"mgl_asin:","anchor":"mglasin"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_asin:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_asin(0)","type":"codeVoice"}]},{"inlineContent":[{"type":"text","text":"Returns the arcsine of the number."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"mgl_atan:","anchor":"mglatan","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_atan:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_atan(20)"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the arctangent of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mglcos","text":"mgl_cos:","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"mgl_cos:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_cos(0)"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the cosine of the number.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"mgl_log2:","anchor":"mgllog2"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_log2:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_log2(1024)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the base-2 logarithm of the number."}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"anchor":"mglround","type":"heading","text":"mgl_round:","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_round:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_round(1.5)"}]},{"inlineContent":[{"text":"Returns the number rounded to the nearest integer. If the number is halfway","type":"text"},{"type":"text","text":" "},{"type":"text","text":"between two integers, this function rounds it away from zero."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"level":3,"text":"mgl_sin:","type":"heading","anchor":"mglsin"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin(0)"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the sine of the number.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","text":"mgl_tan:","level":3,"anchor":"mgltan"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan(0)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the tangent of the number."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"mgl_distanceFrom:","anchor":"mgldistanceFrom","level":3,"type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_distanceFrom:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_distanceFrom(%@)","type":"codeVoice"},{"type":"text","text":" with an "},{"type":"codeVoice","code":"MLNShape"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the straight-line distance from the evaluated object to the given shape.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"anchor":"mglcoalesce","type":"heading","text":"mgl_coalesce:","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_coalesce:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_coalesce({x, y, z})"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the first non-"},{"type":"codeVoice","code":"nil"},{"text":" value from an array of expressions.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"text":"mgl_attributed:","type":"heading","anchor":"mglattributed","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_attributed:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_attributed({x, y, z})","type":"codeVoice"}]},{"inlineContent":[{"text":"Concatenates and returns the array of ","type":"text"},{"code":"MLNAttributedExpression","type":"codeVoice"},{"text":" objects, for use","type":"text"},{"type":"text","text":" "},{"text":"with the ","type":"text"},{"code":"MLNSymbolStyleLayer.text","type":"codeVoice"},{"text":" property.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"MLNAttributedExpression.attributes"},{"text":" valid attributes.","type":"text"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Key"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Value Type"}]}]],[[{"inlineContent":[{"code":"MLNFontNamesAttribute","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" evaluating to an "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" array."}]}]],[[{"type":"paragraph","inlineContent":[{"code":"MLNFontScaleAttribute","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"text":" evaluating to an ","type":"text"},{"type":"codeVoice","code":"NSNumber"},{"text":" value.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"MLNFontColorAttribute","type":"codeVoice"}]}],[{"inlineContent":[{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" (iOS) or "},{"code":"NSColor","type":"codeVoice"},{"text":" (macOS).","type":"text"}],"type":"paragraph"}]]]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"anchor":"MLNLET","text":"MLN_LET","level":3,"type":"heading"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_LET:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" Any number of variable names interspersed with their assigned"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSExpression"},{"text":" values, followed by an ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" "},{"text":"that may contain references to those variables.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of evaluating an expression with the given variable values."},{"text":" ","type":"text"},{"type":"text","text":"Compared to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-mgl_expressionwithcontext-code","isActive":true},{"text":" custom","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"function, this function takes the variable names and values inline before the"},{"type":"text","text":" "},{"text":"expression that contains references to those variables.","type":"text"}]},{"type":"heading","text":"MLN_MATCH","anchor":"MLNMATCH","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"MLN_MATCH:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" An input expression, then any number of argument pairs, followed by a default"},{"text":" ","type":"text"},{"type":"text","text":"expression. Each argument pair consists of a constant value followed by an"},{"text":" ","type":"text"},{"type":"text","text":"expression to produce as a result of matching that constant value."},{"type":"text","text":" "},{"type":"text","text":"If the input value is an aggregate expression, then any of the constant values within"},{"text":" ","type":"text"},{"type":"text","text":"that aggregate expression result in the following argument. This is shorthand for"},{"text":" ","type":"text"},{"type":"text","text":"specifying an argument pair for each of the constant values within that aggregate"},{"text":" ","type":"text"},{"text":"expression. It is not possible to match the aggregate expression itself.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of matching the input expression against the given constant"},{"type":"text","text":" "},{"text":"values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]","type":"codeVoice"},{"type":"text","text":" "},{"text":"method and the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"MLNIF","type":"heading","level":3,"text":"MLN_IF"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"MLN_IF:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" Alternating ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":" conditionals and resulting expressions,","type":"text"},{"text":" ","type":"text"},{"text":"followed by a default expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the first expression that meets the condition; otherwise, the default"},{"type":"text","text":" "},{"type":"text","text":"value. Unlike"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"type":"text","text":" or"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"TERNARY()","type":"codeVoice"},{"text":" syntax, this function can accept multiple “if else” conditions","type":"text"},{"type":"text","text":" "},{"text":"and is supported on iOS 8.","type":"text"},{"inlineContent":[{"text":"x","type":"text"}],"type":"emphasis"},{"type":"text","text":" and macOS 10.10."},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"text":"; however, each conditional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"passed into this function must be wrapped in a constant expression."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]"},{"text":" ","type":"text"},{"text":"method and the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"anchor":"MLNFUNCTION","level":3,"type":"heading","text":"MLN_FUNCTION"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_FUNCTION:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_FUNCTION('typeof', mystery)"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" Any arguments required by the expression operator."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"An expression exactly as defined by the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","type":"reference"},{"type":"text","text":"."}]},{"type":"heading","text":"Custom functions","anchor":"Custom-functions","level":2},{"inlineContent":[{"type":"text","text":"The following custom functions are also available with the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:selectorName:arguments:]"},{"text":" method or the","type":"text"},{"type":"text","text":" "},{"code":"FUNCTION()","type":"codeVoice"},{"text":" format string syntax.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Some of these functions are defined as methods on their respective target","type":"text"},{"type":"text","text":" "},{"type":"text","text":"classes, but you should not call them directly outside the context of an"},{"text":" ","type":"text"},{"text":"expression, because the result may differ from the evaluated expression’s result","type":"text"},{"type":"text","text":" "},{"text":"or may result in undefined behavior.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The MapLibre Style Spec defines some operators for which no custom"},{"type":"text","text":" "},{"type":"text","text":"function is available. To use these operators in an "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":", call the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_function-code"},{"type":"text","text":" function with the same arguments"},{"text":" ","type":"text"},{"text":"that the operator expects.","type":"text"}]},{"text":"boolValue","type":"heading","level":3,"anchor":"boolValue"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"boolValue"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(1, 'boolValue')"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a number or string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" None."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Boolean representation of the target: "},{"type":"codeVoice","code":"FALSE"},{"text":" when then input is an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"empty string, 0, "},{"code":"FALSE","type":"codeVoice"},{"type":"text","text":", "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"NaN"},{"text":", otherwise ","type":"text"},{"code":"TRUE","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"heading","text":"mgl_has:","level":3,"anchor":"mglhas"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_has:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to an "},{"type":"codeVoice","code":"NSDictionary"},{"text":" ","type":"text"},{"type":"text","text":"or the evaluated object ("},{"code":"SELF","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to an "},{"type":"codeVoice","code":"NSString"},{"text":" ","type":"text"},{"type":"text","text":"representing the key to look up in the dictionary or the feature attribute to"},{"text":" ","type":"text"},{"type":"text","text":"look up in the evaluated object (see "},{"type":"codeVoice","code":"MLNFeature.attributes"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"true"},{"text":" if the dictionary has a value for the key or if the evaluated","type":"text"},{"text":" ","type":"text"},{"text":"object has a value for the feature attribute.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"#code-mgl_does-have-code","type":"reference"},{"type":"text","text":" function, which is used on its own"},{"type":"text","text":" "},{"type":"text","text":"without the "},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator. You can also check whether an object has an","type":"text"},{"text":" ","type":"text"},{"text":"attribute by comparing the key path to ","type":"text"},{"type":"codeVoice","code":"NIL"},{"text":", for example ","type":"text"},{"type":"codeVoice","code":"cheeseburger != NIL"},{"type":"text","text":" "},{"text":"or ","type":"text"},{"code":"burger.cheese != NIL","type":"codeVoice"}]},{"type":"heading","level":3,"text":"mgl_expressionWithContext:","anchor":"mglexpressionWithContext"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_expressionWithContext:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)"},{"type":"text","text":" with"},{"text":" ","type":"text"},{"type":"text","text":"a dictionary containing "},{"type":"codeVoice","code":"ios"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"macos"},{"text":" keys","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that may contain references to the variables"},{"text":" ","type":"text"},{"type":"text","text":"defined in the context dictionary."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSDictionary"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"NSString"},{"type":"text","text":"s as keys and"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s as values. Each key is a variable name and each"},{"type":"text","text":" "},{"text":"value is the variable’s value within the target expression.","type":"text"}]},{"inlineContent":[{"text":"The target expression with variable subexpressions replaced with the values","type":"text"},{"text":" ","type":"text"},{"text":"defined in the context dictionary.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"identifier":"#code-mgl_let-code","type":"reference","isActive":true},{"text":" function, which is used on its own without the","type":"text"},{"type":"text","text":" "},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator.","type":"text"}]},{"level":3,"text":"mgl_interpolateWithCurveType:parameters:stops:","anchor":"mglinterpolateWithCurveTypeparametersstops","type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)"},{"text":" ","type":"text"},{"text":"with a dictionary containing zoom levels or other constant values as keys","type":"text"}]},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number and contains a"},{"text":" ","type":"text"},{"text":"variable or key path expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" The first argument is one of the following strings denoting curve types:"},{"text":" ","type":"text"},{"code":"linear","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"exponential"},{"text":", or ","type":"text"},{"code":"cubic-bezier","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The second argument is an expression providing parameters for the curve:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If the curve type is "},{"code":"linear","type":"codeVoice"},{"type":"text","text":", the argument is "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"exponential"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"type":"text","text":"expression that evaluates to a number, specifying the base of the"},{"type":"text","text":" "},{"type":"text","text":"exponential interpolation."}]}]},{"content":[{"inlineContent":[{"text":"If the curve type is ","type":"text"},{"type":"codeVoice","code":"cubic-bezier"},{"type":"text","text":", the argument is an"},{"text":" ","type":"text"},{"text":"array or aggregate expression containing four expressions, each","type":"text"},{"text":" ","type":"text"},{"text":"evaluating to a number. The four numbers are control points for the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"cubic Bézier curve."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"The third argument is an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" object representing the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"type":"text","text":" "},{"type":"text","text":"values."}]},{"type":"paragraph","inlineContent":[{"text":"A value interpolated along the continuous mathematical function defined by the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"arguments, with the target as the input to the function."}]},{"inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"type":"text","text":" "},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"type":"text","text":" "},{"text":"values may be constant values or ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" objects. For example, you can"},{"type":"text","text":" "},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"text":" ","type":"text"},{"type":"text","text":"yellow, orange, and red as the values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]"},{"type":"text","text":" "},{"text":"method and the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","isActive":true},{"type":"text","text":" "},{"type":"text","text":"function, which is used on its own without the "},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator.","type":"text"}]},{"text":"mgl_numberWithFallbackValues:","type":"heading","level":3,"anchor":"mglnumberWithFallbackValues"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"floatValue"},{"text":", or","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"decimalValue"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"text":"string.","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" Zero or more "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"type":"text","text":" "},{"type":"text","text":"or string."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A numeric representation of the target:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"If the target is ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}]}]},{"content":[{"inlineContent":[{"text":"If the target is a string, it is converted to a number as specified by the","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"floatValue"},{"type":"text","text":", or"},{"type":"text","text":" "},{"code":"decimalValue","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"type":"text","text":" "},{"text":"string.","type":"text"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"Zero or more "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"type":"text","text":" "},{"type":"text","text":"or string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A numeric representation of the target:"}]},{"items":[{"content":[{"inlineContent":[{"text":"If the target is ","type":"text"},{"code":"NIL","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"text":", the result is 0.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"},{"type":"text","text":" "},{"type":"text","text":"“"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","isActive":true,"type":"reference"},{"type":"text","text":"”"},{"type":"text","text":" "},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If multiple values are provided, each one is evaluated in order until the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"first successful conversion is obtained."}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"type":"text","text":" "},{"text":"number by passing the value and the string ","type":"text"},{"code":"NSNumber","type":"codeVoice"},{"type":"text","text":" into the "},{"code":"CAST()","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"operator."}],"type":"paragraph"},{"anchor":"mglstepWithMinimumstops","type":"heading","text":"mgl_stepWithMinimum:stops:","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)"},{"type":"text","text":" with"},{"text":" ","type":"text"},{"type":"text","text":"a dictionary with zoom levels or other constant values as keys"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number and contains a"},{"type":"text","text":" "},{"text":"variable or key path expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" ","type":"text"},{"text":"The first argument is an expression that evaluates to a number, specifying","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the minimum value in case the target is less than any of the stops in the"},{"type":"text","text":" "},{"text":"second argument.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The second argument is an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" object representing the"},{"type":"text","text":" "},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"text":" ","type":"text"},{"type":"text","text":"values."}]},{"inlineContent":[{"text":"The output value of the stop whose key is just less than the evaluated target,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or the minimum value if the target is less than the least of the stops’ keys."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"text":" ","type":"text"},{"text":"keys may be feature attribute values, zoom levels, or heatmap densities. The","type":"text"},{"type":"text","text":" "},{"text":"values may be constant values or ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" objects. For example, you can"},{"type":"text","text":" "},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"type":"text","text":" "},{"type":"text","text":"yellow, orange, and red as the values."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"stringByAppendingString","level":3,"text":"stringByAppendingString:","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"stringByAppendingString:"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a string."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"text":"One or more ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":"s, each evaluating to a string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The target string with each of the argument strings appended in order.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]"},{"text":" ","type":"text"},{"text":"method and is similar to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"type":"text","text":" "},{"identifier":"#code-mgl_join-code","isActive":true,"type":"reference"},{"type":"text","text":" function, which concatenates multiple"},{"text":" ","type":"text"},{"type":"text","text":"expressions and is used on its own without the "},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}]},{"type":"heading","level":3,"text":"stringValue","anchor":"stringValue"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"stringValue","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION(ele, 'stringValue')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"text":"string.","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" "},{"type":"text","text":"None."}],"type":"paragraph"},{"inlineContent":[{"text":"A string representation of the target:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"If the target is ","type":"text"},{"text":"NIL","type":"text"},{"type":"text","text":", the result is the empty string."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a Boolean value, the result is the string "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a number, it is converted to a string as specified by the"},{"text":" ","type":"text"},{"type":"text","text":"“"},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","isActive":true},{"text":"”","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a color, it is converted to a string of the form","type":"text"},{"text":" ","type":"text"},{"code":"rgba(r,g,b,a)","type":"codeVoice"},{"type":"text","text":", where "},{"type":"text","text":"r"},{"type":"text","text":", "},{"text":"g","type":"text"},{"text":", and ","type":"text"},{"text":"b","type":"text"},{"text":" are","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"numerals ranging from 0 to 255 and "},{"text":"a","type":"text"},{"text":" ranges from 0 to 1.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Otherwise, the target is converted to a string in the format specified by the"},{"text":" ","type":"text"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"function of the ECMAScript Language Specification."}]}]}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. You can also cast a value to a","type":"text"},{"type":"text","text":" "},{"text":"string by passing the value and the string ","type":"text"},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" into the "},{"code":"CAST()","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"operator."}],"type":"paragraph"}]}],"sections":[],"seeAlsoSections":[{"generated":true,"title":"Other Articles","identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"MapLibre"}],"title":"Predicates and expressions"},"identifier":{"interfaceLanguage":"occ","url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions"},"abstract":[{"text":"Using ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"text":" with MapLibre iOS","type":"text"}],"references":{"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"titleInlineContent":[{"type":"codeVoice","code":"tan"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","type":"link","title":"tan","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan"},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","title":"mgl_interpolateWithCurveType:parameters:stops:","type":"link","url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}]},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"titleInlineContent":[{"type":"codeVoice","code":"interpolate"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","type":"link","title":"interpolate","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","title":"NumberToString","type":"link","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","titleInlineContent":[{"type":"text","text":"NumberToString"}]},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","type":"link","titleInlineContent":[{"type":"text","text":"ToNumber Applied to the String Type"}],"title":"ToNumber Applied to the String Type","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type"},"#code-mgl_let-code":{"identifier":"#code-mgl_let-code","title":"MLN_LET","type":"link","url":"#code-mgl_let-code","titleInlineContent":[{"type":"codeVoice","code":"MLN_LET"}]},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","type":"link","titleInlineContent":[{"type":"codeVoice","code":"concat"}],"title":"concat","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"title":"MLNShapeSource","kind":"symbol","role":"symbol","fragments":[{"text":"MLNShapeSource","kind":"identifier"}],"url":"\/documentation\/maplibre\/mlnshapesource","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","abstract":[{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true},{"text":" is a map content source that supplies vector shapes to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"shown on the map. The shapes may be instances of "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true,"type":"reference"},{"type":"text","text":" or "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or they may be defined by local or external"},{"text":" ","type":"text"},{"type":"text","text":"GeoJSON"},{"text":" code. A shape source is added to an","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true},{"type":"text","text":" object along with an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle"},{"text":" object. The vector style","type":"text"},{"type":"text","text":" "},{"type":"text","text":"layer defines the appearance of any content supplied by the shape source. You"},{"type":"text","text":" "},{"text":"can update a shape source by setting its ","type":"text"},{"type":"codeVoice","code":"shape"},{"type":"text","text":" or "},{"type":"codeVoice","code":"URL"},{"text":" property.","type":"text"}],"type":"topic"},"#code-mgl_match-code":{"identifier":"#code-mgl_match-code","title":"MLN_MATCH()","type":"link","url":"#code-mgl_match-code","titleInlineContent":[{"type":"codeVoice","code":"MLN_MATCH()"}]},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"titleInlineContent":[{"type":"codeVoice","code":"to-string"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","type":"link","title":"to-string","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string"},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","title":"step","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","titleInlineContent":[{"type":"codeVoice","code":"step"}]},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","type":"link","titleInlineContent":[{"type":"codeVoice","code":"distance"}],"title":"distance","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","title":"+[NSExpression expressionForFunction:arguments:] method","type":"link","url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","titleInlineContent":[{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"type":"text","text":" method"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","role":"article","type":"topic","kind":"article","title":"Info.plist Keys","abstract":[{"text":"MapLibre Native for iOS supports custom ","type":"text"},{"code":"Info.plist","type":"codeVoice"},{"type":"text","text":" keys in your application in order to configure various settings."}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys"},"#code-mgl_has-code":{"titleInlineContent":[{"type":"codeVoice","code":"mgl_has:"}],"url":"#code-mgl_has-code","type":"link","title":"mgl_has:","identifier":"#code-mgl_has-code"},"#code-stringbyappendingstring-code":{"identifier":"#code-stringbyappendingstring-code","title":"stringByAppendingString:","type":"link","url":"#code-stringbyappendingstring-code","titleInlineContent":[{"type":"codeVoice","code":"stringByAppendingString:"}]},"https://maplibre.org/maplibre-style-spec/expressions/":{"titleInlineContent":[{"type":"text","text":"MapLibre Style Spec"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","type":"link","title":"MapLibre Style Spec","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/"},"#code-mgl_expressionwithcontext-code":{"identifier":"#code-mgl_expressionwithcontext-code","title":"mgl_expressionWithContext:","type":"link","url":"#code-mgl_expressionwithcontext-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_expressionWithContext:"}]},"https://github.com/maplibre/maplibre-native/issues/331":{"titleInlineContent":[{"type":"text","text":"#331"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","type":"link","title":"#331","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","title":"round","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","titleInlineContent":[{"type":"codeVoice","code":"round"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample","kind":"article","type":"topic","abstract":[{"text":"Adding images to the map and assigning them to POI types","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","title":"Adding Multiple Images","role":"article"},"#code-mgl_does-have-code":{"identifier":"#code-mgl_does-have-code","type":"link","titleInlineContent":[{"type":"codeVoice","code":"mgl_does:have:"}],"title":"mgl_does:have:","url":"#code-mgl_does-have-code"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","title":"has","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","titleInlineContent":[{"type":"codeVoice","code":"has"}]},"#code-mgl_stepwithminimum-stops-code":{"identifier":"#code-mgl_stepwithminimum-stops-code","type":"link","titleInlineContent":[{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}],"title":"mgl_stepWithMinimum:stops:","url":"#code-mgl_stepwithminimum-stops-code"},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","title":"cos","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","titleInlineContent":[{"type":"codeVoice","code":"cos"}]},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","type":"link","titleInlineContent":[{"type":"codeVoice","code":"acos"}],"title":"acos","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","title":"match","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","titleInlineContent":[{"type":"codeVoice","code":"match"}]},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}],"url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","type":"link","title":"mgl_interpolate:withCurveType:parameters:stops:","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code"},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","title":"atan","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","titleInlineContent":[{"type":"codeVoice","code":"atan"}]},"#code-mgl_function-code":{"titleInlineContent":[{"type":"codeVoice","code":"MLN_FUNCTION()"}],"url":"#code-mgl_function-code","type":"link","title":"MLN_FUNCTION()","identifier":"#code-mgl_function-code"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","title":"functions predefined","type":"link","url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","titleInlineContent":[{"type":"text","text":"functions predefined"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"role":"article","kind":"article","abstract":[{"text":"Using URL Templates when defining tile sources","type":"text"}],"url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates","title":"Tile URL Templates","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","type":"topic"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"link","titleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}],"title":"Predicate Programming Guide","url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html"},"https://tc39.github.io/ecma262/#sec-json.stringify":{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","title":"JSON.stringify()","type":"link","url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","titleInlineContent":[{"type":"codeVoice","code":"JSON.stringify()"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"role":"article","kind":"article","abstract":[],"url":"\/documentation\/maplibre-native-for-ios\/for_style_authors","title":"Information for Style Authors","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors","type":"topic"},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","type":"link","titleInlineContent":[{"type":"codeVoice","code":"sin"}],"title":"sin","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin"},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","title":"let","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","titleInlineContent":[{"type":"codeVoice","code":"let"}]},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"titleInlineContent":[{"type":"codeVoice","code":"format"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","type":"link","title":"format","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"type":"topic","abstract":[{"type":"text","text":"An "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline"},{"type":"text","text":" object represents a shape consisting of two or more vertices,"},{"text":" ","type":"text"},{"type":"text","text":"specified as "},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"text":" instances, and the line segments that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"connect them. For example, you could use an polyline to represent a road or the"},{"text":" ","type":"text"},{"type":"text","text":"path along which something moves."}],"url":"\/documentation\/maplibre\/mlnpolyline","title":"MLNPolyline","fragments":[{"kind":"identifier","text":"MLNPolyline"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","title":"to-number","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","titleInlineContent":[{"type":"codeVoice","code":"to-number"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient","role":"symbol","fragments":[{"text":"lineGradient","kind":"identifier"}],"type":"topic","kind":"symbol","title":"lineGradient","abstract":[{"text":"The color gradient with which the line will be drawn. This property only has an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"effect on lines defined by an "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference","isActive":true},{"text":" whose ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource"},{"text":" ","type":"text"},{"type":"text","text":"option is set to "},{"code":"YES","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient"},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","type":"link","titleInlineContent":[{"type":"codeVoice","code":"log2"}],"title":"log2","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","title":"coalesce","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","titleInlineContent":[{"type":"codeVoice","code":"coalesce"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"role":"article","kind":"article","abstract":[{"type":"text","text":"Learn how to work with gesture recognizers"}],"url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers","title":"User Interactions","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","type":"topic"},"#key-paths":{"titleInlineContent":[{"type":"text","text":"key paths"}],"url":"#key-paths","type":"link","title":"key paths","identifier":"#key-paths"},"#code-mgl_if-code":{"identifier":"#code-mgl_if-code","title":"MLN_IF()","type":"link","url":"#code-mgl_if-code","titleInlineContent":[{"type":"codeVoice","code":"MLN_IF()"}]},"#code-mgl_join-code":{"titleInlineContent":[{"type":"codeVoice","code":"mgl_join:"}],"url":"#code-mgl_join-code","type":"link","title":"mgl_join:","identifier":"#code-mgl_join-code"},"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","title":"kernel density estimation","type":"link","url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","titleInlineContent":[{"type":"text","text":"kernel density estimation"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"url":"\/documentation\/maplibre\/mlnpolygon","role":"symbol","fragments":[{"kind":"identifier","text":"MLNPolygon"}],"type":"topic","kind":"symbol","title":"MLNPolygon","abstract":[{"type":"text","text":"An "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","type":"reference","isActive":true},{"text":" object represents a closed shape consisting of four or more","type":"text"},{"type":"text","text":" "},{"type":"text","text":"vertices, specified as "},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"text":" instances, and the edges that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"connect them. For example, you could use a polygon shape to represent a"},{"type":"text","text":" "},{"type":"text","text":"building, a lake, or an area you want to highlight."}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon"},"#variables":{"titleInlineContent":[{"type":"text","text":"variables"}],"url":"#variables","type":"link","title":"variables","identifier":"#variables"},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","title":"case","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","titleInlineContent":[{"type":"codeVoice","code":"case"}]},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"titleInlineContent":[{"type":"codeVoice","code":"NSExpression+MLNAdditions.h"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","type":"link","title":"NSExpression+MLNAdditions.h","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h"},"#MapLibre-specific-functions":{"identifier":"#MapLibre-specific-functions","title":"MapLibre-specific functions","type":"link","url":"#MapLibre-specific-functions","titleInlineContent":[{"type":"text","text":"MapLibre-specific functions"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"role":"article","kind":"article","abstract":[{"text":"Using custom fonts","type":"text"}],"url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts","title":"Customizing Fonts","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","type":"topic"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"titleInlineContent":[{"type":"codeVoice","code":"asin"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","type":"link","title":"asin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},"doc://org.swift.MyProject/documentation/MapLibre":{"role":"collection","title":"MapLibre","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","kind":"symbol","abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}],"url":"\/documentation\/maplibre","type":"topic"},"#using-expressions-to-configure-layout-and-paint-attributes":{"identifier":"#using-expressions-to-configure-layout-and-paint-attributes","title":"inside an expression","type":"link","url":"#using-expressions-to-configure-layout-and-paint-attributes","titleInlineContent":[{"type":"text","text":"inside an expression"}]}}}