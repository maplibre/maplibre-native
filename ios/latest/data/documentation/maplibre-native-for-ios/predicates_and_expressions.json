{"metadata":{"modules":[{"name":"MapLibre"}],"title":"Predicates and expressions","roleHeading":"Article","role":"article"},"abstract":[{"type":"text","text":"Using "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" with MapLibre iOS"}],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"identifier":{"interfaceLanguage":"occ","url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions"},"sections":[],"primaryContentSections":[{"content":[{"inlineContent":[{"type":"text","text":"Style layers use predicates and expressions to determine what to display and how"},{"type":"text","text":" "},{"type":"text","text":"to format it. "},{"inlineContent":[{"type":"text","text":"Predicates"}],"type":"emphasis"},{"type":"text","text":" are represented by the same "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" class that"},{"type":"text","text":" "},{"type":"text","text":"filters results from Core Data or items in an "},{"type":"codeVoice","code":"NSArray"},{"type":"text","text":" in Objective-C."},{"text":" ","type":"text"},{"text":"Predicates are based on ","type":"text"},{"inlineContent":[{"text":"expressions","type":"text"}],"type":"emphasis"},{"text":", represented by the ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" class.","type":"text"},{"text":" ","type":"text"},{"text":"Somewhat unusually, style layers also use expressions on their own.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This document discusses the specific subset of the predicate and expression"},{"type":"text","text":" "},{"type":"text","text":"syntax supported by this SDK. For a more general introduction to predicates and"},{"type":"text","text":" "},{"type":"text","text":"expressions, consult the"},{"type":"text","text":" "},{"inlineContent":[{"isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"reference"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"in Apple developer documentation. For additional detail on how this SDK has"},{"type":"text","text":" "},{"type":"text","text":"extended the "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" class, see the "},{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","type":"reference","isActive":true},{"type":"text","text":" header."}],"type":"paragraph"},{"anchor":"Using-predicates-to-filter-vector-data","type":"heading","text":"Using predicates to filter vector data","level":2},{"inlineContent":[{"text":"Most style layer classes display ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"text":" objects that you can show or hide","type":"text"},{"text":" ","type":"text"},{"text":"based on the feature’s attributes. Use the ","type":"text"},{"code":"MLNVectorStyleLayer.predicate","type":"codeVoice"},{"text":" ","type":"text"},{"text":"property to include only the features in the source layer that satisfy a","type":"text"},{"text":" ","type":"text"},{"text":"condition that you define.","type":"text"}],"type":"paragraph"},{"anchor":"Operators","type":"heading","text":"Operators","level":3},{"inlineContent":[{"text":"The following comparison operators are supported:","type":"text"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key = value"},{"type":"codeVoice","code":"key == value"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSGreaterThanOrEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key >= value"},{"type":"codeVoice","code":"key => value"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSLessThanOrEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"key <= value","type":"codeVoice"},{"code":"key =< value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSGreaterThanPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key > value"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSLessThanPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key < value"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"key != value","type":"codeVoice"},{"code":"key <> value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSBetweenPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"key BETWEEN { 32, 212 }","type":"codeVoice"}]}]]],"header":"row","type":"table"},{"inlineContent":[{"type":"text","text":"To test whether a feature has or lacks a specific attribute, compare the"},{"type":"text","text":" "},{"type":"text","text":"attribute to "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":". Predicates created using the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSPredicate predicateWithValue:]"},{"type":"text","text":" method are also supported. String"},{"type":"text","text":" "},{"type":"text","text":"operators and custom operators are not supported."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following compound operators are supported:"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSCompoundPredicateType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAndPredicateType"}]}],[{"type":"paragraph","inlineContent":[{"code":"predicate1 AND predicate2","type":"codeVoice"},{"code":"predicate1 && predicate2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSOrPredicateType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"predicate1 OR predicate2"},{"type":"text","text":"predicate1 || predicate2"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotPredicateType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NOT predicate"},{"type":"codeVoice","code":"!predicate"}]}]]],"header":"row","type":"table"},{"inlineContent":[{"text":"The following aggregate operators are supported:","type":"text"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSInPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSContainsPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key","type":"codeVoice"}]}]]],"header":"row","type":"table"},{"inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"IN"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CONTAINS"},{"type":"text","text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature ("},{"type":"codeVoice","code":"SELF"},{"type":"text","text":") lies within a given "},{"type":"codeVoice","code":"MLNShape"},{"type":"text","text":" or "},{"type":"codeVoice","code":"MLNFeature"},{"type":"text","text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:"}],"type":"paragraph"},{"syntax":"objc","code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"],"type":"codeListing"},{"syntax":"swift","code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"],"type":"codeListing"},{"inlineContent":[{"text":"The following combinations of comparison operators and modifiers are supported:","type":"text"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateModifier"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSAllPredicateModifier","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ALL haystack != needle"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAnyPredicateModifier"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"ANY haystack = needle","type":"codeVoice"},{"code":"SOME haystack = needle","type":"codeVoice"}]}]]],"header":"row","type":"table"},{"inlineContent":[{"type":"text","text":"The following comparison predicate options are supported for comparison and"},{"type":"text","text":" "},{"type":"text","text":"aggregate operators that are used in the predicate:"}],"type":"paragraph"},{"rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateOptions"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSCaseInsensitivePredicateOption"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"'QUEBEC' =[c] 'Quebec'"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSDiacriticInsensitivePredicateOption","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"'Québec' =[d] 'Quebec'"}],"type":"paragraph"}]]],"header":"row","type":"table"},{"inlineContent":[{"text":"Other comparison predicate options are unsupported, namely ","type":"text"},{"code":"l","type":"codeVoice"},{"text":" ","type":"text"},{"text":"(for locale sensitivity) and ","type":"text"},{"code":"n","type":"codeVoice"},{"text":" (for normalization). A comparison is","type":"text"},{"text":" ","type":"text"},{"text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison","type":"text"},{"text":" ","type":"text"},{"text":"predicate options are not supported in conjunction with comparison modifiers","type":"text"},{"text":" ","type":"text"},{"text":"like ","type":"text"},{"type":"codeVoice","code":"ALL"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"ANY"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Operands","text":"Operands","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Operands in predicates can be ","type":"text"},{"isActive":true,"type":"reference","identifier":"#variables"},{"text":", ","type":"text"},{"isActive":true,"type":"reference","identifier":"#key-paths"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"or almost anything else that can appear","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"#using-expressions-to-configure-layout-and-paint-attributes"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Automatic type casting is not performed. Therefore, a feature only matches a"},{"type":"text","text":" "},{"type":"text","text":"predicate if its value for the attribute in question is of the same type as the"},{"type":"text","text":" "},{"type":"text","text":"value specified in the predicate. Use the "},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" operator to convert a key"},{"type":"text","text":" "},{"type":"text","text":"path or variable into a matching type:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast a value to a number, use "},{"type":"codeVoice","code":"CAST(key, 'NSNumber')"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"To cast a value to a string, use "},{"type":"codeVoice","code":"CAST(key, 'NSString')"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast a value to a color, use "},{"code":"CAST(key, 'UIColor')","type":"codeVoice"},{"type":"text","text":" on iOS and "},{"code":"CAST(key, 'NSColor')","type":"codeVoice"},{"type":"text","text":" on macOS."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast an ","type":"text"},{"code":"NSColor","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"UIColor","type":"codeVoice"},{"text":" object to an array, use ","type":"text"},{"code":"CAST(noindex(color), 'NSArray')","type":"codeVoice"},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"For details about the predicate format string syntax, consult the “Predicate","type":"text"},{"text":" ","type":"text"},{"text":"Format String Syntax” chapter of the","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","overridingTitle":"Predicate Programming Guide","overridingTitleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}]}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"in Apple developer documentation.","type":"text"}]},{"type":"heading","level":2,"text":"Using expressions to configure layout and paint attributes","anchor":"Using-expressions-to-configure-layout-and-paint-attributes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An expression can contain subexpressions of various types. Each of the supported"},{"type":"text","text":" "},{"type":"text","text":"types of expressions is discussed below."}]},{"type":"heading","level":3,"text":"Constant values","anchor":"Constant-values"},{"type":"paragraph","inlineContent":[{"text":"A constant value can be of any of the following types:","type":"text"}]},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"In Objective-C","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"In Swift","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)"},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" (iOS)"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSString"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSString","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNumber.doubleValue","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSArray<NSNumber>"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[Float]"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSArray<NSString>"}]}],[{"type":"paragraph","inlineContent":[{"code":"[String]","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.CGVectorValue"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue"},{"type":"text","text":" containing "},{"type":"codeVoice","code":"CGVector"},{"type":"text","text":" (macOS)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.cgVectorValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue"},{"text":" containing ","type":"text"},{"type":"codeVoice","code":"CGVector"},{"text":" (macOS)","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.UIEdgeInsetsValue"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"type":"text","text":" (macOS)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.uiEdgeInsetsValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"text":" (macOS)","type":"text"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For literal floating-point values, use "},{"type":"codeVoice","code":"-[NSNumber numberWithDouble:]"},{"type":"text","text":" instead"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"codeVoice","code":"-[NSNumber numberWithFloat:]"},{"type":"text","text":" to avoid precision issues."}]},{"type":"heading","level":3,"text":"Key paths","anchor":"Key-paths"},{"type":"paragraph","inlineContent":[{"text":"A key path expression refers to an attribute of the ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"text":" object being","type":"text"},{"text":" ","type":"text"},{"text":"evaluated for display. For example, if a polygon’s ","type":"text"},{"code":"MLNFeature.attributes","type":"codeVoice"},{"text":" ","type":"text"},{"text":"dictionary contains the ","type":"text"},{"code":"floorCount","type":"codeVoice"},{"text":" key, then the key path ","type":"text"},{"code":"floorCount","type":"codeVoice"},{"text":" refers","type":"text"},{"text":" ","type":"text"},{"text":"to the value of the ","type":"text"},{"code":"floorCount","type":"codeVoice"},{"text":" attribute when evaluating that particular","type":"text"},{"text":" ","type":"text"},{"text":"polygon.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following special attributes are also available on features that are produced","type":"text"},{"text":" ","type":"text"},{"text":"as a result of clustering multiple point features together in a shape source:","type":"text"}]},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"text":"Attribute","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Type","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Meaning"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"cluster"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Bool"}],"type":"paragraph"}],[{"inlineContent":[{"text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"cluster_id"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Identifier for the point cluster."}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"point_count","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"The number of point features in a given cluster."}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"text":"Some characters may not be used directly as part of a key path in a format","type":"text"},{"text":" ","type":"text"},{"text":"string. For example, if a feature’s attribute is named ","type":"text"},{"code":"ISO 3166-1:2006","type":"codeVoice"},{"text":", an","type":"text"},{"text":" ","type":"text"},{"text":"expression format string of ","type":"text"},{"code":"lowercase(ISO 3166-1:2006)","type":"codeVoice"},{"text":" or a predicate format","type":"text"},{"text":" ","type":"text"},{"text":"string of ","type":"text"},{"code":"ISO 3166-1:2006 == 'US-OH'","type":"codeVoice"},{"text":" would raise an exception. Instead, use a","type":"text"},{"text":" ","type":"text"},{"code":"%K","type":"codeVoice"},{"text":" placeholder or the ","type":"text"},{"code":"+[NSExpression expressionForKeyPath:]","type":"codeVoice"},{"text":" initializer:","type":"text"}]},{"type":"codeListing","code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"],"syntax":"objc"},{"type":"codeListing","code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"],"syntax":"swift"},{"type":"heading","level":3,"text":"Functions","anchor":"Functions"},{"type":"paragraph","inlineContent":[{"text":"Of the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"by the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"the following subset is supported in layer attribute values:","type":"text"}]},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"text":"Initializer parameter","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"average:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"average({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"sum:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sum({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"count:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"count({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"min:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"min({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"max:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"max({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"add:to:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 + 2"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"from:subtract:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"2 - 1","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"multiply:by:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"1 * 2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"divide:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 \/ 2"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:(1, 2)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt(2)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"log:"}]}],[{"type":"paragraph","inlineContent":[{"code":"log(10)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ln:"}]}],[{"type":"paragraph","inlineContent":[{"code":"ln(2)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"raise:toPower:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"2 ** 2"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"exp:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"exp(0)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ceiling:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ceiling(0.99999)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"abs:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"abs(-1)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"trunc:"}]}],[{"type":"paragraph","inlineContent":[{"code":"trunc(6378.1370)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"floor:"}]}],[{"type":"paragraph","inlineContent":[{"code":"floor(-0.99999)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"uppercase:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"uppercase('Elysian Fields')"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lowercase:"}]}],[{"type":"paragraph","inlineContent":[{"code":"lowercase('DOWNTOWN')","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"noindex:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"noindex(0 + 2 + c)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"length:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"length('Wapakoneta')"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"castObject:toType:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CAST(ele, 'NSString')"},{"type":"codeVoice","code":"CAST(ele, 'NSNumber')"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A number of "},{"isActive":true,"type":"reference","identifier":"#MapLibre-specific-functions"},{"type":"text","text":" are also"},{"type":"text","text":" "},{"type":"text","text":"available."}]},{"type":"paragraph","inlineContent":[{"text":"The following predefined functions are ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"strong"},{"text":" supported:","type":"text"}]},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"text":"Initializer parameter","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"median:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"median({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"mode:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"mode({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"stddev:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"stddev({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"random","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"random()"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"randomn:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"randomn(10)"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"now","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"now()"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:(5, 3)"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"bitwiseOr:with:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"bitwiseOr:with:(5, 3)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:(5, 3)"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"leftshift:by:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"leftshift:by:(23, 1)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"rightshift:by:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"rightshift:by:(23, 1)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"onesComplement:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"onesComplement(255)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:(there, here)"}],"type":"paragraph"}]]]},{"type":"heading","level":3,"text":"Conditionals","anchor":"Conditionals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conditionals are supported via the built-in"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"type":"text","text":" "},{"type":"text","text":"method and "},{"type":"codeVoice","code":"TERNARY()"},{"type":"text","text":" operator. If you need to express multiple cases"},{"type":"text","text":" "},{"type":"text","text":"(“else-if”), you can either nest a conditional within a conditional or use the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"#code-mgl_if-code"},{"type":"text","text":" or "},{"type":"reference","isActive":true,"identifier":"#code-mgl_match-code"},{"type":"text","text":" function."}]},{"type":"heading","level":3,"text":"Aggregates","anchor":"Aggregates"},{"type":"paragraph","inlineContent":[{"text":"Aggregate expressions can contain arrays of expressions. In some cases, it is","type":"text"},{"text":" ","type":"text"},{"text":"possible to use the array itself instead of wrapping the array in an aggregate","type":"text"},{"text":" ","type":"text"},{"text":"expression.","type":"text"}]},{"type":"heading","level":3,"text":"Variables","anchor":"Variables"},{"type":"paragraph","inlineContent":[{"text":"The following variables are defined by this SDK for use with style layers:","type":"text"}]},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"Variable"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Type"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Meaning"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"$featureIdentifier","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Any GeoJSON data type"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the "},{"code":"NSExpression.featureIdentifierVariableExpression","type":"codeVoice"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"$geometryType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"String"}],"type":"paragraph"}],[{"inlineContent":[{"text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:","type":"text"},{"text":"*   ","type":"text"},{"type":"codeVoice","code":"Point"},{"text":" for point features, corresponding to the ","type":"text"},{"type":"codeVoice","code":"MLNPointAnnotation"},{"text":" class","type":"text"},{"text":"*   ","type":"text"},{"type":"codeVoice","code":"LineString"},{"text":" for polyline features, corresponding to the ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true,"type":"reference"},{"text":" class","type":"text"},{"text":"*   ","type":"text"},{"type":"codeVoice","code":"Polygon"},{"text":" for polygon features, corresponding to the ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true,"type":"reference"},{"text":" class","type":"text"},{"text":"This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.geometryTypeVariableExpression"},{"text":" property.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"$heatmapDensity","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","isActive":true},{"type":"text","text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the "},{"type":"codeVoice","code":"heatmapColor"},{"type":"text","text":" property. This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.heatmapDensityVariableExpression"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"$zoomLevel"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the ","type":"text"},{"code":"NSExpression.zoomLevelVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"$lineProgress","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","type":"reference"},{"text":" property. It corresponds to the ","type":"text"},{"code":"NSExpression.lineProgressVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"text":"In addition to these variables, you can define your own variables and refer to","type":"text"},{"text":" ","type":"text"},{"text":"them elsewhere in the expression. The syntax for defining a variable makes use","type":"text"},{"text":" ","type":"text"},{"text":"of a ","type":"text"},{"overridingTitleInlineContent":[{"type":"text","text":"MapLibre-specific function"}],"identifier":"#MapLibre-specific-functions","type":"reference","isActive":true,"overridingTitle":"MapLibre-specific function"},{"text":" that takes an","type":"text"},{"text":" ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"text":" as an argument:","type":"text"}]},{"type":"codeListing","code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"],"syntax":"objc"},{"type":"codeListing","code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"],"syntax":"swift"},{"type":"heading","level":2,"text":"MapLibre-specific functions","anchor":"MapLibre-specific-functions"},{"type":"aside","name":"Warning","content":[{"inlineContent":[{"text":"Due to a change in iOS 15.5, some of these stopped working. See ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","isActive":true},{"text":" for more information and workarounds.","type":"text"}],"type":"paragraph"}],"style":"warning"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For compatibility with the MapLibre Style Spec, the following functions"},{"type":"text","text":" "},{"type":"text","text":"are defined by this SDK. When setting a style layer property, you can call these"},{"type":"text","text":" "},{"type":"text","text":"functions just like the predefined functions above, using either the"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"type":"text","text":" method or a convenient format"},{"type":"text","text":" "},{"type":"text","text":"string syntax:"}]},{"type":"heading","level":3,"text":"mgl_does:have:","anchor":"mgldoeshave"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:(SELF, '🧀🍔')"},{"type":"text","text":" or "},{"type":"codeVoice","code":"mgl_does:have:(%@, '🧀🍔')"}]},{"type":"paragraph","inlineContent":[{"text":"Returns a Boolean value indicating whether the dictionary has a value for the","type":"text"},{"text":" ","type":"text"},{"text":"key or whether the evaluated object (","type":"text"},{"code":"SELF","type":"codeVoice"},{"text":") has a value for the feature","type":"text"},{"text":" ","type":"text"},{"text":"attribute. Compared to the ","type":"text"},{"identifier":"#code-mgl_has-code","type":"reference","isActive":true},{"text":" custom function,","type":"text"},{"text":" ","type":"text"},{"text":"that function’s target is instead passed in as the first argument to this","type":"text"},{"text":" ","type":"text"},{"text":"function. Both functions are equivalent to the syntax ","type":"text"},{"code":"key != NIL","type":"codeVoice"},{"text":" or","type":"text"},{"text":" ","type":"text"},{"code":"%@[key] != NIL","type":"codeVoice"},{"text":" but can be used outside of a predicate.","type":"text"}]},{"level":3,"type":"heading","anchor":"mglinterpolatewithCurveTypeparametersstops","text":"mgl_interpolate:withCurveType:parameters:stops:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"Produces continuous, smooth results by interpolating between pairs of input and","type":"text"},{"text":" ","type":"text"},{"text":"output values (“stops”). Compared to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","type":"reference"},{"text":" ","type":"text"},{"text":"custom function, the input expression (that function’s target) is instead passed","type":"text"},{"text":" ","type":"text"},{"text":"in as the first argument to this function.","type":"text"}]},{"level":3,"type":"heading","anchor":"mglstepfromstops","text":"mgl_step:from:stops:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_step:from:stops:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_step:from:stops:(x, 11, %@)"}]},{"type":"paragraph","inlineContent":[{"text":"Produces discrete, stepped results by evaluating a piecewise-constant function","type":"text"},{"text":" ","type":"text"},{"text":"defined by pairs of input and output values (“stops”). Compared to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"#code-mgl_stepwithminimum-stops-code"},{"text":" custom","type":"text"},{"text":" ","type":"text"},{"text":"function, the input expression (that function’s target) is instead passed in as","type":"text"},{"text":" ","type":"text"},{"text":"the first argument to this function.","type":"text"}]},{"level":3,"type":"heading","anchor":"mgljoin","text":"mgl_join:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_join:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_join({'Old', 'MacDonald'})"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of concatenating together all the elements of an array in"},{"type":"text","text":" "},{"type":"text","text":"order. Compared to the"},{"type":"text","text":" "},{"identifier":"#code-stringbyappendingstring-code","type":"reference","isActive":true},{"type":"text","text":" custom"},{"type":"text","text":" "},{"type":"text","text":"function, this function takes only one argument, which is an aggregate"},{"type":"text","text":" "},{"type":"text","text":"expression containing the strings to concatenate."}]},{"level":3,"type":"heading","anchor":"mglacos","text":"mgl_acos:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_acos:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_acos(1)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the arccosine of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"type":"heading","anchor":"mglasin","text":"mgl_asin:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_asin:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_asin(0)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the arcsine of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"type":"heading","anchor":"mglatan","text":"mgl_atan:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_atan:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_atan(20)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the arctangent of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"type":"heading","anchor":"mglcos","text":"mgl_cos:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_cos:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_cos(0)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the cosine of the number."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"type":"heading","anchor":"mgllog2","text":"mgl_log2:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_log2:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_log2(1024)"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the base-2 logarithm of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"type":"heading","anchor":"mglround","text":"mgl_round:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_round:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_round(1.5)"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the number rounded to the nearest integer. If the number is halfway","type":"text"},{"text":" ","type":"text"},{"text":"between two integers, this function rounds it away from zero.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"type":"heading","anchor":"mglsin","text":"mgl_sin:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_sin(0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the sine of the number."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"type":"heading","anchor":"mgltan","text":"mgl_tan:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan(0)"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the tangent of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"type":"heading","anchor":"mgldistanceFrom","text":"mgl_distanceFrom:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_distanceFrom:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_distanceFrom(%@)","type":"codeVoice"},{"text":" with an ","type":"text"},{"code":"MLNShape","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the straight-line distance from the evaluated object to the given shape.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","level":3,"anchor":"mglcoalesce","text":"mgl_coalesce:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_coalesce:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_coalesce({x, y, z})"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the first non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" value from an array of expressions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","text":"mgl_attributed:","level":3,"anchor":"mglattributed"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_attributed:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_attributed({x, y, z})"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Concatenates and returns the array of "},{"type":"codeVoice","code":"MLNAttributedExpression"},{"type":"text","text":" objects, for use"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"MLNSymbolStyleLayer.text"},{"type":"text","text":" property."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNAttributedExpression.attributes"},{"type":"text","text":" valid attributes."}]},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Key"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Value Type"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontNamesAttribute"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" array."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontScaleAttribute"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"code":"NSNumber","type":"codeVoice"},{"type":"text","text":" value."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontColorAttribute"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS) or "},{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" (macOS)."}]}]]]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","text":"MLN_LET","level":3,"anchor":"MLNLET"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"MLN_LET:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" Any number of variable names interspersed with their assigned"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" values, followed by an "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" "},{"type":"text","text":"that may contain references to those variables."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of evaluating an expression with the given variable values."},{"type":"text","text":" "},{"type":"text","text":"Compared to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_expressionwithcontext-code"},{"type":"text","text":" custom"},{"type":"text","text":" "},{"type":"text","text":"function, this function takes the variable names and values inline before the"},{"type":"text","text":" "},{"type":"text","text":"expression that contains references to those variables."}]},{"type":"heading","text":"MLN_MATCH","level":3,"anchor":"MLNMATCH"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"MLN_MATCH:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" An input expression, then any number of argument pairs, followed by a default"},{"type":"text","text":" "},{"type":"text","text":"expression. Each argument pair consists of a constant value followed by an"},{"type":"text","text":" "},{"type":"text","text":"expression to produce as a result of matching that constant value."},{"type":"text","text":" "},{"type":"text","text":"If the input value is an aggregate expression, then any of the constant values within"},{"type":"text","text":" "},{"type":"text","text":"that aggregate expression result in the following argument. This is shorthand for"},{"type":"text","text":" "},{"type":"text","text":"specifying an argument pair for each of the constant values within that aggregate"},{"type":"text","text":" "},{"type":"text","text":"expression. It is not possible to match the aggregate expression itself."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of matching the input expression against the given constant"},{"type":"text","text":" "},{"type":"text","text":"values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","text":"MLN_IF","level":3,"anchor":"MLNIF"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_IF:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" Alternating ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":" conditionals and resulting expressions,","type":"text"},{"text":" ","type":"text"},{"text":"followed by a default expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the first expression that meets the condition; otherwise, the default"},{"type":"text","text":" "},{"type":"text","text":"value. Unlike"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]","type":"codeVoice"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"TERNARY()","type":"codeVoice"},{"type":"text","text":" syntax, this function can accept multiple “if else” conditions"},{"type":"text","text":" "},{"type":"text","text":"and is supported on iOS 8."},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"type":"text","text":" and macOS 10.10."},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"type":"text","text":"; however, each conditional"},{"type":"text","text":" "},{"type":"text","text":"passed into this function must be wrapped in a constant expression."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]","type":"codeVoice"},{"text":" ","type":"text"},{"text":"method and the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","text":"MLN_FUNCTION","level":3,"anchor":"MLNFUNCTION"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_FUNCTION:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_FUNCTION('typeof', mystery)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" Any arguments required by the expression operator."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An expression exactly as defined by the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","isActive":true},{"type":"text","text":"."}]},{"type":"heading","text":"Custom functions","level":2,"anchor":"Custom-functions"},{"type":"paragraph","inlineContent":[{"text":"The following custom functions are also available with the","type":"text"},{"text":" ","type":"text"},{"code":"+[NSExpression expressionForFunction:selectorName:arguments:]","type":"codeVoice"},{"text":" method or the","type":"text"},{"text":" ","type":"text"},{"code":"FUNCTION()","type":"codeVoice"},{"text":" format string syntax.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some of these functions are defined as methods on their respective target"},{"type":"text","text":" "},{"type":"text","text":"classes, but you should not call them directly outside the context of an"},{"type":"text","text":" "},{"type":"text","text":"expression, because the result may differ from the evaluated expression’s result"},{"type":"text","text":" "},{"type":"text","text":"or may result in undefined behavior."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The MapLibre Style Spec defines some operators for which no custom"},{"type":"text","text":" "},{"type":"text","text":"function is available. To use these operators in an "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":", call the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"#code-mgl_function-code"},{"type":"text","text":" function with the same arguments"},{"type":"text","text":" "},{"type":"text","text":"that the operator expects."}]},{"type":"heading","text":"boolValue","level":3,"anchor":"boolValue"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"boolValue","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(1, 'boolValue')"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a number or string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" None."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Boolean representation of the target: "},{"code":"FALSE","type":"codeVoice"},{"type":"text","text":" when then input is an"},{"type":"text","text":" "},{"type":"text","text":"empty string, 0, "},{"code":"FALSE","type":"codeVoice"},{"type":"text","text":", "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":", or "},{"code":"NaN","type":"codeVoice"},{"type":"text","text":", otherwise "},{"code":"TRUE","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"heading","text":"mgl_has:","level":3,"anchor":"mglhas"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_has:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to an "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"or the evaluated object ("},{"code":"SELF","type":"codeVoice"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to an "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"representing the key to look up in the dictionary or the feature attribute to"},{"type":"text","text":" "},{"type":"text","text":"look up in the evaluated object (see "},{"code":"MLNFeature.attributes","type":"codeVoice"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"true"},{"text":" if the dictionary has a value for the key or if the evaluated","type":"text"},{"text":" ","type":"text"},{"text":"object has a value for the feature attribute.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"#code-mgl_does-have-code"},{"type":"text","text":" function, which is used on its own"},{"type":"text","text":" "},{"type":"text","text":"without the "},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator. You can also check whether an object has an"},{"type":"text","text":" "},{"type":"text","text":"attribute by comparing the key path to "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":", for example "},{"code":"cheeseburger != NIL","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"or "},{"code":"burger.cheese != NIL","type":"codeVoice"}]},{"type":"heading","text":"mgl_expressionWithContext:","level":3,"anchor":"mglexpressionWithContext"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_expressionWithContext:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)"},{"type":"text","text":" with"},{"type":"text","text":" "},{"type":"text","text":"a dictionary containing "},{"type":"codeVoice","code":"ios"},{"type":"text","text":" and "},{"type":"codeVoice","code":"macos"},{"type":"text","text":" keys"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" that may contain references to the variables","type":"text"},{"text":" ","type":"text"},{"text":"defined in the context dictionary.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" with "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":"s as keys and"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s as values. Each key is a variable name and each"},{"type":"text","text":" "},{"type":"text","text":"value is the variable’s value within the target expression."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The target expression with variable subexpressions replaced with the values"},{"text":" ","type":"text"},{"text":"defined in the context dictionary.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_let-code","isActive":true},{"type":"text","text":" function, which is used on its own without the"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}]},{"type":"heading","text":"mgl_interpolateWithCurveType:parameters:stops:","level":3,"anchor":"mglinterpolateWithCurveTypeparametersstops"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_interpolateWithCurveType:parameters:stops:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)","type":"codeVoice"},{"text":" ","type":"text"},{"text":"with a dictionary containing zoom levels or other constant values as keys","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a number and contains a","type":"text"},{"text":" ","type":"text"},{"text":"variable or key path expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" The first argument is one of the following strings denoting curve types:","type":"text"},{"text":" ","type":"text"},{"code":"linear","type":"codeVoice"},{"text":", ","type":"text"},{"code":"exponential","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"cubic-bezier","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The second argument is an expression providing parameters for the curve:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the curve type is ","type":"text"},{"code":"linear","type":"codeVoice"},{"text":", the argument is ","type":"text"},{"code":"NIL","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"If the curve type is ","type":"text"},{"type":"codeVoice","code":"exponential"},{"text":", the argument is an","type":"text"},{"text":" ","type":"text"},{"text":"expression that evaluates to a number, specifying the base of the","type":"text"},{"text":" ","type":"text"},{"text":"exponential interpolation.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the curve type is ","type":"text"},{"type":"codeVoice","code":"cubic-bezier"},{"text":", the argument is an","type":"text"},{"text":" ","type":"text"},{"text":"array or aggregate expression containing four expressions, each","type":"text"},{"text":" ","type":"text"},{"text":"evaluating to a number. The four numbers are control points for the","type":"text"},{"text":" ","type":"text"},{"text":"cubic Bézier curve.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The third argument is an "},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" object representing the"},{"type":"text","text":" "},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"type":"text","text":" "},{"type":"text","text":"values."}]},{"type":"paragraph","inlineContent":[{"text":"A value interpolated along the continuous mathematical function defined by the","type":"text"},{"text":" ","type":"text"},{"text":"arguments, with the target as the input to the function.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The input expression is matched against the keys in the stop dictionary. The","type":"text"},{"text":" ","type":"text"},{"text":"keys may be feature attribute values, zoom levels, or heatmap densities. The","type":"text"},{"text":" ","type":"text"},{"text":"values may be constant values or ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" objects. For example, you can","type":"text"},{"text":" ","type":"text"},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"text":" ","type":"text"},{"text":"yellow, orange, and red as the values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code"},{"type":"text","text":" "},{"type":"text","text":"function, which is used on its own without the "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}]},{"level":3,"anchor":"mglnumberWithFallbackValues","type":"heading","text":"mgl_numberWithFallbackValues:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"doubleValue","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"floatValue","type":"codeVoice"},{"text":", or","type":"text"},{"text":" ","type":"text"},{"code":"decimalValue","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"type":"text","text":"string."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" Zero or more ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":"s, each evaluating to a Boolean value","type":"text"},{"text":" ","type":"text"},{"text":"or string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A numeric representation of the target:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"doubleValue","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"floatValue","type":"codeVoice"},{"type":"text","text":", or"},{"type":"text","text":" "},{"type":"codeVoice","code":"decimalValue"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"type":"text","text":"string."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"Zero or more "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"type":"text","text":" "},{"type":"text","text":"or string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A numeric representation of the target:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a string, it is converted to a number as specified by the","type":"text"},{"text":" ","type":"text"},{"text":"“","type":"text"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","isActive":true,"type":"reference"},{"text":"”","type":"text"},{"text":" ","type":"text"},{"text":"algorithm of the ECMAScript Language Specification.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"If multiple values are provided, each one is evaluated in order until the","type":"text"},{"text":" ","type":"text"},{"text":"first successful conversion is obtained.","type":"text"}],"type":"paragraph"}]}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"type":"text","text":" "},{"type":"text","text":"number by passing the value and the string "},{"type":"codeVoice","code":"NSNumber"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" "},{"type":"text","text":"operator."}]},{"level":3,"anchor":"mglstepWithMinimumstops","type":"heading","text":"mgl_stepWithMinimum:stops:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)"},{"type":"text","text":" with"},{"type":"text","text":" "},{"type":"text","text":"a dictionary with zoom levels or other constant values as keys"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number and contains a"},{"type":"text","text":" "},{"type":"text","text":"variable or key path expression."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" "},{"type":"text","text":"The first argument is an expression that evaluates to a number, specifying"},{"type":"text","text":" "},{"type":"text","text":"the minimum value in case the target is less than any of the stops in the"},{"type":"text","text":" "},{"type":"text","text":"second argument."}]},{"type":"paragraph","inlineContent":[{"text":"The second argument is an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" object representing the","type":"text"},{"text":" ","type":"text"},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"text":" ","type":"text"},{"text":"values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The output value of the stop whose key is just less than the evaluated target,"},{"type":"text","text":" "},{"type":"text","text":"or the minimum value if the target is less than the least of the stops’ keys."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"type":"text","text":" "},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"type":"text","text":" "},{"type":"text","text":"values may be constant values or "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" objects. For example, you can"},{"type":"text","text":" "},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"type":"text","text":" "},{"type":"text","text":"yellow, orange, and red as the values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]","type":"codeVoice"},{"text":" ","type":"text"},{"text":"method and the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"anchor":"stringByAppendingString","type":"heading","text":"stringByAppendingString:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"stringByAppendingString:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"One or more "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a string."}]},{"type":"paragraph","inlineContent":[{"text":"The target string with each of the argument strings appended in order.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]"},{"type":"text","text":" "},{"type":"text","text":"method and is similar to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_join-code","isActive":true},{"type":"text","text":" function, which concatenates multiple"},{"type":"text","text":" "},{"type":"text","text":"expressions and is used on its own without the "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}]},{"level":3,"anchor":"stringValue","type":"heading","text":"stringValue"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"stringValue"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION(ele, 'stringValue')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"type":"text","text":"string."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" ","type":"text"},{"text":"None.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A string representation of the target:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is ","type":"text"},{"text":"NIL","type":"text"},{"text":", the result is the empty string.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a Boolean value, the result is the string ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a number, it is converted to a string as specified by the"},{"type":"text","text":" "},{"type":"text","text":"“"},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","isActive":true},{"type":"text","text":"”"},{"type":"text","text":" "},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is a color, it is converted to a string of the form"},{"type":"text","text":" "},{"type":"codeVoice","code":"rgba(r,g,b,a)"},{"type":"text","text":", where "},{"type":"text","text":"r"},{"type":"text","text":", "},{"type":"text","text":"g"},{"type":"text","text":", and "},{"type":"text","text":"b"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"text","text":"numerals ranging from 0 to 255 and "},{"type":"text","text":"a"},{"type":"text","text":" ranges from 0 to 1."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Otherwise, the target is converted to a string in the format specified by the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"function of the ECMAScript Language Specification.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"type":"text","text":" "},{"type":"text","text":"string by passing the value and the string "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" "},{"type":"text","text":"operator."}]}],"kind":"content"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"],"traits":[{"interfaceLanguage":"occ"}]}],"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"],"title":"Other Articles","generated":true,"anchor":"Other-Articles"}],"references":{"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"title":"kernel density estimation","type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","titleInlineContent":[{"type":"text","text":"kernel density estimation"}],"url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},"#using-expressions-to-configure-layout-and-paint-attributes":{"title":"inside an expression","type":"link","identifier":"#using-expressions-to-configure-layout-and-paint-attributes","titleInlineContent":[{"type":"text","text":"inside an expression"}],"url":"#using-expressions-to-configure-layout-and-paint-attributes"},"#variables":{"title":"variables","type":"link","identifier":"#variables","titleInlineContent":[{"type":"text","text":"variables"}],"url":"#variables"},"#MapLibre-specific-functions":{"title":"MapLibre-specific functions","type":"link","identifier":"#MapLibre-specific-functions","titleInlineContent":[{"type":"text","text":"MapLibre-specific functions"}],"url":"#MapLibre-specific-functions"},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"title":"mgl_interpolate:withCurveType:parameters:stops:","type":"link","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}],"url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code"},"#code-mgl_join-code":{"title":"mgl_join:","type":"link","identifier":"#code-mgl_join-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_join:"}],"url":"#code-mgl_join-code"},"#code-mgl_match-code":{"title":"MLN_MATCH()","type":"link","identifier":"#code-mgl_match-code","titleInlineContent":[{"type":"codeVoice","code":"MLN_MATCH()"}],"url":"#code-mgl_match-code"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"abstract":[{"type":"text","text":"Learn how to work with gesture recognizers"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","title":"User Interactions","url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers","role":"article","kind":"article","type":"topic"},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"title":"concat","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","titleInlineContent":[{"type":"codeVoice","code":"concat"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"title":"log2","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","titleInlineContent":[{"code":"log2","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"title":"format","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","titleInlineContent":[{"type":"codeVoice","code":"format"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format"},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"title":"cos","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","titleInlineContent":[{"code":"cos","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"title":"ToNumber Applied to the String Type","type":"link","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","titleInlineContent":[{"text":"ToNumber Applied to the String Type","type":"text"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"abstract":[{"text":"Using URL Templates when defining tile sources","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","title":"Tile URL Templates","url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates","role":"article","kind":"article","type":"topic"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"type":"link","title":"functions predefined","titleInlineContent":[{"type":"text","text":"functions predefined"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"title":"MLNPolygon","url":"\/documentation\/maplibre\/mlnpolygon","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","role":"symbol","abstract":[{"type":"text","text":"An "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true},{"type":"text","text":" object represents a closed shape consisting of four or more"},{"type":"text","text":" "},{"type":"text","text":"vertices, specified as "},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"type":"text","text":" instances, and the edges that"},{"type":"text","text":" "},{"type":"text","text":"connect them. For example, you could use a polygon shape to represent a"},{"type":"text","text":" "},{"type":"text","text":"building, a lake, or an area you want to highlight."}],"type":"topic","fragments":[{"kind":"identifier","text":"MLNPolygon"}],"kind":"symbol"},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"type":"link","title":"match","titleInlineContent":[{"code":"match","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match"},"https://github.com/maplibre/maplibre-native/issues/331":{"type":"link","title":"#331","titleInlineContent":[{"type":"text","text":"#331"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"type":"link","title":"interpolate","titleInlineContent":[{"code":"interpolate","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"abstract":[],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors","title":"Information for Style Authors","url":"\/documentation\/maplibre-native-for-ios\/for_style_authors","role":"article","kind":"article","type":"topic"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"type":"topic","abstract":[{"text":"Using custom fonts","type":"text"}],"role":"article","kind":"article","title":"Customizing Fonts","url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts"},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"title":"step","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","titleInlineContent":[{"type":"codeVoice","code":"step"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"url":"\/documentation\/maplibre\/mlnshapesource","title":"MLNShapeSource","abstract":[{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true,"type":"reference"},{"text":" is a map content source that supplies vector shapes to be","type":"text"},{"text":" ","type":"text"},{"text":"shown on the map. The shapes may be instances of ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"or they may be defined by local or external","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"GeoJSON"},{"type":"text","text":" code. A shape source is added to an"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true},{"type":"text","text":" object along with an "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true},{"type":"text","text":" object. The vector style"},{"type":"text","text":" "},{"type":"text","text":"layer defines the appearance of any content supplied by the shape source. You"},{"type":"text","text":" "},{"type":"text","text":"can update a shape source by setting its "},{"type":"codeVoice","code":"shape"},{"type":"text","text":" or "},{"type":"codeVoice","code":"URL"},{"type":"text","text":" property."}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"topic","role":"symbol","fragments":[{"kind":"identifier","text":"MLNShapeSource"}],"kind":"symbol"},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","titleInlineContent":[{"type":"codeVoice","code":"coalesce"}],"title":"coalesce"},"#code-mgl_expressionwithcontext-code":{"title":"mgl_expressionWithContext:","type":"link","identifier":"#code-mgl_expressionwithcontext-code","url":"#code-mgl_expressionwithcontext-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_expressionWithContext:"}]},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","type":"link","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"title":"mgl_interpolateWithCurveType:parameters:stops:"},"#key-paths":{"title":"key paths","type":"link","identifier":"#key-paths","url":"#key-paths","titleInlineContent":[{"text":"key paths","type":"text"}]},"#code-mgl_stepwithminimum-stops-code":{"url":"#code-mgl_stepwithminimum-stops-code","type":"link","identifier":"#code-mgl_stepwithminimum-stops-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}],"title":"mgl_stepWithMinimum:stops:"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","type":"topic","role":"symbol","title":"MLNPolyline","url":"\/documentation\/maplibre\/mlnpolyline","abstract":[{"text":"An ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true,"type":"reference"},{"text":" object represents a shape consisting of two or more vertices,","type":"text"},{"text":" ","type":"text"},{"text":"specified as ","type":"text"},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"text":" instances, and the line segments that","type":"text"},{"text":" ","type":"text"},{"text":"connect them. For example, you could use an polyline to represent a road or the","type":"text"},{"text":" ","type":"text"},{"text":"path along which something moves.","type":"text"}],"fragments":[{"kind":"identifier","text":"MLNPolyline"}]},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"title":"atan","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","titleInlineContent":[{"type":"codeVoice","code":"atan"}]},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","titleInlineContent":[{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"text":" method","type":"text"}],"title":"+[NSExpression expressionForFunction:arguments:] method"},"doc://org.swift.MyProject/documentation/MapLibre":{"abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","title":"MapLibre","kind":"symbol","type":"topic","role":"collection","url":"\/documentation\/maplibre"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"title":"has","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","titleInlineContent":[{"type":"codeVoice","code":"has"}]},"#code-stringbyappendingstring-code":{"url":"#code-stringbyappendingstring-code","type":"link","identifier":"#code-stringbyappendingstring-code","titleInlineContent":[{"type":"codeVoice","code":"stringByAppendingString:"}],"title":"stringByAppendingString:"},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"title":"round","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","titleInlineContent":[{"type":"codeVoice","code":"round"}]},"https://maplibre.org/maplibre-style-spec/expressions/":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","titleInlineContent":[{"text":"MapLibre Style Spec","type":"text"}],"title":"MapLibre Style Spec"},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"title":"NumberToString","type":"link","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","titleInlineContent":[{"text":"NumberToString","type":"text"}]},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","titleInlineContent":[{"type":"codeVoice","code":"sin"}],"title":"sin"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","role":"article","abstract":[{"text":"Adding images to the map and assigning them to POI types","type":"text"}],"kind":"article","url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample","title":"Adding Multiple Images","type":"topic"},"https://tc39.github.io/ecma262/#sec-json.stringify":{"url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","type":"link","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","titleInlineContent":[{"code":"JSON.stringify()","type":"codeVoice"}],"title":"JSON.stringify()"},"#code-mgl_function-code":{"identifier":"#code-mgl_function-code","titleInlineContent":[{"code":"MLN_FUNCTION()","type":"codeVoice"}],"title":"MLN_FUNCTION()","type":"link","url":"#code-mgl_function-code"},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","titleInlineContent":[{"code":"acos","type":"codeVoice"}],"title":"acos"},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","titleInlineContent":[{"code":"case","type":"codeVoice"}],"title":"case","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case"},"#code-mgl_has-code":{"url":"#code-mgl_has-code","type":"link","identifier":"#code-mgl_has-code","titleInlineContent":[{"code":"mgl_has:","type":"codeVoice"}],"title":"mgl_has:"},"#code-mgl_if-code":{"identifier":"#code-mgl_if-code","titleInlineContent":[{"code":"MLN_IF()","type":"codeVoice"}],"title":"MLN_IF()","type":"link","url":"#code-mgl_if-code"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","titleInlineContent":[{"code":"to-number","type":"codeVoice"}],"title":"to-number"},"#code-mgl_let-code":{"identifier":"#code-mgl_let-code","titleInlineContent":[{"code":"MLN_LET","type":"codeVoice"}],"title":"MLN_LET","type":"link","url":"#code-mgl_let-code"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","titleInlineContent":[{"code":"asin","type":"codeVoice"}],"title":"asin"},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","titleInlineContent":[{"code":"NSExpression+MLNAdditions.h","type":"codeVoice"}],"title":"NSExpression+MLNAdditions.h","type":"link","url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h"},"#code-mgl_does-have-code":{"url":"#code-mgl_does-have-code","type":"link","identifier":"#code-mgl_does-have-code","titleInlineContent":[{"code":"mgl_does:have:","type":"codeVoice"}],"title":"mgl_does:have:"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"kind":"symbol","type":"topic","fragments":[{"text":"lineGradient","kind":"identifier"}],"title":"lineGradient","role":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient","abstract":[{"text":"The color gradient with which the line will be drawn. This property only has an","type":"text"},{"text":" ","type":"text"},{"text":"effect on lines defined by an ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference","isActive":true},{"text":" whose ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"option is set to ","type":"text"},{"code":"YES","type":"codeVoice"},{"text":".","type":"text"}]},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","titleInlineContent":[{"code":"let","type":"codeVoice"}],"title":"let"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"title":"Info.plist Keys","type":"topic","kind":"article","url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","role":"article","abstract":[{"type":"text","text":"MapLibre Native for iOS supports custom "},{"type":"codeVoice","code":"Info.plist"},{"type":"text","text":" keys in your application in order to configure various settings."}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","titleInlineContent":[{"type":"codeVoice","code":"to-string"}],"title":"to-string"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"type":"link","title":"Predicate Programming Guide","url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","titleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}]},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","titleInlineContent":[{"type":"codeVoice","code":"tan"}],"title":"tan"},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"type":"link","title":"distance","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","titleInlineContent":[{"type":"codeVoice","code":"distance"}]}}}