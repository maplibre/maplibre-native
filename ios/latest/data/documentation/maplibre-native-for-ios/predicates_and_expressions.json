{"identifier":{"interfaceLanguage":"occ","url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions"},"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"Using ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"text":" with MapLibre iOS","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"]}],"kind":"article","sections":[],"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"text","text":"Style layers use predicates and expressions to determine what to display and how"},{"type":"text","text":" "},{"type":"text","text":"to format it. "},{"type":"emphasis","inlineContent":[{"text":"Predicates","type":"text"}]},{"text":" are represented by the same ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"text":" class that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"filters results from Core Data or items in an "},{"type":"codeVoice","code":"NSArray"},{"type":"text","text":" in Objective-C."},{"type":"text","text":" "},{"type":"text","text":"Predicates are based on "},{"type":"emphasis","inlineContent":[{"text":"expressions","type":"text"}]},{"text":", represented by the ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" class.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Somewhat unusually, style layers also use expressions on their own."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This document discusses the specific subset of the predicate and expression"},{"type":"text","text":" "},{"text":"syntax supported by this SDK. For a more general introduction to predicates and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expressions, consult the"},{"text":" ","type":"text"},{"inlineContent":[{"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","isActive":true}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"in Apple developer documentation. For additional detail on how this SDK has"},{"text":" ","type":"text"},{"type":"text","text":"extended the "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" class, see the "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h"},{"type":"text","text":" header."}],"type":"paragraph"},{"anchor":"Using-predicates-to-filter-vector-data","type":"heading","text":"Using predicates to filter vector data","level":2},{"inlineContent":[{"type":"text","text":"Most style layer classes display "},{"code":"MLNFeature","type":"codeVoice"},{"type":"text","text":" objects that you can show or hide"},{"text":" ","type":"text"},{"type":"text","text":"based on the feature’s attributes. Use the "},{"code":"MLNVectorStyleLayer.predicate","type":"codeVoice"},{"text":" ","type":"text"},{"text":"property to include only the features in the source layer that satisfy a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"condition that you define."}],"type":"paragraph"},{"text":"Operators","level":3,"anchor":"Operators","type":"heading"},{"inlineContent":[{"text":"The following comparison operators are supported:","type":"text"}],"type":"paragraph"},{"header":"row","rows":[[[{"inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key = value"},{"code":"key == value","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"NSGreaterThanOrEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key >= value"},{"code":"key => value","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSLessThanOrEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"code":"key <= value","type":"codeVoice"},{"type":"codeVoice","code":"key =< value"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSGreaterThanPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"key > value","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSLessThanPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"code":"key < value","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key != value"},{"type":"codeVoice","code":"key <> value"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSBetweenPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"key BETWEEN { 32, 212 }","type":"codeVoice"}]}]]],"type":"table"},{"inlineContent":[{"type":"text","text":"To test whether a feature has or lacks a specific attribute, compare the"},{"type":"text","text":" "},{"text":"attribute to ","type":"text"},{"type":"codeVoice","code":"NULL"},{"text":" or ","type":"text"},{"code":"NIL","type":"codeVoice"},{"text":". Predicates created using the","type":"text"},{"type":"text","text":" "},{"code":"+[NSPredicate predicateWithValue:]","type":"codeVoice"},{"text":" method are also supported. String","type":"text"},{"type":"text","text":" "},{"type":"text","text":"operators and custom operators are not supported."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following compound operators are supported:"}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"code":"NSCompoundPredicateType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAndPredicateType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"predicate1 AND predicate2"},{"code":"predicate1 && predicate2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSOrPredicateType"}]}],[{"type":"paragraph","inlineContent":[{"code":"predicate1 OR predicate2","type":"codeVoice"},{"text":"predicate1 || predicate2","type":"text"}]}]],[[{"inlineContent":[{"code":"NSNotPredicateType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"NOT predicate","type":"codeVoice"},{"code":"!predicate","type":"codeVoice"}]}]]]},{"type":"paragraph","inlineContent":[{"text":"The following aggregate operators are supported:","type":"text"}]},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSInPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSContainsPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key"}]}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"text":"You can use the ","type":"text"},{"type":"codeVoice","code":"IN"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CONTAINS"},{"type":"text","text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature ("},{"type":"codeVoice","code":"SELF"},{"text":") lies within a given ","type":"text"},{"type":"codeVoice","code":"MLNShape"},{"type":"text","text":" or "},{"type":"codeVoice","code":"MLNFeature"},{"type":"text","text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:"}]},{"type":"codeListing","syntax":"objc","code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"]},{"code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following combinations of comparison operators and modifiers are supported:"}]},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateModifier"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSAllPredicateModifier"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"NSNotEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"ALL haystack != needle"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSAnyPredicateModifier","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"ANY haystack = needle"},{"code":"SOME haystack = needle","type":"codeVoice"}],"type":"paragraph"}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"text":"The following comparison predicate options are supported for comparison and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"aggregate operators that are used in the predicate:"}]},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateOptions"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"inlineContent":[{"code":"NSCaseInsensitivePredicateOption","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"'QUEBEC' =[c] 'Quebec'"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSDiacriticInsensitivePredicateOption"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"'Québec' =[d] 'Quebec'"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Other comparison predicate options are unsupported, namely "},{"type":"codeVoice","code":"l"},{"type":"text","text":" "},{"text":"(for locale sensitivity) and ","type":"text"},{"type":"codeVoice","code":"n"},{"type":"text","text":" (for normalization). A comparison is"},{"type":"text","text":" "},{"type":"text","text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison"},{"type":"text","text":" "},{"text":"predicate options are not supported in conjunction with comparison modifiers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"like "},{"type":"codeVoice","code":"ALL"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ANY"},{"text":".","type":"text"}]},{"level":3,"type":"heading","text":"Operands","anchor":"Operands"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Operands in predicates can be "},{"type":"reference","identifier":"#variables","isActive":true},{"type":"text","text":", "},{"isActive":true,"identifier":"#key-paths","type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"or almost anything else that can appear","type":"text"},{"type":"text","text":" "},{"identifier":"#using-expressions-to-configure-layout-and-paint-attributes","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Automatic type casting is not performed. Therefore, a feature only matches a"},{"type":"text","text":" "},{"type":"text","text":"predicate if its value for the attribute in question is of the same type as the"},{"type":"text","text":" "},{"type":"text","text":"value specified in the predicate. Use the "},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" operator to convert a key"},{"type":"text","text":" "},{"type":"text","text":"path or variable into a matching type:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"To cast a value to a number, use "},{"code":"CAST(key, 'NSNumber')","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"To cast a value to a string, use ","type":"text"},{"code":"CAST(key, 'NSString')","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast a value to a color, use "},{"code":"CAST(key, 'UIColor')","type":"codeVoice"},{"text":" on iOS and ","type":"text"},{"code":"CAST(key, 'NSColor')","type":"codeVoice"},{"text":" on macOS.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"To cast an "},{"code":"NSColor","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" object to an array, use "},{"code":"CAST(noindex(color), 'NSArray')","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"For details about the predicate format string syntax, consult the “Predicate"},{"type":"text","text":" "},{"text":"Format String Syntax” chapter of the","type":"text"},{"type":"text","text":" "},{"inlineContent":[{"overridingTitleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}],"overridingTitle":"Predicate Programming Guide","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","isActive":true,"type":"reference"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"in Apple developer documentation."}],"type":"paragraph"},{"text":"Using expressions to configure layout and paint attributes","level":2,"anchor":"Using-expressions-to-configure-layout-and-paint-attributes","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An expression can contain subexpressions of various types. Each of the supported"},{"type":"text","text":" "},{"type":"text","text":"types of expressions is discussed below."}]},{"text":"Constant values","level":3,"anchor":"Constant-values","type":"heading"},{"inlineContent":[{"type":"text","text":"A constant value can be of any of the following types:"}],"type":"paragraph"},{"header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"In Objective-C"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"In Swift","type":"text"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)"},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" (iOS)"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS)"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSString","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSString"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}]],[[{"inlineContent":[{"code":"NSArray<NSNumber>","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"[Float]","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSArray<NSString>","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"[String]"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSValue.CGVectorValue"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue"},{"text":" containing ","type":"text"},{"type":"codeVoice","code":"CGVector"},{"type":"text","text":" (macOS)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"NSValue.cgVectorValue","type":"codeVoice"},{"type":"text","text":" (iOS)"},{"code":"NSValue","type":"codeVoice"},{"type":"text","text":" containing "},{"code":"CGVector","type":"codeVoice"},{"text":" (macOS)","type":"text"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSValue.UIEdgeInsetsValue"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"text":" (macOS)","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.uiEdgeInsetsValue"},{"type":"text","text":" (iOS)"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"type":"text","text":" (macOS)"}]}]]],"type":"table"},{"inlineContent":[{"text":"For literal floating-point values, use ","type":"text"},{"type":"codeVoice","code":"-[NSNumber numberWithDouble:]"},{"type":"text","text":" instead"},{"type":"text","text":" "},{"text":"of ","type":"text"},{"type":"codeVoice","code":"-[NSNumber numberWithFloat:]"},{"type":"text","text":" to avoid precision issues."}],"type":"paragraph"},{"type":"heading","text":"Key paths","anchor":"Key-paths","level":3},{"inlineContent":[{"type":"text","text":"A key path expression refers to an attribute of the "},{"type":"codeVoice","code":"MLNFeature"},{"type":"text","text":" object being"},{"type":"text","text":" "},{"type":"text","text":"evaluated for display. For example, if a polygon’s "},{"type":"codeVoice","code":"MLNFeature.attributes"},{"text":" ","type":"text"},{"type":"text","text":"dictionary contains the "},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" key, then the key path "},{"type":"codeVoice","code":"floorCount"},{"text":" refers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the value of the "},{"code":"floorCount","type":"codeVoice"},{"type":"text","text":" attribute when evaluating that particular"},{"text":" ","type":"text"},{"text":"polygon.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following special attributes are also available on features that are produced","type":"text"},{"type":"text","text":" "},{"text":"as a result of clustering multiple point features together in a shape source:","type":"text"}]},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attribute"}]}],[{"type":"paragraph","inlineContent":[{"text":"Type","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"Meaning"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"cluster"}]}],[{"type":"paragraph","inlineContent":[{"text":"Bool","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"cluster_id"}]}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identifier for the point cluster."}]}]],[[{"inlineContent":[{"type":"text","text":"point_count"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of point features in a given cluster."}]}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"text":"Some characters may not be used directly as part of a key path in a format","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string. For example, if a feature’s attribute is named "},{"code":"ISO 3166-1:2006","type":"codeVoice"},{"type":"text","text":", an"},{"text":" ","type":"text"},{"text":"expression format string of ","type":"text"},{"code":"lowercase(ISO 3166-1:2006)","type":"codeVoice"},{"text":" or a predicate format","type":"text"},{"text":" ","type":"text"},{"text":"string of ","type":"text"},{"code":"ISO 3166-1:2006 == 'US-OH'","type":"codeVoice"},{"type":"text","text":" would raise an exception. Instead, use a"},{"type":"text","text":" "},{"type":"codeVoice","code":"%K"},{"type":"text","text":" placeholder or the "},{"code":"+[NSExpression expressionForKeyPath:]","type":"codeVoice"},{"type":"text","text":" initializer:"}]},{"type":"codeListing","syntax":"objc","code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"]},{"syntax":"swift","type":"codeListing","code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"]},{"level":3,"type":"heading","text":"Functions","anchor":"Functions"},{"inlineContent":[{"type":"text","text":"Of the"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"by the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"text":"the following subset is supported in layer attribute values:","type":"text"}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"text":"Initializer parameter","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"inlineContent":[{"code":"average:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"average({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sum:"}]}],[{"inlineContent":[{"code":"sum({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"count:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"count({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"inlineContent":[{"code":"min:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"min({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"max:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"max({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"add:to:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"1 + 2"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"from:subtract:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"2 - 1"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"multiply:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 * 2"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"divide:by:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"1 \/ 2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"modulus:by:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"modulus:by:(1, 2)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"sqrt:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"sqrt(2)","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"log:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"log(10)"}]}]],[[{"inlineContent":[{"code":"ln:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ln(2)"}]}]],[[{"inlineContent":[{"code":"raise:toPower:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"2 ** 2"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"exp:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"exp(0)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"ceiling:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ceiling(0.99999)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"abs:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"abs(-1)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"trunc:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"trunc(6378.1370)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"floor:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"floor(-0.99999)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"uppercase:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"uppercase('Elysian Fields')"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"lowercase:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lowercase('DOWNTOWN')"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"noindex:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"noindex(0 + 2 + c)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"length:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"length('Wapakoneta')"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"castObject:toType:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"CAST(ele, 'NSString')","type":"codeVoice"},{"code":"CAST(ele, 'NSNumber')","type":"codeVoice"}],"type":"paragraph"}]]]},{"inlineContent":[{"text":"A number of ","type":"text"},{"identifier":"#MapLibre-specific-functions","isActive":true,"type":"reference"},{"type":"text","text":" are also"},{"type":"text","text":" "},{"type":"text","text":"available."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following predefined functions are "},{"type":"strong","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" supported:"}]},{"type":"table","rows":[[[{"inlineContent":[{"type":"text","text":"Initializer parameter"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"median:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"median({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"mode:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"mode({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"stddev:"}]}],[{"type":"paragraph","inlineContent":[{"code":"stddev({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"random"}]}],[{"inlineContent":[{"type":"codeVoice","code":"random()"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"randomn:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"randomn(10)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"now","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"now()","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:"}]}],[{"inlineContent":[{"code":"bitwiseAnd:with:(5, 3)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"bitwiseOr:with:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"bitwiseOr:with:(5, 3)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"bitwiseXor:with:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"bitwiseXor:with:(5, 3)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"leftshift:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"leftshift:by:(23, 1)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rightshift:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rightshift:by:(23, 1)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"onesComplement:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"onesComplement(255)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:(there, here)"}]}]]],"header":"row"},{"level":3,"text":"Conditionals","type":"heading","anchor":"Conditionals"},{"inlineContent":[{"text":"Conditionals are supported via the built-in","type":"text"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method and "},{"code":"TERNARY()","type":"codeVoice"},{"type":"text","text":" operator. If you need to express multiple cases"},{"text":" ","type":"text"},{"text":"(“else-if”), you can either nest a conditional within a conditional or use the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_if-code","isActive":true},{"type":"text","text":" or "},{"type":"reference","identifier":"#code-mgl_match-code","isActive":true},{"type":"text","text":" function."}],"type":"paragraph"},{"anchor":"Aggregates","type":"heading","text":"Aggregates","level":3},{"inlineContent":[{"text":"Aggregate expressions can contain arrays of expressions. In some cases, it is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"possible to use the array itself instead of wrapping the array in an aggregate"},{"text":" ","type":"text"},{"text":"expression.","type":"text"}],"type":"paragraph"},{"level":3,"text":"Variables","anchor":"Variables","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following variables are defined by this SDK for use with style layers:"}]},{"type":"table","rows":[[[{"inlineContent":[{"type":"text","text":"Variable"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Type"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Meaning","type":"text"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"$featureIdentifier"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Any GeoJSON data type","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.featureIdentifierVariableExpression"},{"text":" property.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$geometryType"}]}],[{"type":"paragraph","inlineContent":[{"text":"String","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:"},{"text":"*   ","type":"text"},{"type":"codeVoice","code":"Point"},{"type":"text","text":" for point features, corresponding to the "},{"type":"codeVoice","code":"MLNPointAnnotation"},{"text":" class","type":"text"},{"type":"text","text":"*   "},{"type":"codeVoice","code":"LineString"},{"type":"text","text":" for polyline features, corresponding to the "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true,"type":"reference"},{"text":" class","type":"text"},{"type":"text","text":"*   "},{"type":"codeVoice","code":"Polygon"},{"type":"text","text":" for polygon features, corresponding to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon"},{"text":" class","type":"text"},{"type":"text","text":"This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.geometryTypeVariableExpression"},{"type":"text","text":" property."}]}]],[[{"type":"paragraph","inlineContent":[{"code":"$heatmapDensity","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","type":"reference","isActive":true},{"type":"text","text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the "},{"type":"codeVoice","code":"heatmapColor"},{"text":" property. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.heatmapDensityVariableExpression"},{"type":"text","text":" property."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$zoomLevel"}]}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the "},{"code":"NSExpression.zoomLevelVariableExpression","type":"codeVoice"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$lineProgress"}]}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","isActive":true},{"text":" property. It corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.lineProgressVariableExpression"},{"text":" property.","type":"text"}]}]]],"header":"row"},{"type":"paragraph","inlineContent":[{"text":"In addition to these variables, you can define your own variables and refer to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"them elsewhere in the expression. The syntax for defining a variable makes use"},{"text":" ","type":"text"},{"type":"text","text":"of a "},{"identifier":"#MapLibre-specific-functions","overridingTitle":"MapLibre-specific function","isActive":true,"overridingTitleInlineContent":[{"text":"MapLibre-specific function","type":"text"}],"type":"reference"},{"text":" that takes an","type":"text"},{"text":" ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" as an argument:"}]},{"code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"],"syntax":"objc","type":"codeListing"},{"type":"codeListing","code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"],"syntax":"swift"},{"type":"heading","text":"MapLibre-specific functions","level":2,"anchor":"MapLibre-specific-functions"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to a change in iOS 15.5, some of these stopped working. See "},{"type":"reference","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","isActive":true},{"type":"text","text":" for more information and workarounds."}]}],"type":"aside","name":"Warning","style":"warning"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For compatibility with the MapLibre Style Spec, the following functions"},{"text":" ","type":"text"},{"text":"are defined by this SDK. When setting a style layer property, you can call these","type":"text"},{"type":"text","text":" "},{"type":"text","text":"functions just like the predefined functions above, using either the"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"type":"text","text":" method or a convenient format"},{"text":" ","type":"text"},{"type":"text","text":"string syntax:"}]},{"text":"mgl_does:have:","level":3,"anchor":"mgldoeshave","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:(SELF, '🧀🍔')"},{"type":"text","text":" or "},{"type":"codeVoice","code":"mgl_does:have:(%@, '🧀🍔')"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns a Boolean value indicating whether the dictionary has a value for the"},{"text":" ","type":"text"},{"type":"text","text":"key or whether the evaluated object ("},{"type":"codeVoice","code":"SELF"},{"text":") has a value for the feature","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"attribute. Compared to the "},{"identifier":"#code-mgl_has-code","type":"reference","isActive":true},{"type":"text","text":" custom function,"},{"text":" ","type":"text"},{"text":"that function’s target is instead passed in as the first argument to this","type":"text"},{"type":"text","text":" "},{"type":"text","text":"function. Both functions are equivalent to the syntax "},{"type":"codeVoice","code":"key != NIL"},{"text":" or","type":"text"},{"type":"text","text":" "},{"code":"%@[key] != NIL","type":"codeVoice"},{"type":"text","text":" but can be used outside of a predicate."}]},{"level":3,"type":"heading","text":"mgl_interpolate:withCurveType:parameters:stops:","anchor":"mglinterpolatewithCurveTypeparametersstops"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_interpolate:withCurveType:parameters:stops:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Produces continuous, smooth results by interpolating between pairs of input and"},{"text":" ","type":"text"},{"type":"text","text":"output values (“stops”). Compared to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","type":"reference"},{"text":" ","type":"text"},{"text":"custom function, the input expression (that function’s target) is instead passed","type":"text"},{"text":" ","type":"text"},{"text":"in as the first argument to this function.","type":"text"}]},{"type":"heading","anchor":"mglstepfromstops","level":3,"text":"mgl_step:from:stops:"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_step:from:stops:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_step:from:stops:(x, 11, %@)"}]},{"type":"paragraph","inlineContent":[{"text":"Produces discrete, stepped results by evaluating a piecewise-constant function","type":"text"},{"text":" ","type":"text"},{"text":"defined by pairs of input and output values (“stops”). Compared to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_stepwithminimum-stops-code","isActive":true},{"type":"text","text":" custom"},{"type":"text","text":" "},{"text":"function, the input expression (that function’s target) is instead passed in as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the first argument to this function."}]},{"text":"mgl_join:","type":"heading","level":3,"anchor":"mgljoin"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"mgl_join:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_join({'Old', 'MacDonald'})"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of concatenating together all the elements of an array in"},{"type":"text","text":" "},{"type":"text","text":"order. Compared to the"},{"text":" ","type":"text"},{"identifier":"#code-stringbyappendingstring-code","isActive":true,"type":"reference"},{"type":"text","text":" custom"},{"text":" ","type":"text"},{"type":"text","text":"function, this function takes only one argument, which is an aggregate"},{"type":"text","text":" "},{"type":"text","text":"expression containing the strings to concatenate."}]},{"type":"heading","level":3,"anchor":"mglacos","text":"mgl_acos:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_acos:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_acos(1)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the arccosine of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mglasin","text":"mgl_asin:","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_asin:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_asin(0)"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the arcsine of the number.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"type":"heading","level":3,"text":"mgl_atan:","anchor":"mglatan"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_atan:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_atan(20)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the arctangent of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"text":"mgl_cos:","anchor":"mglcos","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_cos:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_cos(0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the cosine of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","anchor":"mgllog2","text":"mgl_log2:","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_log2:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_log2(1024)"}]},{"inlineContent":[{"text":"Returns the base-2 logarithm of the number.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"anchor":"mglround","text":"mgl_round:","type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_round:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_round(1.5)","type":"codeVoice"}]},{"inlineContent":[{"type":"text","text":"Returns the number rounded to the nearest integer. If the number is halfway"},{"type":"text","text":" "},{"text":"between two integers, this function rounds it away from zero.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","anchor":"mglsin","level":3,"text":"mgl_sin:"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_sin:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin(0)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the sine of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mgltan","level":3,"type":"heading","text":"mgl_tan:"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_tan(0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the tangent of the number."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"text":"mgl_distanceFrom:","anchor":"mgldistanceFrom","level":3,"type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_distanceFrom:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_distanceFrom(%@)"},{"type":"text","text":" with an "},{"type":"codeVoice","code":"MLNShape"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the straight-line distance from the evaluated object to the given shape.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mglcoalesce","type":"heading","level":3,"text":"mgl_coalesce:"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_coalesce:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_coalesce({x, y, z})","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the first non-"},{"type":"codeVoice","code":"nil"},{"text":" value from an array of expressions.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"text":"mgl_attributed:","anchor":"mglattributed","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_attributed:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_attributed({x, y, z})"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Concatenates and returns the array of "},{"type":"codeVoice","code":"MLNAttributedExpression"},{"text":" objects, for use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with the "},{"code":"MLNSymbolStyleLayer.text","type":"codeVoice"},{"type":"text","text":" property."}]},{"inlineContent":[{"code":"MLNAttributedExpression.attributes","type":"codeVoice"},{"text":" valid attributes.","type":"text"}],"type":"paragraph"},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Key","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Value Type","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"MLNFontNamesAttribute","type":"codeVoice"}]}],[{"inlineContent":[{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" array."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"MLNFontScaleAttribute"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" evaluating to an "},{"code":"NSNumber","type":"codeVoice"},{"text":" value.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"MLNFontColorAttribute","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS) or "},{"code":"NSColor","type":"codeVoice"},{"text":" (macOS).","type":"text"}]}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","text":"MLN_LET","anchor":"MLNLET","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_LET:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" Any number of variable names interspersed with their assigned","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" values, followed by an "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" "},{"type":"text","text":"that may contain references to those variables."}]},{"inlineContent":[{"text":"Returns the result of evaluating an expression with the given variable values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Compared to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"#code-mgl_expressionwithcontext-code"},{"text":" custom","type":"text"},{"text":" ","type":"text"},{"text":"function, this function takes the variable names and values inline before the","type":"text"},{"type":"text","text":" "},{"text":"expression that contains references to those variables.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"MLNMATCH","text":"MLN_MATCH","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"MLN_MATCH:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" An input expression, then any number of argument pairs, followed by a default","type":"text"},{"type":"text","text":" "},{"text":"expression. Each argument pair consists of a constant value followed by an","type":"text"},{"text":" ","type":"text"},{"text":"expression to produce as a result of matching that constant value.","type":"text"},{"type":"text","text":" "},{"text":"If the input value is an aggregate expression, then any of the constant values within","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that aggregate expression result in the following argument. This is shorthand for"},{"type":"text","text":" "},{"text":"specifying an argument pair for each of the constant values within that aggregate","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expression. It is not possible to match the aggregate expression itself."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of matching the input expression against the given constant"},{"type":"text","text":" "},{"text":"values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","anchor":"MLNIF","level":3,"text":"MLN_IF"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_IF:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" Alternating ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" conditionals and resulting expressions,"},{"type":"text","text":" "},{"type":"text","text":"followed by a default expression."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the first expression that meets the condition; otherwise, the default"},{"type":"text","text":" "},{"type":"text","text":"value. Unlike"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]","type":"codeVoice"},{"type":"text","text":" or"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"TERNARY()","type":"codeVoice"},{"type":"text","text":" syntax, this function can accept multiple “if else” conditions"},{"type":"text","text":" "},{"type":"text","text":"and is supported on iOS 8."},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"type":"text","text":" and macOS 10.10."},{"inlineContent":[{"text":"x","type":"text"}],"type":"emphasis"},{"type":"text","text":"; however, each conditional"},{"type":"text","text":" "},{"type":"text","text":"passed into this function must be wrapped in a constant expression."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]"},{"text":" ","type":"text"},{"text":"method and the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","anchor":"MLNFUNCTION","level":3,"text":"MLN_FUNCTION"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_FUNCTION:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_FUNCTION('typeof', mystery)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" Any arguments required by the expression operator."}]},{"inlineContent":[{"text":"An expression exactly as defined by the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Custom functions","type":"heading","level":2,"anchor":"Custom-functions"},{"inlineContent":[{"text":"The following custom functions are also available with the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:selectorName:arguments:]"},{"type":"text","text":" method or the"},{"type":"text","text":" "},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" format string syntax."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Some of these functions are defined as methods on their respective target"},{"text":" ","type":"text"},{"type":"text","text":"classes, but you should not call them directly outside the context of an"},{"text":" ","type":"text"},{"type":"text","text":"expression, because the result may differ from the evaluated expression’s result"},{"text":" ","type":"text"},{"type":"text","text":"or may result in undefined behavior."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The MapLibre Style Spec defines some operators for which no custom"},{"type":"text","text":" "},{"text":"function is available. To use these operators in an ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":", call the"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_function-code","isActive":true},{"type":"text","text":" function with the same arguments"},{"type":"text","text":" "},{"type":"text","text":"that the operator expects."}],"type":"paragraph"},{"text":"boolValue","type":"heading","anchor":"boolValue","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"boolValue"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"FUNCTION(1, 'boolValue')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a number or string.","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" None.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A Boolean representation of the target: ","type":"text"},{"code":"FALSE","type":"codeVoice"},{"type":"text","text":" when then input is an"},{"text":" ","type":"text"},{"text":"empty string, 0, ","type":"text"},{"type":"codeVoice","code":"FALSE"},{"text":", ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":", or "},{"code":"NaN","type":"codeVoice"},{"text":", otherwise ","type":"text"},{"code":"TRUE","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"mgl_has:","level":3,"type":"heading","anchor":"mglhas"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_has:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to an "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" "},{"text":"or the evaluated object (","type":"text"},{"type":"codeVoice","code":"SELF"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to an "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" "},{"text":"representing the key to look up in the dictionary or the feature attribute to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"look up in the evaluated object (see "},{"type":"codeVoice","code":"MLNFeature.attributes"},{"type":"text","text":")."}]},{"inlineContent":[{"type":"codeVoice","code":"true"},{"text":" if the dictionary has a value for the key or if the evaluated","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"object has a value for the feature attribute."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"#code-mgl_does-have-code"},{"type":"text","text":" function, which is used on its own"},{"text":" ","type":"text"},{"type":"text","text":"without the "},{"type":"codeVoice","code":"FUNCTION()"},{"text":" operator. You can also check whether an object has an","type":"text"},{"type":"text","text":" "},{"text":"attribute by comparing the key path to ","type":"text"},{"code":"NIL","type":"codeVoice"},{"text":", for example ","type":"text"},{"type":"codeVoice","code":"cheeseburger != NIL"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"code":"burger.cheese != NIL","type":"codeVoice"}]},{"anchor":"mglexpressionWithContext","type":"heading","text":"mgl_expressionWithContext:","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_expressionWithContext:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)","type":"codeVoice"},{"type":"text","text":" with"},{"type":"text","text":" "},{"text":"a dictionary containing ","type":"text"},{"type":"codeVoice","code":"ios"},{"text":" and ","type":"text"},{"code":"macos","type":"codeVoice"},{"text":" keys","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that may contain references to the variables","type":"text"},{"type":"text","text":" "},{"type":"text","text":"defined in the context dictionary."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" An "},{"code":"NSDictionary","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"NSString","type":"codeVoice"},{"text":"s as keys and","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s as values. Each key is a variable name and each"},{"type":"text","text":" "},{"type":"text","text":"value is the variable’s value within the target expression."}]},{"type":"paragraph","inlineContent":[{"text":"The target expression with variable subexpressions replaced with the values","type":"text"},{"text":" ","type":"text"},{"text":"defined in the context dictionary.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"#code-mgl_let-code"},{"text":" function, which is used on its own without the","type":"text"},{"text":" ","type":"text"},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator.","type":"text"}]},{"text":"mgl_interpolateWithCurveType:parameters:stops:","type":"heading","level":3,"anchor":"mglinterpolateWithCurveTypeparametersstops"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}]},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)"},{"type":"text","text":" "},{"text":"with a dictionary containing zoom levels or other constant values as keys","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number and contains a"},{"type":"text","text":" "},{"text":"variable or key path expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" The first argument is one of the following strings denoting curve types:","type":"text"},{"type":"text","text":" "},{"code":"linear","type":"codeVoice"},{"type":"text","text":", "},{"code":"exponential","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"cubic-bezier","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second argument is an expression providing parameters for the curve:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the curve type is ","type":"text"},{"code":"linear","type":"codeVoice"},{"type":"text","text":", the argument is "},{"type":"codeVoice","code":"NIL"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"If the curve type is ","type":"text"},{"code":"exponential","type":"codeVoice"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"text":"expression that evaluates to a number, specifying the base of the","type":"text"},{"type":"text","text":" "},{"text":"exponential interpolation.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the curve type is ","type":"text"},{"type":"codeVoice","code":"cubic-bezier"},{"type":"text","text":", the argument is an"},{"text":" ","type":"text"},{"text":"array or aggregate expression containing four expressions, each","type":"text"},{"type":"text","text":" "},{"type":"text","text":"evaluating to a number. The four numbers are control points for the"},{"type":"text","text":" "},{"text":"cubic Bézier curve.","type":"text"}]}]}]},{"inlineContent":[{"text":"The third argument is an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" object representing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A value interpolated along the continuous mathematical function defined by the"},{"text":" ","type":"text"},{"text":"arguments, with the target as the input to the function.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The input expression is matched against the keys in the stop dictionary. The","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"type":"text","text":" "},{"type":"text","text":"values may be constant values or "},{"code":"NSExpression","type":"codeVoice"},{"text":" objects. For example, you can","type":"text"},{"type":"text","text":" "},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"type":"text","text":" "},{"text":"yellow, orange, and red as the values.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]"},{"type":"text","text":" "},{"text":"method and the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","isActive":true},{"type":"text","text":" "},{"text":"function, which is used on its own without the ","type":"text"},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}]},{"text":"mgl_numberWithFallbackValues:","level":3,"type":"heading","anchor":"mglnumberWithFallbackValues"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"doubleValue","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"floatValue","type":"codeVoice"},{"text":", or","type":"text"},{"text":" ","type":"text"},{"code":"decimalValue","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"text":" ","type":"text"},{"type":"text","text":"string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" Zero or more ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":"s, each evaluating to a Boolean value","type":"text"},{"type":"text","text":" "},{"text":"or string.","type":"text"}]},{"inlineContent":[{"type":"text","text":"A numeric representation of the target:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"doubleValue","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"floatValue"},{"type":"text","text":", or"},{"text":" ","type":"text"},{"type":"codeVoice","code":"decimalValue"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"text":"string.","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" "},{"text":"Zero or more ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"type":"text","text":" "},{"type":"text","text":"or string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A numeric representation of the target:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"},{"text":" ","type":"text"},{"text":"“","type":"text"},{"isActive":true,"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","type":"reference"},{"type":"text","text":"”"},{"text":" ","type":"text"},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If multiple values are provided, each one is evaluated in order until the"},{"type":"text","text":" "},{"type":"text","text":"first successful conversion is obtained."}]}]}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"type":"text","text":" "},{"type":"text","text":"number by passing the value and the string "},{"code":"NSNumber","type":"codeVoice"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"CAST()"},{"text":" ","type":"text"},{"type":"text","text":"operator."}]},{"level":3,"anchor":"mglstepWithMinimumstops","text":"mgl_stepWithMinimum:stops:","type":"heading"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)","type":"codeVoice"},{"text":" with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a dictionary with zoom levels or other constant values as keys"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a number and contains a"},{"type":"text","text":" "},{"text":"variable or key path expression.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"The first argument is an expression that evaluates to a number, specifying"},{"text":" ","type":"text"},{"text":"the minimum value in case the target is less than any of the stops in the","type":"text"},{"text":" ","type":"text"},{"text":"second argument.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The second argument is an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" object representing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"type":"text","text":" "},{"type":"text","text":"values."}]},{"type":"paragraph","inlineContent":[{"text":"The output value of the stop whose key is just less than the evaluated target,","type":"text"},{"text":" ","type":"text"},{"text":"or the minimum value if the target is less than the least of the stops’ keys.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"text":" ","type":"text"},{"text":"keys may be feature attribute values, zoom levels, or heatmap densities. The","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values may be constant values or "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" objects. For example, you can"},{"type":"text","text":" "},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"text":" ","type":"text"},{"text":"yellow, orange, and red as the values.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"stringByAppendingString","text":"stringByAppendingString:","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"stringByAppendingString:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a string."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"text":"One or more ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a string."}]},{"type":"paragraph","inlineContent":[{"text":"The target string with each of the argument strings appended in order.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]","type":"codeVoice"},{"text":" ","type":"text"},{"text":"method and is similar to the","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"#code-mgl_join-code"},{"type":"text","text":" function, which concatenates multiple"},{"type":"text","text":" "},{"text":"expressions and is used on its own without the ","type":"text"},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}]},{"level":3,"text":"stringValue","type":"heading","anchor":"stringValue"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"stringValue","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"FUNCTION(ele, 'stringValue')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"text":"string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" ","type":"text"},{"text":"None.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A string representation of the target:"}]},{"items":[{"content":[{"inlineContent":[{"text":"If the target is ","type":"text"},{"text":"NIL","type":"text"},{"text":", the result is the empty string.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a Boolean value, the result is the string "},{"code":"true","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a number, it is converted to a string as specified by the","type":"text"},{"text":" ","type":"text"},{"text":"“","type":"text"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","isActive":true,"type":"reference"},{"type":"text","text":"”"},{"text":" ","type":"text"},{"text":"algorithm of the ECMAScript Language Specification.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a color, it is converted to a string of the form"},{"type":"text","text":" "},{"type":"codeVoice","code":"rgba(r,g,b,a)"},{"text":", where ","type":"text"},{"text":"r","type":"text"},{"type":"text","text":", "},{"text":"g","type":"text"},{"type":"text","text":", and "},{"type":"text","text":"b"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"text","text":"numerals ranging from 0 to 255 and "},{"type":"text","text":"a"},{"text":" ranges from 0 to 1.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Otherwise, the target is converted to a string in the format specified by the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify"},{"text":" ","type":"text"},{"text":"function of the ECMAScript Language Specification.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. You can also cast a value to a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"string by passing the value and the string "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"CAST()"},{"text":" ","type":"text"},{"text":"operator.","type":"text"}],"type":"paragraph"}]}],"metadata":{"role":"article","modules":[{"name":"MapLibre"}],"roleHeading":"Article","title":"Predicates and expressions"},"seeAlsoSections":[{"generated":true,"title":"Other Articles","identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"]}],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"references":{"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","title":"distance","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","titleInlineContent":[{"type":"codeVoice","code":"distance"}]},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"title":"cos","titleInlineContent":[{"type":"codeVoice","code":"cos"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","type":"link"},"#using-expressions-to-configure-layout-and-paint-attributes":{"titleInlineContent":[{"type":"text","text":"inside an expression"}],"type":"link","identifier":"#using-expressions-to-configure-layout-and-paint-attributes","title":"inside an expression","url":"#using-expressions-to-configure-layout-and-paint-attributes"},"#code-mgl_has-code":{"title":"mgl_has:","titleInlineContent":[{"type":"codeVoice","code":"mgl_has:"}],"identifier":"#code-mgl_has-code","url":"#code-mgl_has-code","type":"link"},"#code-mgl_match-code":{"titleInlineContent":[{"type":"codeVoice","code":"MLN_MATCH()"}],"type":"link","identifier":"#code-mgl_match-code","title":"MLN_MATCH()","url":"#code-mgl_match-code"},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"title":"format","titleInlineContent":[{"type":"codeVoice","code":"format"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","type":"link"},"https://github.com/maplibre/maplibre-native/issues/331":{"titleInlineContent":[{"type":"text","text":"#331"}],"type":"link","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","title":"#331","url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample","role":"article","abstract":[{"type":"text","text":"Adding images to the map and assigning them to POI types"}],"type":"topic","kind":"article","title":"Adding Multiple Images"},"https://maplibre.org/maplibre-style-spec/expressions/":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","title":"MapLibre Style Spec","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","titleInlineContent":[{"type":"text","text":"MapLibre Style Spec"}]},"https://tc39.github.io/ecma262/#sec-json.stringify":{"titleInlineContent":[{"type":"codeVoice","code":"JSON.stringify()"}],"type":"link","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","title":"JSON.stringify()","url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify"},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","title":"concat","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","titleInlineContent":[{"type":"codeVoice","code":"concat"}]},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"titleInlineContent":[{"type":"codeVoice","code":"atan"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","title":"atan","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"title":"+[NSExpression expressionForFunction:arguments:] method","titleInlineContent":[{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"text":" method","type":"text"}],"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"titleInlineContent":[{"type":"codeVoice","code":"match"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","title":"match","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts","role":"article","abstract":[{"text":"Using custom fonts","type":"text"}],"type":"topic","kind":"article","title":"Customizing Fonts"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"title":"asin","titleInlineContent":[{"type":"codeVoice","code":"asin"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"titleInlineContent":[{"type":"codeVoice","code":"acos"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","title":"acos","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"title":"kernel density estimation","titleInlineContent":[{"type":"text","text":"kernel density estimation"}],"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","title":"let","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","titleInlineContent":[{"type":"codeVoice","code":"let"}]},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"title":"mgl_interpolate:withCurveType:parameters:stops:","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}],"identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","title":"to-number","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","titleInlineContent":[{"type":"codeVoice","code":"to-number"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"fragments":[{"text":"MLNShapeSource","kind":"identifier"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","url":"\/documentation\/maplibre\/mlnshapesource","kind":"symbol","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource"},{"type":"text","text":" is a map content source that supplies vector shapes to be"},{"type":"text","text":" "},{"text":"shown on the map. The shapes may be instances of ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true,"type":"reference"},{"type":"text","text":" or "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"or they may be defined by local or external","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"GeoJSON"},{"text":" code. A shape source is added to an","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle"},{"type":"text","text":" object along with an "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true,"type":"reference"},{"type":"text","text":" object. The vector style"},{"text":" ","type":"text"},{"type":"text","text":"layer defines the appearance of any content supplied by the shape source. You"},{"text":" ","type":"text"},{"type":"text","text":"can update a shape source by setting its "},{"type":"codeVoice","code":"shape"},{"type":"text","text":" or "},{"code":"URL","type":"codeVoice"},{"text":" property.","type":"text"}],"title":"MLNShapeSource","type":"topic","role":"symbol"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"title":"has","titleInlineContent":[{"type":"codeVoice","code":"has"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","type":"link"},"#variables":{"type":"link","identifier":"#variables","title":"variables","url":"#variables","titleInlineContent":[{"type":"text","text":"variables"}]},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"title":"to-string","titleInlineContent":[{"type":"codeVoice","code":"to-string"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","type":"link"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","type":"topic","abstract":[{"type":"text","text":"Using URL Templates when defining tile sources"}],"role":"article","title":"Tile URL Templates","kind":"article"},"#code-mgl_if-code":{"type":"link","identifier":"#code-mgl_if-code","title":"MLN_IF()","url":"#code-mgl_if-code","titleInlineContent":[{"type":"codeVoice","code":"MLN_IF()"}]},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"title":"mgl_interpolateWithCurveType:parameters:stops:","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","type":"link"},"#MapLibre-specific-functions":{"type":"link","identifier":"#MapLibre-specific-functions","title":"MapLibre-specific functions","url":"#MapLibre-specific-functions","titleInlineContent":[{"type":"text","text":"MapLibre-specific functions"}]},"#code-mgl_join-code":{"title":"mgl_join:","titleInlineContent":[{"type":"codeVoice","code":"mgl_join:"}],"identifier":"#code-mgl_join-code","url":"#code-mgl_join-code","type":"link"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"url":"\/documentation\/maplibre\/mlnpolyline","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","type":"topic","abstract":[{"type":"text","text":"An "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline"},{"text":" object represents a shape consisting of two or more vertices,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specified as "},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"type":"text","text":" instances, and the line segments that"},{"text":" ","type":"text"},{"type":"text","text":"connect them. For example, you could use an polyline to represent a road or the"},{"type":"text","text":" "},{"type":"text","text":"path along which something moves."}],"role":"symbol","fragments":[{"text":"MLNPolyline","kind":"identifier"}],"title":"MLNPolyline","kind":"symbol"},"#code-stringbyappendingstring-code":{"type":"link","identifier":"#code-stringbyappendingstring-code","title":"stringByAppendingString:","url":"#code-stringbyappendingstring-code","titleInlineContent":[{"type":"codeVoice","code":"stringByAppendingString:"}]},"#code-mgl_does-have-code":{"title":"mgl_does:have:","titleInlineContent":[{"type":"codeVoice","code":"mgl_does:have:"}],"identifier":"#code-mgl_does-have-code","url":"#code-mgl_does-have-code","type":"link"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","title":"functions predefined","url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","titleInlineContent":[{"type":"text","text":"functions predefined"}]},"#code-mgl_stepwithminimum-stops-code":{"title":"mgl_stepWithMinimum:stops:","titleInlineContent":[{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}],"identifier":"#code-mgl_stepwithminimum-stops-code","url":"#code-mgl_stepwithminimum-stops-code","type":"link"},"#code-mgl_expressionwithcontext-code":{"type":"link","identifier":"#code-mgl_expressionwithcontext-code","title":"mgl_expressionWithContext:","url":"#code-mgl_expressionwithcontext-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_expressionWithContext:"}]},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"title":"log2","titleInlineContent":[{"type":"codeVoice","code":"log2"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","type":"link"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"type":"link","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","title":"Predicate Programming Guide","url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","titleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}]},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"title":"case","titleInlineContent":[{"type":"codeVoice","code":"case"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","type":"link"},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"type":"link","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","title":"NumberToString","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","titleInlineContent":[{"type":"text","text":"NumberToString"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors","url":"\/documentation\/maplibre-native-for-ios\/for_style_authors","role":"article","abstract":[],"type":"topic","kind":"article","title":"Information for Style Authors"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","type":"topic","title":"lineGradient","role":"symbol","abstract":[{"text":"The color gradient with which the line will be drawn. This property only has an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"effect on lines defined by an "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true,"type":"reference"},{"type":"text","text":" whose "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"option is set to "},{"code":"YES","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient","fragments":[{"kind":"identifier","text":"lineGradient"}]},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"title":"step","titleInlineContent":[{"type":"codeVoice","code":"step"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","title":"coalesce","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","titleInlineContent":[{"type":"codeVoice","code":"coalesce"}]},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"title":"tan","titleInlineContent":[{"type":"codeVoice","code":"tan"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","type":"link"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"fragments":[{"text":"MLNPolygon","kind":"identifier"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","url":"\/documentation\/maplibre\/mlnpolygon","kind":"symbol","title":"MLNPolygon","abstract":[{"text":"An ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true},{"type":"text","text":" object represents a closed shape consisting of four or more"},{"type":"text","text":" "},{"text":"vertices, specified as ","type":"text"},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"type":"text","text":" instances, and the edges that"},{"type":"text","text":" "},{"text":"connect them. For example, you could use a polygon shape to represent a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"building, a lake, or an area you want to highlight."}],"type":"topic","role":"symbol"},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"type":"link","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","title":"NSExpression+MLNAdditions.h","url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","titleInlineContent":[{"type":"codeVoice","code":"NSExpression+MLNAdditions.h"}]},"#code-mgl_let-code":{"title":"MLN_LET","titleInlineContent":[{"type":"codeVoice","code":"MLN_LET"}],"identifier":"#code-mgl_let-code","url":"#code-mgl_let-code","type":"link"},"#code-mgl_function-code":{"type":"link","identifier":"#code-mgl_function-code","title":"MLN_FUNCTION()","url":"#code-mgl_function-code","titleInlineContent":[{"type":"codeVoice","code":"MLN_FUNCTION()"}]},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"title":"sin","titleInlineContent":[{"type":"codeVoice","code":"sin"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","type":"link"},"doc://org.swift.MyProject/documentation/MapLibre":{"type":"topic","role":"collection","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","kind":"symbol","title":"MapLibre","url":"\/documentation\/maplibre","abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}]},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","title":"round","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","titleInlineContent":[{"type":"codeVoice","code":"round"}]},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"title":"ToNumber Applied to the String Type","titleInlineContent":[{"type":"text","text":"ToNumber Applied to the String Type"}],"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","title":"interpolate","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","titleInlineContent":[{"type":"codeVoice","code":"interpolate"}]},"#key-paths":{"title":"key paths","titleInlineContent":[{"type":"text","text":"key paths"}],"identifier":"#key-paths","url":"#key-paths","type":"link"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","role":"article","abstract":[{"type":"text","text":"MapLibre Native for iOS supports custom "},{"type":"codeVoice","code":"Info.plist"},{"text":" keys in your application in order to configure various settings.","type":"text"}],"type":"topic","kind":"article","title":"Info.plist Keys"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers","role":"article","abstract":[{"type":"text","text":"Learn how to work with gesture recognizers"}],"type":"topic","kind":"article","title":"User Interactions"}}}