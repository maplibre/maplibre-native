{"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"]}],"primaryContentSections":[{"content":[{"inlineContent":[{"text":"Style layers use predicates and expressions to determine what to display and how","type":"text"},{"text":" ","type":"text"},{"text":"to format it. ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Predicates"}]},{"type":"text","text":" are represented by the same "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":" class that"},{"text":" ","type":"text"},{"type":"text","text":"filters results from Core Data or items in an "},{"code":"NSArray","type":"codeVoice"},{"type":"text","text":" in Objective-C."},{"text":" ","type":"text"},{"text":"Predicates are based on ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"expressions","type":"text"}]},{"text":", represented by the ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" class.","type":"text"},{"type":"text","text":" "},{"text":"Somewhat unusually, style layers also use expressions on their own.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This document discusses the specific subset of the predicate and expression"},{"text":" ","type":"text"},{"type":"text","text":"syntax supported by this SDK. For a more general introduction to predicates and"},{"text":" ","type":"text"},{"type":"text","text":"expressions, consult the"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","isActive":true}]},{"text":" ","type":"text"},{"type":"text","text":"in Apple developer documentation. For additional detail on how this SDK has"},{"text":" ","type":"text"},{"type":"text","text":"extended the "},{"code":"NSExpression","type":"codeVoice"},{"text":" class, see the ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h"},{"type":"text","text":" header."}]},{"text":"Using predicates to filter vector data","level":2,"anchor":"Using-predicates-to-filter-vector-data","type":"heading"},{"inlineContent":[{"type":"text","text":"Most style layer classes display "},{"type":"codeVoice","code":"MLNFeature"},{"type":"text","text":" objects that you can show or hide"},{"type":"text","text":" "},{"text":"based on the feature’s attributes. Use the ","type":"text"},{"code":"MLNVectorStyleLayer.predicate","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"property to include only the features in the source layer that satisfy a"},{"text":" ","type":"text"},{"text":"condition that you define.","type":"text"}],"type":"paragraph"},{"anchor":"Operators","type":"heading","level":3,"text":"Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following comparison operators are supported:"}]},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}]}],[{"inlineContent":[{"code":"key = value","type":"codeVoice"},{"type":"codeVoice","code":"key == value"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSGreaterThanOrEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key >= value"},{"type":"codeVoice","code":"key => value"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSLessThanOrEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key <= value"},{"type":"codeVoice","code":"key =< value"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSGreaterThanPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key > value"}]}]],[[{"inlineContent":[{"code":"NSLessThanPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"key < value","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSNotEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key != value"},{"code":"key <> value","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"NSBetweenPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"key BETWEEN { 32, 212 }","type":"codeVoice"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To test whether a feature has or lacks a specific attribute, compare the"},{"type":"text","text":" "},{"type":"text","text":"attribute to "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":". Predicates created using the"},{"type":"text","text":" "},{"code":"+[NSPredicate predicateWithValue:]","type":"codeVoice"},{"text":" method are also supported. String","type":"text"},{"type":"text","text":" "},{"text":"operators and custom operators are not supported.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following compound operators are supported:"}]},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSCompoundPredicateType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSAndPredicateType"}],"type":"paragraph"}],[{"inlineContent":[{"code":"predicate1 AND predicate2","type":"codeVoice"},{"code":"predicate1 && predicate2","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSOrPredicateType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"predicate1 OR predicate2"},{"type":"text","text":"predicate1 || predicate2"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNotPredicateType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NOT predicate"},{"type":"codeVoice","code":"!predicate"}]}]]]},{"type":"paragraph","inlineContent":[{"text":"The following aggregate operators are supported:","type":"text"}]},{"header":"row","rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"inlineContent":[{"code":"NSInPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSContainsPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key","type":"codeVoice"}]}]]],"type":"table"},{"inlineContent":[{"type":"text","text":"You can use the "},{"code":"IN","type":"codeVoice"},{"type":"text","text":" and "},{"code":"CONTAINS","type":"codeVoice"},{"text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature (","type":"text"},{"type":"codeVoice","code":"SELF"},{"text":") lies within a given ","type":"text"},{"type":"codeVoice","code":"MLNShape"},{"text":" or ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:","type":"text"}],"type":"paragraph"},{"code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"],"syntax":"objc","type":"codeListing"},{"syntax":"swift","type":"codeListing","code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following combinations of comparison operators and modifiers are supported:"}]},{"rows":[[[{"inlineContent":[{"code":"NSComparisonPredicateModifier","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSAllPredicateModifier"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"code":"ALL haystack != needle","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSAnyPredicateModifier","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"code":"ANY haystack = needle","type":"codeVoice"},{"code":"SOME haystack = needle","type":"codeVoice"}],"type":"paragraph"}]]],"header":"row","type":"table"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following comparison predicate options are supported for comparison and"},{"type":"text","text":" "},{"type":"text","text":"aggregate operators that are used in the predicate:"}]},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateOptions"}]}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSCaseInsensitivePredicateOption"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"'QUEBEC' =[c] 'Quebec'"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSDiacriticInsensitivePredicateOption","type":"codeVoice"}]}],[{"inlineContent":[{"code":"'Québec' =[d] 'Quebec'","type":"codeVoice"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Other comparison predicate options are unsupported, namely "},{"type":"codeVoice","code":"l"},{"text":" ","type":"text"},{"type":"text","text":"(for locale sensitivity) and "},{"type":"codeVoice","code":"n"},{"text":" (for normalization). A comparison is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison"},{"type":"text","text":" "},{"type":"text","text":"predicate options are not supported in conjunction with comparison modifiers"},{"text":" ","type":"text"},{"type":"text","text":"like "},{"type":"codeVoice","code":"ALL"},{"type":"text","text":" and "},{"code":"ANY","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"heading","level":3,"anchor":"Operands","text":"Operands"},{"inlineContent":[{"type":"text","text":"Operands in predicates can be "},{"identifier":"#variables","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"type":"reference","isActive":true,"identifier":"#key-paths"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"or almost anything else that can appear","type":"text"},{"type":"text","text":" "},{"identifier":"#using-expressions-to-configure-layout-and-paint-attributes","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Automatic type casting is not performed. Therefore, a feature only matches a"},{"type":"text","text":" "},{"text":"predicate if its value for the attribute in question is of the same type as the","type":"text"},{"type":"text","text":" "},{"text":"value specified in the predicate. Use the ","type":"text"},{"type":"codeVoice","code":"CAST()"},{"text":" operator to convert a key","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"path or variable into a matching type:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast a value to a number, use "},{"code":"CAST(key, 'NSNumber')","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast a value to a string, use ","type":"text"},{"code":"CAST(key, 'NSString')","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast a value to a color, use "},{"code":"CAST(key, 'UIColor')","type":"codeVoice"},{"type":"text","text":" on iOS and "},{"type":"codeVoice","code":"CAST(key, 'NSColor')"},{"type":"text","text":" on macOS."}]}]},{"content":[{"inlineContent":[{"text":"To cast an ","type":"text"},{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" or "},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" object to an array, use "},{"code":"CAST(noindex(color), 'NSArray')","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For details about the predicate format string syntax, consult the “Predicate"},{"text":" ","type":"text"},{"text":"Format String Syntax” chapter of the","type":"text"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"isActive":true,"type":"reference","overridingTitle":"Predicate Programming Guide","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","overridingTitleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}]}]},{"text":" ","type":"text"},{"type":"text","text":"in Apple developer documentation."}]},{"type":"heading","anchor":"Using-expressions-to-configure-layout-and-paint-attributes","level":2,"text":"Using expressions to configure layout and paint attributes"},{"inlineContent":[{"type":"text","text":"An expression can contain subexpressions of various types. Each of the supported"},{"type":"text","text":" "},{"type":"text","text":"types of expressions is discussed below."}],"type":"paragraph"},{"type":"heading","anchor":"Constant-values","level":3,"text":"Constant values"},{"type":"paragraph","inlineContent":[{"text":"A constant value can be of any of the following types:","type":"text"}]},{"header":"row","rows":[[[{"inlineContent":[{"text":"In Objective-C","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"In Swift","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)"},{"type":"codeVoice","code":"UIColor"},{"text":" (iOS)","type":"text"}]}],[{"inlineContent":[{"code":"NSColor","type":"codeVoice"},{"text":" (macOS)","type":"text"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSString"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"String"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSString"}]}],[{"inlineContent":[{"type":"codeVoice","code":"String"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}],"type":"paragraph"}],[{"inlineContent":[{"code":"NSNumber.doubleValue","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSArray<NSNumber>","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[Float]"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSArray<NSString>"}],"type":"paragraph"}],[{"inlineContent":[{"code":"[String]","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSValue.CGVectorValue"},{"text":" (iOS)","type":"text"},{"code":"NSValue","type":"codeVoice"},{"type":"text","text":" containing "},{"code":"CGVector","type":"codeVoice"},{"text":" (macOS)","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.cgVectorValue"},{"type":"text","text":" (iOS)"},{"code":"NSValue","type":"codeVoice"},{"text":" containing ","type":"text"},{"code":"CGVector","type":"codeVoice"},{"text":" (macOS)","type":"text"}]}]],[[{"inlineContent":[{"code":"NSValue.UIEdgeInsetsValue","type":"codeVoice"},{"text":" (iOS)","type":"text"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"text":" (macOS)","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSValue.uiEdgeInsetsValue"},{"type":"text","text":" (iOS)"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"type":"text","text":" (macOS)"}],"type":"paragraph"}]]],"type":"table"},{"inlineContent":[{"type":"text","text":"For literal floating-point values, use "},{"code":"-[NSNumber numberWithDouble:]","type":"codeVoice"},{"text":" instead","type":"text"},{"type":"text","text":" "},{"text":"of ","type":"text"},{"type":"codeVoice","code":"-[NSNumber numberWithFloat:]"},{"type":"text","text":" to avoid precision issues."}],"type":"paragraph"},{"text":"Key paths","type":"heading","level":3,"anchor":"Key-paths"},{"type":"paragraph","inlineContent":[{"text":"A key path expression refers to an attribute of the ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"text":" object being","type":"text"},{"type":"text","text":" "},{"type":"text","text":"evaluated for display. For example, if a polygon’s "},{"type":"codeVoice","code":"MLNFeature.attributes"},{"text":" ","type":"text"},{"text":"dictionary contains the ","type":"text"},{"code":"floorCount","type":"codeVoice"},{"text":" key, then the key path ","type":"text"},{"code":"floorCount","type":"codeVoice"},{"text":" refers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the value of the "},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" attribute when evaluating that particular"},{"text":" ","type":"text"},{"text":"polygon.","type":"text"}]},{"inlineContent":[{"text":"The following special attributes are also available on features that are produced","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as a result of clustering multiple point features together in a shape source:"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"text":"Attribute","type":"text"}]}],[{"inlineContent":[{"text":"Type","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Meaning","type":"text"}]}]],[[{"inlineContent":[{"type":"text","text":"cluster"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Bool","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster."}]}]],[[{"type":"paragraph","inlineContent":[{"text":"cluster_id","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"Identifier for the point cluster."}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"point_count","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"inlineContent":[{"text":"The number of point features in a given cluster.","type":"text"}],"type":"paragraph"}]]],"header":"row","type":"table"},{"type":"paragraph","inlineContent":[{"text":"Some characters may not be used directly as part of a key path in a format","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string. For example, if a feature’s attribute is named "},{"type":"codeVoice","code":"ISO 3166-1:2006"},{"type":"text","text":", an"},{"type":"text","text":" "},{"type":"text","text":"expression format string of "},{"code":"lowercase(ISO 3166-1:2006)","type":"codeVoice"},{"type":"text","text":" or a predicate format"},{"text":" ","type":"text"},{"text":"string of ","type":"text"},{"code":"ISO 3166-1:2006 == 'US-OH'","type":"codeVoice"},{"text":" would raise an exception. Instead, use a","type":"text"},{"type":"text","text":" "},{"code":"%K","type":"codeVoice"},{"type":"text","text":" placeholder or the "},{"code":"+[NSExpression expressionForKeyPath:]","type":"codeVoice"},{"type":"text","text":" initializer:"}]},{"type":"codeListing","syntax":"objc","code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"]},{"syntax":"swift","code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"],"type":"codeListing"},{"level":3,"type":"heading","text":"Functions","anchor":"Functions"},{"inlineContent":[{"type":"text","text":"Of the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","isActive":true},{"text":" ","type":"text"},{"text":"by the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the following subset is supported in layer attribute values:"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializer parameter"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"average:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"average({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"sum:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"sum({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"count:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"count({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"min:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"min({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"max:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"max({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"add:to:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 + 2"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"from:subtract:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"2 - 1"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"multiply:by:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"1 * 2"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"divide:by:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"1 \/ 2","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"modulus:by:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:(1, 2)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt(2)"}]}]],[[{"inlineContent":[{"code":"log:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"log(10)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"ln:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"ln(2)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"raise:toPower:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"2 ** 2","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"exp:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"exp(0)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"ceiling:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"ceiling(0.99999)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"abs:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"abs(-1)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"trunc:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"trunc(6378.1370)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"floor:"}]}],[{"type":"paragraph","inlineContent":[{"code":"floor(-0.99999)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"uppercase:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"uppercase('Elysian Fields')"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"lowercase:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"lowercase('DOWNTOWN')","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"noindex:"}]}],[{"inlineContent":[{"code":"noindex(0 + 2 + c)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"length:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"length('Wapakoneta')"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"castObject:toType:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"CAST(ele, 'NSString')"},{"code":"CAST(ele, 'NSNumber')","type":"codeVoice"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A number of "},{"identifier":"#MapLibre-specific-functions","type":"reference","isActive":true},{"type":"text","text":" are also"},{"text":" ","type":"text"},{"text":"available.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following predefined functions are ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"strong"},{"type":"text","text":" supported:"}]},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializer parameter"}]}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"median:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"median({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"mode:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"mode({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"stddev:"}]}],[{"type":"paragraph","inlineContent":[{"code":"stddev({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"random"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"random()"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"randomn:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"randomn(10)"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"now","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"now()"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"bitwiseAnd:with:(5, 3)","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"bitwiseOr:with:(5, 3)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:"}]}],[{"type":"paragraph","inlineContent":[{"code":"bitwiseXor:with:(5, 3)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"leftshift:by:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"leftshift:by:(23, 1)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"rightshift:by:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"rightshift:by:(23, 1)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"onesComplement:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"onesComplement(255)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"distanceToLocation:fromLocation:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"distanceToLocation:fromLocation:(there, here)","type":"codeVoice"}]}]]]},{"text":"Conditionals","anchor":"Conditionals","type":"heading","level":3},{"inlineContent":[{"text":"Conditionals are supported via the built-in","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"text":" ","type":"text"},{"type":"text","text":"method and "},{"code":"TERNARY()","type":"codeVoice"},{"type":"text","text":" operator. If you need to express multiple cases"},{"text":" ","type":"text"},{"type":"text","text":"(“else-if”), you can either nest a conditional within a conditional or use the"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_if-code","isActive":true},{"type":"text","text":" or "},{"isActive":true,"identifier":"#code-mgl_match-code","type":"reference"},{"type":"text","text":" function."}],"type":"paragraph"},{"text":"Aggregates","anchor":"Aggregates","type":"heading","level":3},{"inlineContent":[{"text":"Aggregate expressions can contain arrays of expressions. In some cases, it is","type":"text"},{"text":" ","type":"text"},{"text":"possible to use the array itself instead of wrapping the array in an aggregate","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expression."}],"type":"paragraph"},{"type":"heading","level":3,"text":"Variables","anchor":"Variables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following variables are defined by this SDK for use with style layers:"}]},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Variable"}]}],[{"inlineContent":[{"text":"Type","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Meaning","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$featureIdentifier"}]}],[{"inlineContent":[{"text":"Any GeoJSON data type","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the "},{"code":"NSExpression.featureIdentifierVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}]}]],[[{"inlineContent":[{"code":"$geometryType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"String"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:","type":"text"},{"text":"*   ","type":"text"},{"code":"Point","type":"codeVoice"},{"type":"text","text":" for point features, corresponding to the "},{"type":"codeVoice","code":"MLNPointAnnotation"},{"text":" class","type":"text"},{"text":"*   ","type":"text"},{"code":"LineString","type":"codeVoice"},{"type":"text","text":" for polyline features, corresponding to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline"},{"text":" class","type":"text"},{"text":"*   ","type":"text"},{"type":"codeVoice","code":"Polygon"},{"type":"text","text":" for polygon features, corresponding to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon"},{"text":" class","type":"text"},{"type":"text","text":"This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.geometryTypeVariableExpression"},{"type":"text","text":" property."}]}]],[[{"inlineContent":[{"code":"$heatmapDensity","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","type":"reference","isActive":true},{"text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the ","type":"text"},{"code":"heatmapColor","type":"codeVoice"},{"type":"text","text":" property. This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.heatmapDensityVariableExpression"},{"type":"text","text":" property."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$zoomLevel"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"type":"paragraph","inlineContent":[{"text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.zoomLevelVariableExpression"},{"type":"text","text":" property."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$lineProgress"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"type":"paragraph","inlineContent":[{"text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient"},{"text":" property. It corresponds to the ","type":"text"},{"code":"NSExpression.lineProgressVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}]}]]]},{"type":"paragraph","inlineContent":[{"text":"In addition to these variables, you can define your own variables and refer to","type":"text"},{"type":"text","text":" "},{"text":"them elsewhere in the expression. The syntax for defining a variable makes use","type":"text"},{"text":" ","type":"text"},{"text":"of a ","type":"text"},{"overridingTitle":"MapLibre-specific function","overridingTitleInlineContent":[{"text":"MapLibre-specific function","type":"text"}],"type":"reference","identifier":"#MapLibre-specific-functions","isActive":true},{"text":" that takes an","type":"text"},{"type":"text","text":" "},{"code":"NSDictionary","type":"codeVoice"},{"text":" as an argument:","type":"text"}]},{"code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"],"syntax":"objc","type":"codeListing"},{"type":"codeListing","syntax":"swift","code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"]},{"text":"MapLibre-specific functions","level":2,"type":"heading","anchor":"MapLibre-specific-functions"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to a change in iOS 15.5, some of these stopped working. See "},{"type":"reference","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","isActive":true},{"text":" for more information and workarounds.","type":"text"}]}],"style":"warning","type":"aside","name":"Warning"},{"inlineContent":[{"type":"text","text":"For compatibility with the MapLibre Style Spec, the following functions"},{"type":"text","text":" "},{"type":"text","text":"are defined by this SDK. When setting a style layer property, you can call these"},{"text":" ","type":"text"},{"type":"text","text":"functions just like the predefined functions above, using either the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"text":" method or a convenient format","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string syntax:"}],"type":"paragraph"},{"anchor":"mgldoeshave","type":"heading","text":"mgl_does:have:","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_does:have:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_does:have:(SELF, '🧀🍔')","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"mgl_does:have:(%@, '🧀🍔')","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns a Boolean value indicating whether the dictionary has a value for the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"key or whether the evaluated object ("},{"type":"codeVoice","code":"SELF"},{"text":") has a value for the feature","type":"text"},{"type":"text","text":" "},{"text":"attribute. Compared to the ","type":"text"},{"identifier":"#code-mgl_has-code","type":"reference","isActive":true},{"type":"text","text":" custom function,"},{"text":" ","type":"text"},{"text":"that function’s target is instead passed in as the first argument to this","type":"text"},{"type":"text","text":" "},{"text":"function. Both functions are equivalent to the syntax ","type":"text"},{"code":"key != NIL","type":"codeVoice"},{"type":"text","text":" or"},{"text":" ","type":"text"},{"type":"codeVoice","code":"%@[key] != NIL"},{"text":" but can be used outside of a predicate.","type":"text"}]},{"level":3,"text":"mgl_interpolate:withCurveType:parameters:stops:","anchor":"mglinterpolatewithCurveTypeparametersstops","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)"}]},{"type":"paragraph","inlineContent":[{"text":"Produces continuous, smooth results by interpolating between pairs of input and","type":"text"},{"type":"text","text":" "},{"text":"output values (“stops”). Compared to the","type":"text"},{"type":"text","text":" "},{"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"custom function, the input expression (that function’s target) is instead passed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in as the first argument to this function."}]},{"level":3,"anchor":"mglstepfromstops","type":"heading","text":"mgl_step:from:stops:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_step:from:stops:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_step:from:stops:(x, 11, %@)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Produces discrete, stepped results by evaluating a piecewise-constant function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"defined by pairs of input and output values (“stops”). Compared to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"#code-mgl_stepwithminimum-stops-code","type":"reference"},{"text":" custom","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"function, the input expression (that function’s target) is instead passed in as"},{"text":" ","type":"text"},{"type":"text","text":"the first argument to this function."}]},{"text":"mgl_join:","anchor":"mgljoin","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_join:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_join({'Old', 'MacDonald'})","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the result of concatenating together all the elements of an array in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"order. Compared to the"},{"type":"text","text":" "},{"identifier":"#code-stringbyappendingstring-code","isActive":true,"type":"reference"},{"text":" custom","type":"text"},{"type":"text","text":" "},{"type":"text","text":"function, this function takes only one argument, which is an aggregate"},{"type":"text","text":" "},{"type":"text","text":"expression containing the strings to concatenate."}]},{"text":"mgl_acos:","type":"heading","level":3,"anchor":"mglacos"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_acos:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_acos(1)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the arccosine of the number."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_asin:","level":3,"type":"heading","anchor":"mglasin"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_asin:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_asin(0)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the arcsine of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"mgl_atan:","type":"heading","level":3,"anchor":"mglatan"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_atan:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_atan(20)"}]},{"inlineContent":[{"type":"text","text":"Returns the arctangent of the number."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"text":"mgl_cos:","anchor":"mglcos","type":"heading"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_cos:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"mgl_cos(0)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the cosine of the number."}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"anchor":"mgllog2","text":"mgl_log2:","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_log2:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_log2(1024)","type":"codeVoice"}]},{"inlineContent":[{"text":"Returns the base-2 logarithm of the number.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"mgl_round:","type":"heading","level":3,"anchor":"mglround"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_round:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_round(1.5)"}]},{"inlineContent":[{"text":"Returns the number rounded to the nearest integer. If the number is halfway","type":"text"},{"type":"text","text":" "},{"text":"between two integers, this function rounds it away from zero.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mglsin","text":"mgl_sin:","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"mgl_sin:","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_sin(0)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the sine of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"anchor":"mgltan","text":"mgl_tan:","type":"heading"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_tan:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_tan(0)"}]},{"inlineContent":[{"type":"text","text":"Returns the tangent of the number."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"type":"heading","anchor":"mgldistanceFrom","text":"mgl_distanceFrom:","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_distanceFrom:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_distanceFrom(%@)"},{"text":" with an ","type":"text"},{"type":"codeVoice","code":"MLNShape"}]},{"inlineContent":[{"type":"text","text":"Returns the straight-line distance from the evaluated object to the given shape."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_coalesce:","anchor":"mglcoalesce","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_coalesce:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_coalesce({x, y, z})","type":"codeVoice"}]},{"inlineContent":[{"text":"Returns the first non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" value from an array of expressions.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mglattributed","level":3,"text":"mgl_attributed:","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_attributed:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_attributed({x, y, z})"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Concatenates and returns the array of "},{"code":"MLNAttributedExpression","type":"codeVoice"},{"type":"text","text":" objects, for use"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"code":"MLNSymbolStyleLayer.text","type":"codeVoice"},{"type":"text","text":" property."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNAttributedExpression.attributes"},{"type":"text","text":" valid attributes."}]},{"header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"Key"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Value Type"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"MLNFontNamesAttribute","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" evaluating to an ","type":"text"},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" array."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontScaleAttribute"}]}],[{"inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" evaluating to an "},{"code":"NSNumber","type":"codeVoice"},{"type":"text","text":" value."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"MLNFontColorAttribute"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"text":" evaluating to an ","type":"text"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS) or "},{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)."}],"type":"paragraph"}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","text":"MLN_LET","level":3,"anchor":"MLNLET"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_LET:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" Any number of variable names interspersed with their assigned"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSExpression"},{"text":" values, followed by an ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" "},{"text":"that may contain references to those variables.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of evaluating an expression with the given variable values."},{"text":" ","type":"text"},{"text":"Compared to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_expressionwithcontext-code","isActive":true},{"text":" custom","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"function, this function takes the variable names and values inline before the"},{"text":" ","type":"text"},{"text":"expression that contains references to those variables.","type":"text"}]},{"level":3,"type":"heading","anchor":"MLNMATCH","text":"MLN_MATCH"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_MATCH:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" An input expression, then any number of argument pairs, followed by a default","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression. Each argument pair consists of a constant value followed by an"},{"type":"text","text":" "},{"type":"text","text":"expression to produce as a result of matching that constant value."},{"text":" ","type":"text"},{"text":"If the input value is an aggregate expression, then any of the constant values within","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that aggregate expression result in the following argument. This is shorthand for"},{"type":"text","text":" "},{"type":"text","text":"specifying an argument pair for each of the constant values within that aggregate"},{"type":"text","text":" "},{"type":"text","text":"expression. It is not possible to match the aggregate expression itself."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of matching the input expression against the given constant"},{"type":"text","text":" "},{"type":"text","text":"values."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]"},{"type":"text","text":" "},{"text":"method and the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"type":"heading","anchor":"MLNIF","text":"MLN_IF"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"MLN_IF:","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" Alternating ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":" conditionals and resulting expressions,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"followed by a default expression."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the first expression that meets the condition; otherwise, the default","type":"text"},{"text":" ","type":"text"},{"text":"value. Unlike","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"text":" or","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"TERNARY()"},{"text":" syntax, this function can accept multiple “if else” conditions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and is supported on iOS 8."},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"type":"text","text":" and macOS 10.10."},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"text":"; however, each conditional","type":"text"},{"type":"text","text":" "},{"text":"passed into this function must be wrapped in a constant expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"MLN_FUNCTION","type":"heading","anchor":"MLNFUNCTION","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"MLN_FUNCTION:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"MLN_FUNCTION('typeof', mystery)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" Any arguments required by the expression operator."}]},{"type":"paragraph","inlineContent":[{"text":"An expression exactly as defined by the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","isActive":true},{"type":"text","text":"."}]},{"anchor":"Custom-functions","level":2,"type":"heading","text":"Custom functions"},{"inlineContent":[{"type":"text","text":"The following custom functions are also available with the"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForFunction:selectorName:arguments:]","type":"codeVoice"},{"text":" method or the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" format string syntax."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some of these functions are defined as methods on their respective target"},{"type":"text","text":" "},{"type":"text","text":"classes, but you should not call them directly outside the context of an"},{"text":" ","type":"text"},{"text":"expression, because the result may differ from the evaluated expression’s result","type":"text"},{"type":"text","text":" "},{"text":"or may result in undefined behavior.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The MapLibre Style Spec defines some operators for which no custom"},{"type":"text","text":" "},{"text":"function is available. To use these operators in an ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":", call the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"#code-mgl_function-code"},{"type":"text","text":" function with the same arguments"},{"type":"text","text":" "},{"text":"that the operator expects.","type":"text"}]},{"anchor":"boolValue","type":"heading","text":"boolValue","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"boolValue"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(1, 'boolValue')"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a number or string.","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" None.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Boolean representation of the target: "},{"code":"FALSE","type":"codeVoice"},{"type":"text","text":" when then input is an"},{"text":" ","type":"text"},{"type":"text","text":"empty string, 0, "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", "},{"type":"codeVoice","code":"NIL"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"NaN"},{"type":"text","text":", otherwise "},{"code":"TRUE","type":"codeVoice"},{"text":".","type":"text"}]},{"text":"mgl_has:","anchor":"mglhas","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_has:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to an "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" "},{"text":"or the evaluated object (","type":"text"},{"type":"codeVoice","code":"SELF"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to an "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"representing the key to look up in the dictionary or the feature attribute to"},{"text":" ","type":"text"},{"text":"look up in the evaluated object (see ","type":"text"},{"code":"MLNFeature.attributes","type":"codeVoice"},{"type":"text","text":")."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"code":"true","type":"codeVoice"},{"text":" if the dictionary has a value for the key or if the evaluated","type":"text"},{"text":" ","type":"text"},{"text":"object has a value for the feature attribute.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-mgl_does-have-code","isActive":true},{"type":"text","text":" function, which is used on its own"},{"text":" ","type":"text"},{"type":"text","text":"without the "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator. You can also check whether an object has an"},{"type":"text","text":" "},{"text":"attribute by comparing the key path to ","type":"text"},{"code":"NIL","type":"codeVoice"},{"text":", for example ","type":"text"},{"type":"codeVoice","code":"cheeseburger != NIL"},{"type":"text","text":" "},{"text":"or ","type":"text"},{"type":"codeVoice","code":"burger.cheese != NIL"}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"mglexpressionWithContext","text":"mgl_expressionWithContext:"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_expressionWithContext:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)"},{"type":"text","text":" with"},{"type":"text","text":" "},{"type":"text","text":"a dictionary containing "},{"code":"ios","type":"codeVoice"},{"type":"text","text":" and "},{"code":"macos","type":"codeVoice"},{"type":"text","text":" keys"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that may contain references to the variables","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"defined in the context dictionary."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSDictionary"},{"text":" with ","type":"text"},{"code":"NSString","type":"codeVoice"},{"text":"s as keys and","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":"s as values. Each key is a variable name and each","type":"text"},{"type":"text","text":" "},{"text":"value is the variable’s value within the target expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The target expression with variable subexpressions replaced with the values"},{"text":" ","type":"text"},{"type":"text","text":"defined in the context dictionary."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-mgl_let-code","isActive":true},{"type":"text","text":" function, which is used on its own without the"},{"text":" ","type":"text"},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}]},{"type":"heading","level":3,"anchor":"mglinterpolateWithCurveTypeparametersstops","text":"mgl_interpolateWithCurveType:parameters:stops:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_interpolateWithCurveType:parameters:stops:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)","type":"codeVoice"},{"text":" ","type":"text"},{"text":"with a dictionary containing zoom levels or other constant values as keys","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number and contains a"},{"type":"text","text":" "},{"type":"text","text":"variable or key path expression."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" The first argument is one of the following strings denoting curve types:"},{"text":" ","type":"text"},{"code":"linear","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"exponential"},{"type":"text","text":", or "},{"type":"codeVoice","code":"cubic-bezier"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The second argument is an expression providing parameters for the curve:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the curve type is ","type":"text"},{"type":"codeVoice","code":"linear"},{"type":"text","text":", the argument is "},{"type":"codeVoice","code":"NIL"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"If the curve type is ","type":"text"},{"type":"codeVoice","code":"exponential"},{"type":"text","text":", the argument is an"},{"text":" ","type":"text"},{"text":"expression that evaluates to a number, specifying the base of the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"exponential interpolation."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the curve type is ","type":"text"},{"type":"codeVoice","code":"cubic-bezier"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"text":"array or aggregate expression containing four expressions, each","type":"text"},{"type":"text","text":" "},{"type":"text","text":"evaluating to a number. The four numbers are control points for the"},{"type":"text","text":" "},{"type":"text","text":"cubic Bézier curve."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The third argument is an "},{"code":"NSDictionary","type":"codeVoice"},{"text":" object representing the","type":"text"},{"text":" ","type":"text"},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A value interpolated along the continuous mathematical function defined by the"},{"type":"text","text":" "},{"type":"text","text":"arguments, with the target as the input to the function."}]},{"inlineContent":[{"text":"The input expression is matched against the keys in the stop dictionary. The","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"type":"text","text":" "},{"type":"text","text":"values may be constant values or "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" objects. For example, you can"},{"text":" ","type":"text"},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"text":" ","type":"text"},{"text":"yellow, orange, and red as the values.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"function, which is used on its own without the "},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}]},{"anchor":"mglnumberWithFallbackValues","level":3,"type":"heading","text":"mgl_numberWithFallbackValues:"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"doubleValue","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"floatValue"},{"type":"text","text":", or"},{"type":"text","text":" "},{"type":"codeVoice","code":"decimalValue"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"text":" ","type":"text"},{"type":"text","text":"string."}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" Zero or more "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"text":" ","type":"text"},{"text":"or string.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A numeric representation of the target:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"doubleValue","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"floatValue","type":"codeVoice"},{"type":"text","text":", or"},{"text":" ","type":"text"},{"type":"codeVoice","code":"decimalValue"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" ","type":"text"},{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"type":"text","text":"string."}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"Zero or more "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"text":" ","type":"text"},{"text":"or string.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A numeric representation of the target:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"text":", the result is 0.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"If the target is a string, it is converted to a number as specified by the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"“"},{"isActive":true,"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type"},{"text":"”","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If multiple values are provided, each one is evaluated in order until the"},{"type":"text","text":" "},{"text":"first successful conversion is obtained.","type":"text"}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"text":" ","type":"text"},{"text":"number by passing the value and the string ","type":"text"},{"code":"NSNumber","type":"codeVoice"},{"text":" into the ","type":"text"},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" "},{"type":"text","text":"operator."}]},{"anchor":"mglstepWithMinimumstops","level":3,"text":"mgl_stepWithMinimum:stops:","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_stepWithMinimum:stops:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)","type":"codeVoice"},{"type":"text","text":" with"},{"type":"text","text":" "},{"type":"text","text":"a dictionary with zoom levels or other constant values as keys"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" "},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a number and contains a"},{"text":" ","type":"text"},{"text":"variable or key path expression.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" ","type":"text"},{"type":"text","text":"The first argument is an expression that evaluates to a number, specifying"},{"text":" ","type":"text"},{"type":"text","text":"the minimum value in case the target is less than any of the stops in the"},{"type":"text","text":" "},{"text":"second argument.","type":"text"}]},{"inlineContent":[{"text":"The second argument is an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" object representing the"},{"text":" ","type":"text"},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The output value of the stop whose key is just less than the evaluated target,"},{"type":"text","text":" "},{"text":"or the minimum value if the target is less than the least of the stops’ keys.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The input expression is matched against the keys in the stop dictionary. The","type":"text"},{"text":" ","type":"text"},{"text":"keys may be feature attribute values, zoom levels, or heatmap densities. The","type":"text"},{"text":" ","type":"text"},{"text":"values may be constant values or ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" objects. For example, you can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"type":"text","text":" "},{"text":"yellow, orange, and red as the values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"stringByAppendingString:","anchor":"stringByAppendingString","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"stringByAppendingString:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"One or more "},{"code":"NSExpression","type":"codeVoice"},{"text":"s, each evaluating to a string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The target string with each of the argument strings appended in order.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method and is similar to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"type":"text","text":" "},{"identifier":"#code-mgl_join-code","type":"reference","isActive":true},{"type":"text","text":" function, which concatenates multiple"},{"text":" ","type":"text"},{"type":"text","text":"expressions and is used on its own without the "},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}],"type":"paragraph"},{"type":"heading","text":"stringValue","level":3,"anchor":"stringValue"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"stringValue"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"FUNCTION(ele, 'stringValue')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" "},{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"text":" ","type":"text"},{"text":"string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"None."}]},{"inlineContent":[{"text":"A string representation of the target:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"text":"NIL","type":"text"},{"text":", the result is the empty string.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"If the target is a Boolean value, the result is the string ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a number, it is converted to a string as specified by the"},{"text":" ","type":"text"},{"text":"“","type":"text"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","isActive":true,"type":"reference"},{"type":"text","text":"”"},{"type":"text","text":" "},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a color, it is converted to a string of the form","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"rgba(r,g,b,a)"},{"type":"text","text":", where "},{"type":"text","text":"r"},{"type":"text","text":", "},{"text":"g","type":"text"},{"text":", and ","type":"text"},{"type":"text","text":"b"},{"text":" are","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"numerals ranging from 0 to 255 and "},{"text":"a","type":"text"},{"type":"text","text":" ranges from 0 to 1."}]}]},{"content":[{"inlineContent":[{"text":"Otherwise, the target is converted to a string in the format specified by the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"function of the ECMAScript Language Specification."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"type":"text","text":" "},{"type":"text","text":"string by passing the value and the string "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" into the "},{"code":"CAST()","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"operator."}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"kind":"article","abstract":[{"type":"text","text":"Using "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" with MapLibre iOS"}],"identifier":{"interfaceLanguage":"occ","url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions"},"seeAlsoSections":[{"identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"],"generated":true,"title":"Other Articles"}],"metadata":{"modules":[{"name":"MapLibre"}],"role":"article","title":"Predicates and expressions","roleHeading":"Article"},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"abstract":[{"text":"Learn how to work with gesture recognizers","type":"text"}],"role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","title":"User Interactions","type":"topic","kind":"article","url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers"},"#code-mgl_has-code":{"title":"mgl_has:","url":"#code-mgl_has-code","titleInlineContent":[{"code":"mgl_has:","type":"codeVoice"}],"type":"link","identifier":"#code-mgl_has-code"},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"title":"NumberToString","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","type":"link","titleInlineContent":[{"text":"NumberToString","type":"text"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type"},"#code-mgl_function-code":{"title":"MLN_FUNCTION()","url":"#code-mgl_function-code","titleInlineContent":[{"code":"MLN_FUNCTION()","type":"codeVoice"}],"type":"link","identifier":"#code-mgl_function-code"},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"title":"interpolate","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","type":"link","titleInlineContent":[{"code":"interpolate","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"title":"functions predefined","url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","titleInlineContent":[{"text":"functions predefined","type":"text"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"url":"\/documentation\/maplibre\/mlnpolyline","role":"symbol","fragments":[{"kind":"identifier","text":"MLNPolyline"}],"abstract":[{"type":"text","text":"An "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","type":"reference"},{"type":"text","text":" object represents a shape consisting of two or more vertices,"},{"type":"text","text":" "},{"type":"text","text":"specified as "},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"type":"text","text":" instances, and the line segments that"},{"type":"text","text":" "},{"text":"connect them. For example, you could use an polyline to represent a road or the","type":"text"},{"text":" ","type":"text"},{"text":"path along which something moves.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","type":"topic","title":"MLNPolyline","kind":"symbol"},"#code-mgl_stepwithminimum-stops-code":{"title":"mgl_stepWithMinimum:stops:","identifier":"#code-mgl_stepwithminimum-stops-code","type":"link","titleInlineContent":[{"code":"mgl_stepWithMinimum:stops:","type":"codeVoice"}],"url":"#code-mgl_stepwithminimum-stops-code"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","kind":"symbol","url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient","abstract":[{"type":"text","text":"The color gradient with which the line will be drawn. This property only has an"},{"text":" ","type":"text"},{"text":"effect on lines defined by an ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true},{"text":" whose ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference"},{"text":" ","type":"text"},{"text":"option is set to ","type":"text"},{"code":"YES","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","role":"symbol","title":"lineGradient","fragments":[{"kind":"identifier","text":"lineGradient"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"type":"topic","url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates","role":"article","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","title":"Tile URL Templates","abstract":[{"type":"text","text":"Using URL Templates when defining tile sources"}]},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"title":"sin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","type":"link","titleInlineContent":[{"code":"sin","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin"},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"title":"tan","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","titleInlineContent":[{"code":"tan","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan"},"https://maplibre.org/maplibre-style-spec/expressions/":{"title":"MapLibre Style Spec","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","type":"link","titleInlineContent":[{"text":"MapLibre Style Spec","type":"text"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/"},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"title":"format","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","titleInlineContent":[{"code":"format","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format"},"#key-paths":{"title":"key paths","identifier":"#key-paths","type":"link","titleInlineContent":[{"text":"key paths","type":"text"}],"url":"#key-paths"},"#code-mgl_let-code":{"title":"MLN_LET","url":"#code-mgl_let-code","titleInlineContent":[{"code":"MLN_LET","type":"codeVoice"}],"type":"link","identifier":"#code-mgl_let-code"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"title":"to-number","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","type":"link","titleInlineContent":[{"code":"to-number","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},"https://tc39.github.io/ecma262/#sec-json.stringify":{"title":"JSON.stringify()","url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","titleInlineContent":[{"code":"JSON.stringify()","type":"codeVoice"}],"type":"link","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"type":"topic","url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts","role":"article","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","title":"Customizing Fonts","abstract":[{"type":"text","text":"Using custom fonts"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"title":"MLNShapeSource","kind":"symbol","type":"topic","url":"\/documentation\/maplibre\/mlnshapesource","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","role":"symbol","fragments":[{"kind":"identifier","text":"MLNShapeSource"}],"abstract":[{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true,"type":"reference"},{"type":"text","text":" is a map content source that supplies vector shapes to be"},{"text":" ","type":"text"},{"type":"text","text":"shown on the map. The shapes may be instances of "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or they may be defined by local or external"},{"type":"text","text":" "},{"text":"GeoJSON","type":"text"},{"text":" code. A shape source is added to an","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true},{"type":"text","text":" object along with an "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","type":"reference","isActive":true},{"type":"text","text":" object. The vector style"},{"text":" ","type":"text"},{"text":"layer defines the appearance of any content supplied by the shape source. You","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can update a shape source by setting its "},{"type":"codeVoice","code":"shape"},{"type":"text","text":" or "},{"code":"URL","type":"codeVoice"},{"type":"text","text":" property."}]},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"title":"mgl_interpolate:withCurveType:parameters:stops:","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","type":"link","titleInlineContent":[{"code":"mgl_interpolate:withCurveType:parameters:stops:","type":"codeVoice"}],"url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"type":"topic","url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","role":"article","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","title":"Info.plist Keys","abstract":[{"type":"text","text":"MapLibre Native for iOS supports custom "},{"type":"codeVoice","code":"Info.plist"},{"type":"text","text":" keys in your application in order to configure various settings."}]},"#code-mgl_if-code":{"title":"MLN_IF()","url":"#code-mgl_if-code","titleInlineContent":[{"code":"MLN_IF()","type":"codeVoice"}],"type":"link","identifier":"#code-mgl_if-code"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"title":"MLNPolygon","url":"\/documentation\/maplibre\/mlnpolygon","role":"symbol","fragments":[{"text":"MLNPolygon","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"An ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true},{"type":"text","text":" object represents a closed shape consisting of four or more"},{"text":" ","type":"text"},{"text":"vertices, specified as ","type":"text"},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"text":" instances, and the edges that","type":"text"},{"type":"text","text":" "},{"text":"connect them. For example, you could use a polygon shape to represent a","type":"text"},{"text":" ","type":"text"},{"text":"building, a lake, or an area you want to highlight.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","type":"topic"},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"title":"mgl_interpolateWithCurveType:parameters:stops:","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","type":"link","titleInlineContent":[{"code":"mgl_interpolateWithCurveType:parameters:stops:","type":"codeVoice"}],"url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code"},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"title":"atan","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","titleInlineContent":[{"code":"atan","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"title":"+[NSExpression expressionForFunction:arguments:] method","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","type":"link","titleInlineContent":[{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"text":" method","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init"},"#code-mgl_join-code":{"title":"mgl_join:","url":"#code-mgl_join-code","titleInlineContent":[{"code":"mgl_join:","type":"codeVoice"}],"type":"link","identifier":"#code-mgl_join-code"},"https://github.com/maplibre/maplibre-native/issues/331":{"title":"#331","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","type":"link","titleInlineContent":[{"text":"#331","type":"text"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"title":"match","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","titleInlineContent":[{"code":"match","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"type":"topic","url":"\/documentation\/maplibre-native-for-ios\/for_style_authors","role":"article","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors","title":"Information for Style Authors","abstract":[]},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"title":"NSExpression+MLNAdditions.h","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","type":"link","titleInlineContent":[{"code":"NSExpression+MLNAdditions.h","type":"codeVoice"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h"},"#using-expressions-to-configure-layout-and-paint-attributes":{"title":"inside an expression","url":"#using-expressions-to-configure-layout-and-paint-attributes","titleInlineContent":[{"text":"inside an expression","type":"text"}],"type":"link","identifier":"#using-expressions-to-configure-layout-and-paint-attributes"},"#MapLibre-specific-functions":{"title":"MapLibre-specific functions","identifier":"#MapLibre-specific-functions","type":"link","titleInlineContent":[{"text":"MapLibre-specific functions","type":"text"}],"url":"#MapLibre-specific-functions"},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"title":"ToNumber Applied to the String Type","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","titleInlineContent":[{"text":"ToNumber Applied to the String Type","type":"text"}],"type":"link","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type"},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"title":"log2","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","type":"link","titleInlineContent":[{"code":"log2","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"title":"round","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","titleInlineContent":[{"code":"round","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"title":"Predicate Programming Guide","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"link","titleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}],"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html"},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"title":"coalesce","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","titleInlineContent":[{"code":"coalesce","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce"},"#code-mgl_match-code":{"title":"MLN_MATCH()","identifier":"#code-mgl_match-code","type":"link","titleInlineContent":[{"code":"MLN_MATCH()","type":"codeVoice"}],"url":"#code-mgl_match-code"},"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"title":"kernel density estimation","url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","titleInlineContent":[{"text":"kernel density estimation","type":"text"}],"type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"title":"case","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","type":"link","titleInlineContent":[{"code":"case","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case"},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"title":"acos","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","titleInlineContent":[{"code":"acos","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"title":"has","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","type":"link","titleInlineContent":[{"code":"has","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has"},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"title":"let","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","titleInlineContent":[{"code":"let","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"},"#code-mgl_does-have-code":{"title":"mgl_does:have:","identifier":"#code-mgl_does-have-code","type":"link","titleInlineContent":[{"code":"mgl_does:have:","type":"codeVoice"}],"url":"#code-mgl_does-have-code"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"title":"to-string","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","titleInlineContent":[{"code":"to-string","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string"},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"title":"concat","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","type":"link","titleInlineContent":[{"code":"concat","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"title":"step","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","titleInlineContent":[{"code":"step","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"type":"topic","url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","kind":"article","title":"Adding Multiple Images","abstract":[{"type":"text","text":"Adding images to the map and assigning them to POI types"}]},"#code-mgl_expressionwithcontext-code":{"title":"mgl_expressionWithContext:","identifier":"#code-mgl_expressionwithcontext-code","type":"link","titleInlineContent":[{"code":"mgl_expressionWithContext:","type":"codeVoice"}],"url":"#code-mgl_expressionwithcontext-code"},"#code-stringbyappendingstring-code":{"title":"stringByAppendingString:","url":"#code-stringbyappendingstring-code","titleInlineContent":[{"code":"stringByAppendingString:","type":"codeVoice"}],"type":"link","identifier":"#code-stringbyappendingstring-code"},"doc://org.swift.MyProject/documentation/MapLibre":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","kind":"symbol","type":"topic","url":"\/documentation\/maplibre","role":"collection","abstract":[{"text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling.","type":"text"}],"title":"MapLibre"},"#variables":{"title":"variables","identifier":"#variables","type":"link","titleInlineContent":[{"text":"variables","type":"text"}],"url":"#variables"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"title":"asin","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","titleInlineContent":[{"code":"asin","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"title":"cos","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","type":"link","titleInlineContent":[{"code":"cos","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"title":"distance","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","titleInlineContent":[{"code":"distance","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"}}}