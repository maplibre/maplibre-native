{"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"]}],"seeAlsoSections":[{"identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"],"anchor":"Other-Articles","generated":true,"title":"Other Articles"}],"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"text":"Style layers use predicates and expressions to determine what to display and how","type":"text"},{"text":" ","type":"text"},{"text":"to format it. ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Predicates","type":"text"}]},{"text":" are represented by the same ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":" class that","type":"text"},{"text":" ","type":"text"},{"text":"filters results from Core Data or items in an ","type":"text"},{"code":"NSArray","type":"codeVoice"},{"text":" in Objective-C.","type":"text"},{"text":" ","type":"text"},{"text":"Predicates are based on ","type":"text"},{"inlineContent":[{"text":"expressions","type":"text"}],"type":"emphasis"},{"text":", represented by the ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" class.","type":"text"},{"text":" ","type":"text"},{"text":"Somewhat unusually, style layers also use expressions on their own.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This document discusses the specific subset of the predicate and expression","type":"text"},{"text":" ","type":"text"},{"text":"syntax supported by this SDK. For a more general introduction to predicates and","type":"text"},{"text":" ","type":"text"},{"text":"expressions, consult the","type":"text"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","isActive":true,"type":"reference"}]},{"text":" ","type":"text"},{"text":"in Apple developer documentation. For additional detail on how this SDK has","type":"text"},{"text":" ","type":"text"},{"text":"extended the ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" class, see the ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h"},{"text":" header.","type":"text"}]},{"level":2,"type":"heading","anchor":"Using-predicates-to-filter-vector-data","text":"Using predicates to filter vector data"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most style layer classes display "},{"type":"codeVoice","code":"MLNFeature"},{"type":"text","text":" objects that you can show or hide"},{"type":"text","text":" "},{"type":"text","text":"based on the feature’s attributes. Use the "},{"type":"codeVoice","code":"MLNVectorStyleLayer.predicate"},{"type":"text","text":" "},{"type":"text","text":"property to include only the features in the source layer that satisfy a"},{"type":"text","text":" "},{"type":"text","text":"condition that you define."}]},{"level":3,"type":"heading","anchor":"Operators","text":"Operators"},{"type":"paragraph","inlineContent":[{"text":"The following comparison operators are supported:","type":"text"}]},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key = value"},{"type":"codeVoice","code":"key == value"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSGreaterThanOrEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key >= value"},{"type":"codeVoice","code":"key => value"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSLessThanOrEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"key <= value","type":"codeVoice"},{"code":"key =< value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSGreaterThanPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key > value"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSLessThanPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key < value"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNotEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"key != value","type":"codeVoice"},{"code":"key <> value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSBetweenPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key BETWEEN { 32, 212 }"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To test whether a feature has or lacks a specific attribute, compare the"},{"type":"text","text":" "},{"type":"text","text":"attribute to "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":". Predicates created using the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSPredicate predicateWithValue:]"},{"type":"text","text":" method are also supported. String"},{"type":"text","text":" "},{"type":"text","text":"operators and custom operators are not supported."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following compound operators are supported:"}]},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSCompoundPredicateType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSAndPredicateType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"predicate1 AND predicate2"},{"type":"codeVoice","code":"predicate1 && predicate2"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSOrPredicateType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"predicate1 OR predicate2"},{"type":"text","text":"predicate1 || predicate2"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNotPredicateType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NOT predicate"},{"type":"codeVoice","code":"!predicate"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following aggregate operators are supported:"}]},{"header":"row","rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSInPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSContainsPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key"}],"type":"paragraph"}]]],"type":"table"},{"inlineContent":[{"text":"You can use the ","type":"text"},{"code":"IN","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"CONTAINS","type":"codeVoice"},{"text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature (","type":"text"},{"code":"SELF","type":"codeVoice"},{"text":") lies within a given ","type":"text"},{"code":"MLNShape","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:","type":"text"}],"type":"paragraph"},{"syntax":"objc","code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"],"type":"codeListing"},{"syntax":"swift","code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"],"type":"codeListing"},{"inlineContent":[{"text":"The following combinations of comparison operators and modifiers are supported:","type":"text"}],"type":"paragraph"},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateModifier"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAllPredicateModifier"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSNotEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ALL haystack != needle"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAnyPredicateModifier"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ANY haystack = needle"},{"type":"codeVoice","code":"SOME haystack = needle"}]}]]],"type":"table"},{"inlineContent":[{"text":"The following comparison predicate options are supported for comparison and","type":"text"},{"text":" ","type":"text"},{"text":"aggregate operators that are used in the predicate:","type":"text"}],"type":"paragraph"},{"header":"row","rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateOptions"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSCaseInsensitivePredicateOption","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"'QUEBEC' =[c] 'Quebec'","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSDiacriticInsensitivePredicateOption","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"'Québec' =[d] 'Quebec'"}],"type":"paragraph"}]]],"type":"table"},{"inlineContent":[{"text":"Other comparison predicate options are unsupported, namely ","type":"text"},{"code":"l","type":"codeVoice"},{"text":" ","type":"text"},{"text":"(for locale sensitivity) and ","type":"text"},{"code":"n","type":"codeVoice"},{"text":" (for normalization). A comparison is","type":"text"},{"text":" ","type":"text"},{"text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison","type":"text"},{"text":" ","type":"text"},{"text":"predicate options are not supported in conjunction with comparison modifiers","type":"text"},{"text":" ","type":"text"},{"text":"like ","type":"text"},{"code":"ALL","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"ANY","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Operands","level":3,"anchor":"Operands","type":"heading"},{"inlineContent":[{"text":"Operands in predicates can be ","type":"text"},{"isActive":true,"identifier":"#variables","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"#key-paths","type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"or almost anything else that can appear","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"#using-expressions-to-configure-layout-and-paint-attributes","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Automatic type casting is not performed. Therefore, a feature only matches a","type":"text"},{"text":" ","type":"text"},{"text":"predicate if its value for the attribute in question is of the same type as the","type":"text"},{"text":" ","type":"text"},{"text":"value specified in the predicate. Use the ","type":"text"},{"code":"CAST()","type":"codeVoice"},{"text":" operator to convert a key","type":"text"},{"text":" ","type":"text"},{"text":"path or variable into a matching type:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast a value to a number, use ","type":"text"},{"code":"CAST(key, 'NSNumber')","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast a value to a string, use "},{"type":"codeVoice","code":"CAST(key, 'NSString')"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"To cast a value to a color, use "},{"type":"codeVoice","code":"CAST(key, 'UIColor')"},{"type":"text","text":" on iOS and "},{"type":"codeVoice","code":"CAST(key, 'NSColor')"},{"type":"text","text":" on macOS."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast an ","type":"text"},{"code":"NSColor","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"UIColor","type":"codeVoice"},{"text":" object to an array, use ","type":"text"},{"code":"CAST(noindex(color), 'NSArray')","type":"codeVoice"},{"text":".","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"For details about the predicate format string syntax, consult the “Predicate"},{"type":"text","text":" "},{"type":"text","text":"Format String Syntax” chapter of the"},{"type":"text","text":" "},{"inlineContent":[{"overridingTitle":"Predicate Programming Guide","overridingTitleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}],"isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"reference"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"in Apple developer documentation."}],"type":"paragraph"},{"level":2,"anchor":"Using-expressions-to-configure-layout-and-paint-attributes","type":"heading","text":"Using expressions to configure layout and paint attributes"},{"inlineContent":[{"type":"text","text":"An expression can contain subexpressions of various types. Each of the supported"},{"type":"text","text":" "},{"type":"text","text":"types of expressions is discussed below."}],"type":"paragraph"},{"level":3,"anchor":"Constant-values","type":"heading","text":"Constant values"},{"inlineContent":[{"text":"A constant value can be of any of the following types:","type":"text"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Objective-C"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSColor"},{"text":" (macOS)","type":"text"},{"type":"codeVoice","code":"UIColor"},{"text":" (iOS)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSColor","type":"codeVoice"},{"text":" (macOS)","type":"text"},{"code":"UIColor","type":"codeVoice"},{"text":" (iOS)","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSString","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSString"}]}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSArray<NSNumber>"}]}],[{"type":"paragraph","inlineContent":[{"code":"[Float]","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSArray<NSString>"}]}],[{"type":"paragraph","inlineContent":[{"code":"[String]","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.CGVectorValue"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue"},{"type":"text","text":" containing "},{"type":"codeVoice","code":"CGVector"},{"type":"text","text":" (macOS)"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSValue.cgVectorValue","type":"codeVoice"},{"text":" (iOS)","type":"text"},{"code":"NSValue","type":"codeVoice"},{"text":" containing ","type":"text"},{"code":"CGVector","type":"codeVoice"},{"text":" (macOS)","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.UIEdgeInsetsValue"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"type":"text","text":" (macOS)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.uiEdgeInsetsValue"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"type":"text","text":" (macOS)"}]}]]],"type":"table","header":"row"},{"inlineContent":[{"text":"For literal floating-point values, use ","type":"text"},{"type":"codeVoice","code":"-[NSNumber numberWithDouble:]"},{"text":" instead","type":"text"},{"text":" ","type":"text"},{"text":"of ","type":"text"},{"type":"codeVoice","code":"-[NSNumber numberWithFloat:]"},{"text":" to avoid precision issues.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Key-paths","type":"heading","text":"Key paths"},{"inlineContent":[{"text":"A key path expression refers to an attribute of the ","type":"text"},{"type":"codeVoice","code":"MLNFeature"},{"text":" object being","type":"text"},{"text":" ","type":"text"},{"text":"evaluated for display. For example, if a polygon’s ","type":"text"},{"type":"codeVoice","code":"MLNFeature.attributes"},{"text":" ","type":"text"},{"text":"dictionary contains the ","type":"text"},{"type":"codeVoice","code":"floorCount"},{"text":" key, then the key path ","type":"text"},{"type":"codeVoice","code":"floorCount"},{"text":" refers","type":"text"},{"text":" ","type":"text"},{"text":"to the value of the ","type":"text"},{"type":"codeVoice","code":"floorCount"},{"text":" attribute when evaluating that particular","type":"text"},{"text":" ","type":"text"},{"text":"polygon.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following special attributes are also available on features that are produced"},{"type":"text","text":" "},{"type":"text","text":"as a result of clustering multiple point features together in a shape source:"}],"type":"paragraph"},{"rows":[[[{"inlineContent":[{"text":"Attribute","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Type","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Meaning","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"cluster","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Bool"}],"type":"paragraph"}],[{"inlineContent":[{"text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"cluster_id"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Identifier for the point cluster."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"point_count"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"The number of point features in a given cluster.","type":"text"}],"type":"paragraph"}]]],"type":"table","header":"row"},{"inlineContent":[{"text":"Some characters may not be used directly as part of a key path in a format","type":"text"},{"text":" ","type":"text"},{"text":"string. For example, if a feature’s attribute is named ","type":"text"},{"type":"codeVoice","code":"ISO 3166-1:2006"},{"text":", an","type":"text"},{"text":" ","type":"text"},{"text":"expression format string of ","type":"text"},{"type":"codeVoice","code":"lowercase(ISO 3166-1:2006)"},{"text":" or a predicate format","type":"text"},{"text":" ","type":"text"},{"text":"string of ","type":"text"},{"type":"codeVoice","code":"ISO 3166-1:2006 == 'US-OH'"},{"text":" would raise an exception. Instead, use a","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"%K"},{"text":" placeholder or the ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForKeyPath:]"},{"text":" initializer:","type":"text"}],"type":"paragraph"},{"syntax":"objc","code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"],"type":"codeListing"},{"syntax":"swift","code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"],"type":"codeListing"},{"type":"heading","level":3,"text":"Functions","anchor":"Functions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","isActive":true},{"type":"text","text":" "},{"type":"text","text":"by the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the following subset is supported in layer attribute values:"}]},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Initializer parameter","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"average:"}]}],[{"type":"paragraph","inlineContent":[{"code":"average({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"sum:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"sum({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"count:"}]}],[{"type":"paragraph","inlineContent":[{"code":"count({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"min:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"min({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"max:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"max({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"add:to:"}]}],[{"type":"paragraph","inlineContent":[{"code":"1 + 2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"from:subtract:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"2 - 1"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"multiply:by:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"1 * 2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"divide:by:"}]}],[{"type":"paragraph","inlineContent":[{"code":"1 \/ 2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"modulus:by:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:(1, 2)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"sqrt:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt(2)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"log:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"log(10)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ln:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ln(2)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"raise:toPower:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"2 ** 2"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"exp:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"exp(0)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"ceiling:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ceiling(0.99999)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"abs:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"abs(-1)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"trunc:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"trunc(6378.1370)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"floor:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"floor(-0.99999)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"uppercase:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"uppercase('Elysian Fields')"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lowercase:"}]}],[{"type":"paragraph","inlineContent":[{"code":"lowercase('DOWNTOWN')","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"noindex:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"noindex(0 + 2 + c)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"length:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"length('Wapakoneta')","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"castObject:toType:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"CAST(ele, 'NSString')","type":"codeVoice"},{"code":"CAST(ele, 'NSNumber')","type":"codeVoice"}]}]]],"header":"row"},{"type":"paragraph","inlineContent":[{"text":"A number of ","type":"text"},{"identifier":"#MapLibre-specific-functions","isActive":true,"type":"reference"},{"text":" are also","type":"text"},{"text":" ","type":"text"},{"text":"available.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following predefined functions are "},{"type":"strong","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" supported:"}]},{"type":"table","rows":[[[{"inlineContent":[{"type":"text","text":"Initializer parameter"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"median:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"median({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"mode:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"mode({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"stddev:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"stddev({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"random","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"random()","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"randomn:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"randomn(10)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"now"}],"type":"paragraph"}],[{"inlineContent":[{"code":"now()","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"bitwiseAnd:with:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"bitwiseAnd:with:(5, 3)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:(5, 3)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:(5, 3)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"leftshift:by:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"leftshift:by:(23, 1)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"rightshift:by:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"rightshift:by:(23, 1)"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"onesComplement:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"onesComplement(255)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:(there, here)"}],"type":"paragraph"}]]],"header":"row"},{"type":"heading","level":3,"text":"Conditionals","anchor":"Conditionals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conditionals are supported via the built-in"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"method and "},{"code":"TERNARY()","type":"codeVoice"},{"type":"text","text":" operator. If you need to express multiple cases"},{"type":"text","text":" "},{"type":"text","text":"(“else-if”), you can either nest a conditional within a conditional or use the"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_if-code","isActive":true},{"type":"text","text":" or "},{"type":"reference","identifier":"#code-mgl_match-code","isActive":true},{"type":"text","text":" function."}]},{"type":"heading","level":3,"text":"Aggregates","anchor":"Aggregates"},{"type":"paragraph","inlineContent":[{"text":"Aggregate expressions can contain arrays of expressions. In some cases, it is","type":"text"},{"text":" ","type":"text"},{"text":"possible to use the array itself instead of wrapping the array in an aggregate","type":"text"},{"text":" ","type":"text"},{"text":"expression.","type":"text"}]},{"type":"heading","level":3,"text":"Variables","anchor":"Variables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following variables are defined by this SDK for use with style layers:"}]},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Variable"}]}],[{"type":"paragraph","inlineContent":[{"text":"Type","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Meaning","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"$featureIdentifier","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Any GeoJSON data type"}]}],[{"type":"paragraph","inlineContent":[{"text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the ","type":"text"},{"code":"NSExpression.featureIdentifierVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$geometryType"}]}],[{"type":"paragraph","inlineContent":[{"text":"String","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:"},{"type":"text","text":"*   "},{"code":"Point","type":"codeVoice"},{"type":"text","text":" for point features, corresponding to the "},{"code":"MLNPointAnnotation","type":"codeVoice"},{"type":"text","text":" class"},{"type":"text","text":"*   "},{"code":"LineString","type":"codeVoice"},{"type":"text","text":" for polyline features, corresponding to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline"},{"type":"text","text":" class"},{"type":"text","text":"*   "},{"code":"Polygon","type":"codeVoice"},{"type":"text","text":" for polygon features, corresponding to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon"},{"type":"text","text":" class"},{"type":"text","text":"This variable corresponds to the "},{"code":"NSExpression.geometryTypeVariableExpression","type":"codeVoice"},{"type":"text","text":" property."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$heatmapDensity"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","type":"reference","isActive":true},{"type":"text","text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the "},{"type":"codeVoice","code":"heatmapColor"},{"type":"text","text":" property. This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.heatmapDensityVariableExpression"},{"type":"text","text":" property."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$zoomLevel"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"type":"paragraph","inlineContent":[{"text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the ","type":"text"},{"code":"NSExpression.zoomLevelVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"$lineProgress","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","isActive":true,"type":"reference"},{"text":" property. It corresponds to the ","type":"text"},{"code":"NSExpression.lineProgressVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}]}]]],"header":"row"},{"type":"paragraph","inlineContent":[{"text":"In addition to these variables, you can define your own variables and refer to","type":"text"},{"text":" ","type":"text"},{"text":"them elsewhere in the expression. The syntax for defining a variable makes use","type":"text"},{"text":" ","type":"text"},{"text":"of a ","type":"text"},{"overridingTitle":"MapLibre-specific function","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"MapLibre-specific function"}],"type":"reference","identifier":"#MapLibre-specific-functions"},{"text":" that takes an","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" as an argument:","type":"text"}]},{"type":"codeListing","syntax":"objc","code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"]},{"type":"codeListing","syntax":"swift","code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"]},{"type":"heading","level":2,"text":"MapLibre-specific functions","anchor":"MapLibre-specific-functions"},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"Due to a change in iOS 15.5, some of these stopped working. See "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},{"type":"text","text":" for more information and workarounds."}],"type":"paragraph"}],"style":"warning","name":"Warning"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For compatibility with the MapLibre Style Spec, the following functions"},{"type":"text","text":" "},{"type":"text","text":"are defined by this SDK. When setting a style layer property, you can call these"},{"type":"text","text":" "},{"type":"text","text":"functions just like the predefined functions above, using either the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"type":"text","text":" method or a convenient format"},{"type":"text","text":" "},{"type":"text","text":"string syntax:"}]},{"type":"heading","level":3,"text":"mgl_does:have:","anchor":"mgldoeshave"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_does:have:(SELF, '🧀🍔')","type":"codeVoice"},{"type":"text","text":" or "},{"code":"mgl_does:have:(%@, '🧀🍔')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns a Boolean value indicating whether the dictionary has a value for the"},{"type":"text","text":" "},{"type":"text","text":"key or whether the evaluated object ("},{"type":"codeVoice","code":"SELF"},{"type":"text","text":") has a value for the feature"},{"type":"text","text":" "},{"type":"text","text":"attribute. Compared to the "},{"isActive":true,"type":"reference","identifier":"#code-mgl_has-code"},{"type":"text","text":" custom function,"},{"type":"text","text":" "},{"type":"text","text":"that function’s target is instead passed in as the first argument to this"},{"type":"text","text":" "},{"type":"text","text":"function. Both functions are equivalent to the syntax "},{"type":"codeVoice","code":"key != NIL"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"codeVoice","code":"%@[key] != NIL"},{"type":"text","text":" but can be used outside of a predicate."}]},{"type":"heading","level":3,"text":"mgl_interpolate:withCurveType:parameters:stops:","anchor":"mglinterpolatewithCurveTypeparametersstops"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Produces continuous, smooth results by interpolating between pairs of input and"},{"type":"text","text":" "},{"type":"text","text":"output values (“stops”). Compared to the"},{"type":"text","text":" "},{"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"custom function, the input expression (that function’s target) is instead passed"},{"type":"text","text":" "},{"type":"text","text":"in as the first argument to this function."}]},{"type":"heading","level":3,"text":"mgl_step:from:stops:","anchor":"mglstepfromstops"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_step:from:stops:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_step:from:stops:(x, 11, %@)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Produces discrete, stepped results by evaluating a piecewise-constant function"},{"type":"text","text":" "},{"type":"text","text":"defined by pairs of input and output values (“stops”). Compared to the"},{"type":"text","text":" "},{"identifier":"#code-mgl_stepwithminimum-stops-code","isActive":true,"type":"reference"},{"type":"text","text":" custom"},{"type":"text","text":" "},{"type":"text","text":"function, the input expression (that function’s target) is instead passed in as"},{"type":"text","text":" "},{"type":"text","text":"the first argument to this function."}]},{"type":"heading","level":3,"text":"mgl_join:","anchor":"mgljoin"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_join:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_join({'Old', 'MacDonald'})"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of concatenating together all the elements of an array in"},{"type":"text","text":" "},{"type":"text","text":"order. Compared to the"},{"type":"text","text":" "},{"identifier":"#code-stringbyappendingstring-code","isActive":true,"type":"reference"},{"type":"text","text":" custom"},{"type":"text","text":" "},{"type":"text","text":"function, this function takes only one argument, which is an aggregate"},{"type":"text","text":" "},{"type":"text","text":"expression containing the strings to concatenate."}]},{"type":"heading","level":3,"text":"mgl_acos:","anchor":"mglacos"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_acos:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_acos(1)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the arccosine of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","level":3,"text":"mgl_asin:","anchor":"mglasin"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_asin:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_asin(0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the arcsine of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","level":3,"text":"mgl_atan:","anchor":"mglatan"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_atan:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_atan(20)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the arctangent of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","level":3,"text":"mgl_cos:","anchor":"mglcos"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_cos:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_cos(0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the cosine of the number."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","level":3,"text":"mgl_log2:","anchor":"mgllog2"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_log2:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_log2(1024)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the base-2 logarithm of the number."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","level":3,"text":"mgl_round:","anchor":"mglround"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_round:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_round(1.5)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the number rounded to the nearest integer. If the number is halfway"},{"type":"text","text":" "},{"type":"text","text":"between two integers, this function rounds it away from zero."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","level":3,"text":"mgl_sin:","anchor":"mglsin"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_sin:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin(0)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the sine of the number."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","level":3,"text":"mgl_tan:","anchor":"mgltan"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan(0)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the tangent of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","level":3,"text":"mgl_distanceFrom:","anchor":"mgldistanceFrom"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_distanceFrom:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_distanceFrom(%@)"},{"type":"text","text":" with an "},{"type":"codeVoice","code":"MLNShape"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the straight-line distance from the evaluated object to the given shape.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","level":3,"text":"mgl_coalesce:","anchor":"mglcoalesce"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_coalesce:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_coalesce({x, y, z})"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the first non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" value from an array of expressions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","level":3,"text":"mgl_attributed:","anchor":"mglattributed"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_attributed:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"mgl_attributed({x, y, z})","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Concatenates and returns the array of "},{"type":"codeVoice","code":"MLNAttributedExpression"},{"type":"text","text":" objects, for use"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"MLNSymbolStyleLayer.text"},{"type":"text","text":" property."}]},{"type":"paragraph","inlineContent":[{"code":"MLNAttributedExpression.attributes","type":"codeVoice"},{"type":"text","text":" valid attributes."}]},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Key","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Value Type","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"MLNFontNamesAttribute","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" evaluating to an "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" array."}]}]],[[{"type":"paragraph","inlineContent":[{"code":"MLNFontScaleAttribute","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" evaluating to an "},{"type":"codeVoice","code":"NSNumber"},{"type":"text","text":" value."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontColorAttribute"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" evaluating to an "},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" (iOS) or "},{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)."}]}]]],"header":"row"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","level":3,"text":"MLN_LET","anchor":"MLNLET"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_LET:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" Any number of variable names interspersed with their assigned"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" values, followed by an "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" "},{"type":"text","text":"that may contain references to those variables."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of evaluating an expression with the given variable values."},{"type":"text","text":" "},{"type":"text","text":"Compared to the"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_expressionwithcontext-code","isActive":true},{"type":"text","text":" custom"},{"type":"text","text":" "},{"type":"text","text":"function, this function takes the variable names and values inline before the"},{"type":"text","text":" "},{"type":"text","text":"expression that contains references to those variables."}]},{"type":"heading","level":3,"text":"MLN_MATCH","anchor":"MLNMATCH"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_MATCH:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" An input expression, then any number of argument pairs, followed by a default"},{"type":"text","text":" "},{"type":"text","text":"expression. Each argument pair consists of a constant value followed by an"},{"type":"text","text":" "},{"type":"text","text":"expression to produce as a result of matching that constant value."},{"type":"text","text":" "},{"type":"text","text":"If the input value is an aggregate expression, then any of the constant values within"},{"type":"text","text":" "},{"type":"text","text":"that aggregate expression result in the following argument. This is shorthand for"},{"type":"text","text":" "},{"type":"text","text":"specifying an argument pair for each of the constant values within that aggregate"},{"type":"text","text":" "},{"type":"text","text":"expression. It is not possible to match the aggregate expression itself."}]},{"type":"paragraph","inlineContent":[{"text":"Returns the result of matching the input expression against the given constant","type":"text"},{"text":" ","type":"text"},{"text":"values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","level":3,"text":"MLN_IF","anchor":"MLNIF"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"MLN_IF:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" Alternating ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"text":" conditionals and resulting expressions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"followed by a default expression."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the first expression that meets the condition; otherwise, the default"},{"type":"text","text":" "},{"type":"text","text":"value. Unlike"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]","type":"codeVoice"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"TERNARY()","type":"codeVoice"},{"type":"text","text":" syntax, this function can accept multiple “if else” conditions"},{"type":"text","text":" "},{"type":"text","text":"and is supported on iOS 8."},{"type":"emphasis","inlineContent":[{"text":"x","type":"text"}]},{"type":"text","text":" and macOS 10.10."},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"type":"text","text":"; however, each conditional"},{"type":"text","text":" "},{"type":"text","text":"passed into this function must be wrapped in a constant expression."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","level":3,"text":"MLN_FUNCTION","anchor":"MLNFUNCTION"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_FUNCTION:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"MLN_FUNCTION('typeof', mystery)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" Any arguments required by the expression operator.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"An expression exactly as defined by the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","isActive":true},{"text":".","type":"text"}]},{"type":"heading","level":2,"text":"Custom functions","anchor":"Custom-functions"},{"type":"paragraph","inlineContent":[{"text":"The following custom functions are also available with the","type":"text"},{"text":" ","type":"text"},{"code":"+[NSExpression expressionForFunction:selectorName:arguments:]","type":"codeVoice"},{"text":" method or the","type":"text"},{"text":" ","type":"text"},{"code":"FUNCTION()","type":"codeVoice"},{"text":" format string syntax.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some of these functions are defined as methods on their respective target"},{"type":"text","text":" "},{"type":"text","text":"classes, but you should not call them directly outside the context of an"},{"type":"text","text":" "},{"type":"text","text":"expression, because the result may differ from the evaluated expression’s result"},{"type":"text","text":" "},{"type":"text","text":"or may result in undefined behavior."}]},{"type":"paragraph","inlineContent":[{"text":"The MapLibre Style Spec defines some operators for which no custom","type":"text"},{"text":" ","type":"text"},{"text":"function is available. To use these operators in an ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":", call the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"#code-mgl_function-code"},{"text":" function with the same arguments","type":"text"},{"text":" ","type":"text"},{"text":"that the operator expects.","type":"text"}]},{"type":"heading","level":3,"text":"boolValue","anchor":"boolValue"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"boolValue"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(1, 'boolValue')"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a number or string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" None.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Boolean representation of the target: "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":" when then input is an"},{"type":"text","text":" "},{"type":"text","text":"empty string, 0, "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":", or "},{"type":"codeVoice","code":"NaN"},{"type":"text","text":", otherwise "},{"type":"codeVoice","code":"TRUE"},{"type":"text","text":"."}]},{"type":"heading","level":3,"text":"mgl_has:","anchor":"mglhas"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_has:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" ","type":"text"},{"text":"or the evaluated object (","type":"text"},{"type":"codeVoice","code":"SELF"},{"text":").","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to an "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"representing the key to look up in the dictionary or the feature attribute to"},{"type":"text","text":" "},{"type":"text","text":"look up in the evaluated object (see "},{"code":"MLNFeature.attributes","type":"codeVoice"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"true"},{"text":" if the dictionary has a value for the key or if the evaluated","type":"text"},{"text":" ","type":"text"},{"text":"object has a value for the feature attribute.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"identifier":"#code-mgl_does-have-code","isActive":true,"type":"reference"},{"type":"text","text":" function, which is used on its own"},{"type":"text","text":" "},{"type":"text","text":"without the "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator. You can also check whether an object has an"},{"type":"text","text":" "},{"type":"text","text":"attribute by comparing the key path to "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":", for example "},{"type":"codeVoice","code":"cheeseburger != NIL"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"burger.cheese != NIL"}]},{"type":"heading","level":3,"text":"mgl_expressionWithContext:","anchor":"mglexpressionWithContext"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_expressionWithContext:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)","type":"codeVoice"},{"text":" with","type":"text"},{"text":" ","type":"text"},{"text":"a dictionary containing ","type":"text"},{"code":"ios","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"macos","type":"codeVoice"},{"text":" keys","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that may contain references to the variables"},{"type":"text","text":" "},{"type":"text","text":"defined in the context dictionary."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" An ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"NSString","type":"codeVoice"},{"text":"s as keys and","type":"text"},{"text":" ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":"s as values. Each key is a variable name and each","type":"text"},{"text":" ","type":"text"},{"text":"value is the variable’s value within the target expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The target expression with variable subexpressions replaced with the values"},{"type":"text","text":" "},{"type":"text","text":"defined in the context dictionary."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-mgl_let-code","isActive":true,"type":"reference"},{"text":" function, which is used on its own without the","type":"text"},{"text":" ","type":"text"},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator.","type":"text"}]},{"type":"heading","level":3,"text":"mgl_interpolateWithCurveType:parameters:stops:","anchor":"mglinterpolateWithCurveTypeparametersstops"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_interpolateWithCurveType:parameters:stops:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)","type":"codeVoice"},{"text":" ","type":"text"},{"text":"with a dictionary containing zoom levels or other constant values as keys","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number and contains a"},{"type":"text","text":" "},{"type":"text","text":"variable or key path expression."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" The first argument is one of the following strings denoting curve types:","type":"text"},{"text":" ","type":"text"},{"code":"linear","type":"codeVoice"},{"text":", ","type":"text"},{"code":"exponential","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"cubic-bezier","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second argument is an expression providing parameters for the curve:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"linear"},{"type":"text","text":", the argument is "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the curve type is ","type":"text"},{"code":"exponential","type":"codeVoice"},{"text":", the argument is an","type":"text"},{"text":" ","type":"text"},{"text":"expression that evaluates to a number, specifying the base of the","type":"text"},{"text":" ","type":"text"},{"text":"exponential interpolation.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"cubic-bezier"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"type":"text","text":"array or aggregate expression containing four expressions, each"},{"type":"text","text":" "},{"type":"text","text":"evaluating to a number. The four numbers are control points for the"},{"type":"text","text":" "},{"type":"text","text":"cubic Bézier curve."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"The third argument is an ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"text":" object representing the","type":"text"},{"text":" ","type":"text"},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"text":" ","type":"text"},{"text":"values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A value interpolated along the continuous mathematical function defined by the","type":"text"},{"text":" ","type":"text"},{"text":"arguments, with the target as the input to the function.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"type":"text","text":" "},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"type":"text","text":" "},{"type":"text","text":"values may be constant values or "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" objects. For example, you can"},{"type":"text","text":" "},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"type":"text","text":" "},{"type":"text","text":"yellow, orange, and red as the values."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]","type":"codeVoice"},{"text":" ","type":"text"},{"text":"method and the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"function, which is used on its own without the "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}]},{"type":"heading","level":3,"text":"mgl_numberWithFallbackValues:","anchor":"mglnumberWithFallbackValues"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"floatValue"},{"type":"text","text":", or"},{"type":"text","text":" "},{"type":"codeVoice","code":"decimalValue"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"type":"text","text":"string."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" Zero or more ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":"s, each evaluating to a Boolean value","type":"text"},{"text":" ","type":"text"},{"text":"or string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A numeric representation of the target:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a string, it is converted to a number as specified by the","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"floatValue"},{"type":"text","text":", or"},{"type":"text","text":" "},{"type":"codeVoice","code":"decimalValue"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"text":" ","type":"text"},{"text":"string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"Zero or more "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"type":"text","text":" "},{"type":"text","text":"or string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A numeric representation of the target:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is ","type":"text"},{"code":"NIL","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"FALSE","type":"codeVoice"},{"text":", the result is 0.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"If the target is a string, it is converted to a number as specified by the","type":"text"},{"text":" ","type":"text"},{"text":"“","type":"text"},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","isActive":true},{"text":"”","type":"text"},{"text":" ","type":"text"},{"text":"algorithm of the ECMAScript Language Specification.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If multiple values are provided, each one is evaluated in order until the","type":"text"},{"text":" ","type":"text"},{"text":"first successful conversion is obtained.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"type":"text","text":" "},{"type":"text","text":"number by passing the value and the string "},{"type":"codeVoice","code":"NSNumber"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" "},{"type":"text","text":"operator."}]},{"type":"heading","level":3,"text":"mgl_stepWithMinimum:stops:","anchor":"mglstepWithMinimumstops"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)","type":"codeVoice"},{"text":" with","type":"text"},{"text":" ","type":"text"},{"text":"a dictionary with zoom levels or other constant values as keys","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a number and contains a","type":"text"},{"text":" ","type":"text"},{"text":"variable or key path expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" "},{"type":"text","text":"The first argument is an expression that evaluates to a number, specifying"},{"type":"text","text":" "},{"type":"text","text":"the minimum value in case the target is less than any of the stops in the"},{"type":"text","text":" "},{"type":"text","text":"second argument."}]},{"type":"paragraph","inlineContent":[{"text":"The second argument is an ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"text":" object representing the","type":"text"},{"text":" ","type":"text"},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"text":" ","type":"text"},{"text":"values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The output value of the stop whose key is just less than the evaluated target,"},{"type":"text","text":" "},{"type":"text","text":"or the minimum value if the target is less than the least of the stops’ keys."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"type":"text","text":" "},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"type":"text","text":" "},{"type":"text","text":"values may be constant values or "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" objects. For example, you can"},{"type":"text","text":" "},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"type":"text","text":" "},{"type":"text","text":"yellow, orange, and red as the values."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","level":3,"text":"stringByAppendingString:","anchor":"stringByAppendingString"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"stringByAppendingString:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"One or more "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s, each evaluating to a string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The target string with each of the argument strings appended in order."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]"},{"type":"text","text":" "},{"type":"text","text":"method and is similar to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_join-code","isActive":true},{"type":"text","text":" function, which concatenates multiple"},{"type":"text","text":" "},{"type":"text","text":"expressions and is used on its own without the "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}]},{"type":"heading","level":3,"text":"stringValue","anchor":"stringValue"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"stringValue","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"FUNCTION(ele, 'stringValue')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"type":"text","text":"string."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" ","type":"text"},{"text":"None.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A string representation of the target:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is "},{"type":"text","text":"NIL"},{"type":"text","text":", the result is the empty string."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a Boolean value, the result is the string ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a number, it is converted to a string as specified by the"},{"type":"text","text":" "},{"type":"text","text":"“"},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","isActive":true},{"type":"text","text":"”"},{"type":"text","text":" "},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a color, it is converted to a string of the form"},{"type":"text","text":" "},{"type":"codeVoice","code":"rgba(r,g,b,a)"},{"type":"text","text":", where "},{"type":"text","text":"r"},{"type":"text","text":", "},{"type":"text","text":"g"},{"type":"text","text":", and "},{"type":"text","text":"b"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"text","text":"numerals ranging from 0 to 255 and "},{"type":"text","text":"a"},{"type":"text","text":" ranges from 0 to 1."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Otherwise, the target is converted to a string in the format specified by the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify"},{"type":"text","text":" "},{"type":"text","text":"function of the ECMAScript Language Specification."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"text":" ","type":"text"},{"text":"string by passing the value and the string ","type":"text"},{"type":"codeVoice","code":"NSString"},{"text":" into the ","type":"text"},{"type":"codeVoice","code":"CAST()"},{"text":" ","type":"text"},{"type":"text","text":"operator."}]}]}],"abstract":[{"text":"Using ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"text":" with MapLibre iOS","type":"text"}],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions","interfaceLanguage":"occ"},"metadata":{"role":"article","title":"Predicates and expressions","roleHeading":"Article","modules":[{"name":"MapLibre"}]},"sections":[],"references":{"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"title":"to-number","titleInlineContent":[{"type":"codeVoice","code":"to-number"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"title":"atan","titleInlineContent":[{"code":"atan","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"title":"distance","titleInlineContent":[{"type":"codeVoice","code":"distance"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"title":"case","titleInlineContent":[{"code":"case","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case"},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"title":"ToNumber Applied to the String Type","titleInlineContent":[{"type":"text","text":"ToNumber Applied to the String Type"}],"type":"link","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type"},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"title":"mgl_interpolate:withCurveType:parameters:stops:","titleInlineContent":[{"code":"mgl_interpolate:withCurveType:parameters:stops:","type":"codeVoice"}],"type":"link","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code"},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"title":"match","titleInlineContent":[{"type":"codeVoice","code":"match"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts","abstract":[{"text":"Using custom fonts","type":"text"}],"title":"Customizing Fonts","type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"abstract":[{"text":"Adding images to the map and assigning them to POI types","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","title":"Adding Multiple Images","url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample","kind":"article","type":"topic","role":"article"},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"title":"sin","titleInlineContent":[{"code":"sin","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin"},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"title":"mgl_interpolateWithCurveType:parameters:stops:","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"type":"link","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code"},"#code-mgl_if-code":{"title":"MLN_IF()","titleInlineContent":[{"code":"MLN_IF()","type":"codeVoice"}],"type":"link","identifier":"#code-mgl_if-code","url":"#code-mgl_if-code"},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"type":"topic","abstract":[{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource"},{"type":"text","text":" is a map content source that supplies vector shapes to be"},{"type":"text","text":" "},{"type":"text","text":"shown on the map. The shapes may be instances of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or they may be defined by local or external"},{"type":"text","text":" "},{"type":"text","text":"GeoJSON"},{"type":"text","text":" code. A shape source is added to an"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle"},{"type":"text","text":" object along with an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle"},{"type":"text","text":" object. The vector style"},{"type":"text","text":" "},{"type":"text","text":"layer defines the appearance of any content supplied by the shape source. You"},{"type":"text","text":" "},{"type":"text","text":"can update a shape source by setting its "},{"type":"codeVoice","code":"shape"},{"type":"text","text":" or "},{"type":"codeVoice","code":"URL"},{"type":"text","text":" property."}],"fragments":[{"kind":"identifier","text":"MLNShapeSource"}],"kind":"symbol","role":"symbol","title":"MLNShapeSource","url":"\/documentation\/maplibre\/mlnshapesource","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource"},"#code-stringbyappendingstring-code":{"title":"stringByAppendingString:","titleInlineContent":[{"type":"codeVoice","code":"stringByAppendingString:"}],"type":"link","identifier":"#code-stringbyappendingstring-code","url":"#code-stringbyappendingstring-code"},"doc://org.swift.MyProject/documentation/MapLibre":{"abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}],"kind":"symbol","url":"\/documentation\/maplibre","title":"MapLibre","role":"collection","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre"},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"title":"acos","titleInlineContent":[{"code":"acos","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"title":"kernel density estimation","titleInlineContent":[{"type":"text","text":"kernel density estimation"}],"type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},"#variables":{"title":"variables","titleInlineContent":[{"text":"variables","type":"text"}],"type":"link","identifier":"#variables","url":"#variables"},"#key-paths":{"title":"key paths","titleInlineContent":[{"type":"text","text":"key paths"}],"type":"link","identifier":"#key-paths","url":"#key-paths"},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"title":"let","titleInlineContent":[{"code":"let","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"kind":"article","type":"topic","url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","abstract":[{"type":"text","text":"Learn how to work with gesture recognizers"}],"title":"User Interactions","role":"article"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"fragments":[{"kind":"identifier","text":"lineGradient"}],"url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient","abstract":[{"type":"text","text":"The color gradient with which the line will be drawn. This property only has an"},{"type":"text","text":" "},{"type":"text","text":"effect on lines defined by an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource"},{"type":"text","text":" whose "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource"},{"type":"text","text":" "},{"type":"text","text":"option is set to "},{"type":"codeVoice","code":"YES"},{"type":"text","text":"."}],"kind":"symbol","type":"topic","title":"lineGradient","role":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"title":"Predicate Programming Guide","titleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}],"type":"link","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"title":"to-string","titleInlineContent":[{"code":"to-string","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string"},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"title":"step","titleInlineContent":[{"type":"codeVoice","code":"step"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step"},"#code-mgl_function-code":{"title":"MLN_FUNCTION()","titleInlineContent":[{"code":"MLN_FUNCTION()","type":"codeVoice"}],"type":"link","identifier":"#code-mgl_function-code","url":"#code-mgl_function-code"},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"title":"NSExpression+MLNAdditions.h","titleInlineContent":[{"type":"codeVoice","code":"NSExpression+MLNAdditions.h"}],"type":"link","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h"},"https://github.com/maplibre/maplibre-native/issues/331":{"title":"#331","titleInlineContent":[{"text":"#331","type":"text"}],"type":"link","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"type":"topic","kind":"article","title":"Info.plist Keys","abstract":[{"text":"MapLibre Native for iOS supports custom ","type":"text"},{"code":"Info.plist","type":"codeVoice"},{"text":" keys in your application in order to configure various settings.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","role":"article","url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"kind":"symbol","fragments":[{"kind":"identifier","text":"MLNPolyline"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","title":"MLNPolyline","role":"symbol","type":"topic","url":"\/documentation\/maplibre\/mlnpolyline","abstract":[{"text":"An ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","type":"reference"},{"text":" object represents a shape consisting of two or more vertices,","type":"text"},{"text":" ","type":"text"},{"text":"specified as ","type":"text"},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"type":"text","text":" instances, and the line segments that"},{"type":"text","text":" "},{"type":"text","text":"connect them. For example, you could use an polyline to represent a road or the"},{"type":"text","text":" "},{"type":"text","text":"path along which something moves."}]},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"title":"NumberToString","titleInlineContent":[{"type":"text","text":"NumberToString"}],"type":"link","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type"},"https://maplibre.org/maplibre-style-spec/expressions/":{"title":"MapLibre Style Spec","titleInlineContent":[{"text":"MapLibre Style Spec","type":"text"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/"},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"title":"cos","titleInlineContent":[{"type":"codeVoice","code":"cos"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"title":"log2","titleInlineContent":[{"code":"log2","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},"#MapLibre-specific-functions":{"title":"MapLibre-specific functions","titleInlineContent":[{"type":"text","text":"MapLibre-specific functions"}],"type":"link","identifier":"#MapLibre-specific-functions","url":"#MapLibre-specific-functions"},"https://tc39.github.io/ecma262/#sec-json.stringify":{"title":"JSON.stringify()","titleInlineContent":[{"code":"JSON.stringify()","type":"codeVoice"}],"type":"link","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify"},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"title":"interpolate","titleInlineContent":[{"type":"codeVoice","code":"interpolate"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},"#code-mgl_stepwithminimum-stops-code":{"title":"mgl_stepWithMinimum:stops:","titleInlineContent":[{"code":"mgl_stepWithMinimum:stops:","type":"codeVoice"}],"type":"link","identifier":"#code-mgl_stepwithminimum-stops-code","url":"#code-mgl_stepwithminimum-stops-code"},"#code-mgl_join-code":{"title":"mgl_join:","titleInlineContent":[{"type":"codeVoice","code":"mgl_join:"}],"type":"link","identifier":"#code-mgl_join-code","url":"#code-mgl_join-code"},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"title":"concat","titleInlineContent":[{"code":"concat","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"title":"tan","titleInlineContent":[{"type":"codeVoice","code":"tan"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates","type":"topic","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","abstract":[{"type":"text","text":"Using URL Templates when defining tile sources"}],"role":"article","title":"Tile URL Templates"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"title":"asin","titleInlineContent":[{"code":"asin","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},"#code-mgl_does-have-code":{"title":"mgl_does:have:","titleInlineContent":[{"type":"codeVoice","code":"mgl_does:have:"}],"type":"link","identifier":"#code-mgl_does-have-code","url":"#code-mgl_does-have-code"},"#code-mgl_match-code":{"title":"MLN_MATCH()","titleInlineContent":[{"code":"MLN_MATCH()","type":"codeVoice"}],"type":"link","identifier":"#code-mgl_match-code","url":"#code-mgl_match-code"},"#using-expressions-to-configure-layout-and-paint-attributes":{"title":"inside an expression","titleInlineContent":[{"type":"text","text":"inside an expression"}],"type":"link","identifier":"#using-expressions-to-configure-layout-and-paint-attributes","url":"#using-expressions-to-configure-layout-and-paint-attributes"},"#code-mgl_expressionwithcontext-code":{"title":"mgl_expressionWithContext:","titleInlineContent":[{"code":"mgl_expressionWithContext:","type":"codeVoice"}],"type":"link","identifier":"#code-mgl_expressionwithcontext-code","url":"#code-mgl_expressionwithcontext-code"},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"title":"coalesce","titleInlineContent":[{"type":"codeVoice","code":"coalesce"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"abstract":[],"title":"Information for Style Authors","role":"article","kind":"article","type":"topic","url":"\/documentation\/maplibre-native-for-ios\/for_style_authors","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"title":"+[NSExpression expressionForFunction:arguments:] method","titleInlineContent":[{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"text":" method","type":"text"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init"},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"title":"format","titleInlineContent":[{"type":"codeVoice","code":"format"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format"},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"title":"round","titleInlineContent":[{"code":"round","type":"codeVoice"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"title":"has","titleInlineContent":[{"type":"codeVoice","code":"has"}],"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has"},"#code-mgl_has-code":{"title":"mgl_has:","titleInlineContent":[{"code":"mgl_has:","type":"codeVoice"}],"type":"link","identifier":"#code-mgl_has-code","url":"#code-mgl_has-code"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"title":"functions predefined","titleInlineContent":[{"type":"text","text":"functions predefined"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"abstract":[{"type":"text","text":"An "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","type":"reference","isActive":true},{"type":"text","text":" object represents a closed shape consisting of four or more"},{"type":"text","text":" "},{"type":"text","text":"vertices, specified as "},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"type":"text","text":" instances, and the edges that"},{"type":"text","text":" "},{"type":"text","text":"connect them. For example, you could use a polygon shape to represent a"},{"type":"text","text":" "},{"type":"text","text":"building, a lake, or an area you want to highlight."}],"type":"topic","url":"\/documentation\/maplibre\/mlnpolygon","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","fragments":[{"text":"MLNPolygon","kind":"identifier"}],"kind":"symbol","title":"MLNPolygon","role":"symbol"},"#code-mgl_let-code":{"title":"MLN_LET","titleInlineContent":[{"code":"MLN_LET","type":"codeVoice"}],"type":"link","identifier":"#code-mgl_let-code","url":"#code-mgl_let-code"}}}