{"sections":[],"metadata":{"role":"article","title":"Predicates and expressions","modules":[{"name":"MapLibre"}],"roleHeading":"Article"},"seeAlsoSections":[{"title":"Other Articles","identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"],"generated":true,"anchor":"Other-Articles"}],"primaryContentSections":[{"content":[{"inlineContent":[{"text":"Style layers use predicates and expressions to determine what to display and how","type":"text"},{"text":" ","type":"text"},{"text":"to format it. ","type":"text"},{"inlineContent":[{"type":"text","text":"Predicates"}],"type":"emphasis"},{"text":" are represented by the same ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"text":" class that","type":"text"},{"text":" ","type":"text"},{"text":"filters results from Core Data or items in an ","type":"text"},{"type":"codeVoice","code":"NSArray"},{"text":" in Objective-C.","type":"text"},{"text":" ","type":"text"},{"text":"Predicates are based on ","type":"text"},{"inlineContent":[{"type":"text","text":"expressions"}],"type":"emphasis"},{"text":", represented by the ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" class.","type":"text"},{"text":" ","type":"text"},{"text":"Somewhat unusually, style layers also use expressions on their own.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This document discusses the specific subset of the predicate and expression"},{"type":"text","text":" "},{"type":"text","text":"syntax supported by this SDK. For a more general introduction to predicates and"},{"type":"text","text":" "},{"type":"text","text":"expressions, consult the"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","isActive":true,"type":"reference"}]},{"type":"text","text":" "},{"type":"text","text":"in Apple developer documentation. For additional detail on how this SDK has"},{"type":"text","text":" "},{"type":"text","text":"extended the "},{"code":"NSExpression","type":"codeVoice"},{"text":" class, see the ","type":"text"},{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","type":"reference","isActive":true},{"text":" header.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Using predicates to filter vector data","anchor":"Using-predicates-to-filter-vector-data"},{"inlineContent":[{"type":"text","text":"Most style layer classes display "},{"type":"codeVoice","code":"MLNFeature"},{"type":"text","text":" objects that you can show or hide"},{"type":"text","text":" "},{"type":"text","text":"based on the feature’s attributes. Use the "},{"type":"codeVoice","code":"MLNVectorStyleLayer.predicate"},{"type":"text","text":" "},{"type":"text","text":"property to include only the features in the source layer that satisfy a"},{"type":"text","text":" "},{"type":"text","text":"condition that you define."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Operators","anchor":"Operators"},{"inlineContent":[{"type":"text","text":"The following comparison operators are supported:"}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key = value"},{"type":"codeVoice","code":"key == value"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSGreaterThanOrEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key >= value"},{"type":"codeVoice","code":"key => value"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSLessThanOrEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"key <= value","type":"codeVoice"},{"code":"key =< value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSGreaterThanPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key > value"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSLessThanPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key < value"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"key != value","type":"codeVoice"},{"code":"key <> value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSBetweenPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key BETWEEN { 32, 212 }"}]}]]]},{"inlineContent":[{"text":"To test whether a feature has or lacks a specific attribute, compare the","type":"text"},{"text":" ","type":"text"},{"text":"attribute to ","type":"text"},{"type":"codeVoice","code":"NULL"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"NIL"},{"text":". Predicates created using the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSPredicate predicateWithValue:]"},{"text":" method are also supported. String","type":"text"},{"text":" ","type":"text"},{"text":"operators and custom operators are not supported.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following compound operators are supported:","type":"text"}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSCompoundPredicateType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSAndPredicateType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"predicate1 AND predicate2","type":"codeVoice"},{"code":"predicate1 && predicate2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSOrPredicateType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"predicate1 OR predicate2","type":"codeVoice"},{"text":"predicate1 || predicate2","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNotPredicateType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"NOT predicate","type":"codeVoice"},{"code":"!predicate","type":"codeVoice"}]}]]]},{"inlineContent":[{"type":"text","text":"The following aggregate operators are supported:"}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSInPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSContainsPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key","type":"codeVoice"}],"type":"paragraph"}]]]},{"inlineContent":[{"text":"You can use the ","type":"text"},{"code":"IN","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"CONTAINS","type":"codeVoice"},{"text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature (","type":"text"},{"code":"SELF","type":"codeVoice"},{"text":") lies within a given ","type":"text"},{"code":"MLNShape","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:","type":"text"}],"type":"paragraph"},{"code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"],"type":"codeListing","syntax":"objc"},{"code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The following combinations of comparison operators and modifiers are supported:"}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSComparisonPredicateModifier","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAllPredicateModifier"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ALL haystack != needle"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAnyPredicateModifier"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ANY haystack = needle"},{"type":"codeVoice","code":"SOME haystack = needle"}]}]]]},{"inlineContent":[{"text":"The following comparison predicate options are supported for comparison and","type":"text"},{"text":" ","type":"text"},{"text":"aggregate operators that are used in the predicate:","type":"text"}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"code":"NSComparisonPredicateOptions","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSCaseInsensitivePredicateOption","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"'QUEBEC' =[c] 'Quebec'"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSDiacriticInsensitivePredicateOption"}],"type":"paragraph"}],[{"inlineContent":[{"code":"'Québec' =[d] 'Quebec'","type":"codeVoice"}],"type":"paragraph"}]]]},{"inlineContent":[{"type":"text","text":"Other comparison predicate options are unsupported, namely "},{"type":"codeVoice","code":"l"},{"type":"text","text":" "},{"type":"text","text":"(for locale sensitivity) and "},{"type":"codeVoice","code":"n"},{"type":"text","text":" (for normalization). A comparison is"},{"type":"text","text":" "},{"type":"text","text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison"},{"type":"text","text":" "},{"type":"text","text":"predicate options are not supported in conjunction with comparison modifiers"},{"type":"text","text":" "},{"type":"text","text":"like "},{"type":"codeVoice","code":"ALL"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ANY"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Operands","anchor":"Operands"},{"inlineContent":[{"type":"text","text":"Operands in predicates can be "},{"type":"reference","identifier":"#variables","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"#key-paths","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or almost anything else that can appear"},{"type":"text","text":" "},{"type":"reference","identifier":"#using-expressions-to-configure-layout-and-paint-attributes","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Automatic type casting is not performed. Therefore, a feature only matches a","type":"text"},{"text":" ","type":"text"},{"text":"predicate if its value for the attribute in question is of the same type as the","type":"text"},{"text":" ","type":"text"},{"text":"value specified in the predicate. Use the ","type":"text"},{"code":"CAST()","type":"codeVoice"},{"text":" operator to convert a key","type":"text"},{"text":" ","type":"text"},{"text":"path or variable into a matching type:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast a value to a number, use ","type":"text"},{"code":"CAST(key, 'NSNumber')","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"To cast a value to a string, use "},{"type":"codeVoice","code":"CAST(key, 'NSString')"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"To cast a value to a color, use "},{"code":"CAST(key, 'UIColor')","type":"codeVoice"},{"type":"text","text":" on iOS and "},{"code":"CAST(key, 'NSColor')","type":"codeVoice"},{"type":"text","text":" on macOS."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"To cast an "},{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" or "},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" object to an array, use "},{"type":"codeVoice","code":"CAST(noindex(color), 'NSArray')"},{"type":"text","text":"."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"For details about the predicate format string syntax, consult the “Predicate"},{"type":"text","text":" "},{"type":"text","text":"Format String Syntax” chapter of the"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"reference","isActive":true,"overridingTitleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}],"overridingTitle":"Predicate Programming Guide"}]},{"type":"text","text":" "},{"type":"text","text":"in Apple developer documentation."}],"type":"paragraph"},{"level":2,"type":"heading","text":"Using expressions to configure layout and paint attributes","anchor":"Using-expressions-to-configure-layout-and-paint-attributes"},{"inlineContent":[{"type":"text","text":"An expression can contain subexpressions of various types. Each of the supported"},{"type":"text","text":" "},{"type":"text","text":"types of expressions is discussed below."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Constant values","anchor":"Constant-values"},{"inlineContent":[{"type":"text","text":"A constant value can be of any of the following types:"}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"text":"In Objective-C","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)"},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" (iOS)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSString","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSString","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSArray<NSNumber>"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[Float]"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSArray<NSString>","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"[String]","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.CGVectorValue"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue"},{"type":"text","text":" containing "},{"type":"codeVoice","code":"CGVector"},{"type":"text","text":" (macOS)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.cgVectorValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue"},{"text":" containing ","type":"text"},{"type":"codeVoice","code":"CGVector"},{"text":" (macOS)","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.UIEdgeInsetsValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"text":" (macOS)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSValue.uiEdgeInsetsValue","type":"codeVoice"},{"type":"text","text":" (iOS)"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"type":"text","text":" (macOS)"}]}]]]},{"inlineContent":[{"type":"text","text":"For literal floating-point values, use "},{"type":"codeVoice","code":"-[NSNumber numberWithDouble:]"},{"type":"text","text":" instead"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"codeVoice","code":"-[NSNumber numberWithFloat:]"},{"type":"text","text":" to avoid precision issues."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Key paths","anchor":"Key-paths"},{"inlineContent":[{"text":"A key path expression refers to an attribute of the ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"text":" object being","type":"text"},{"text":" ","type":"text"},{"text":"evaluated for display. For example, if a polygon’s ","type":"text"},{"code":"MLNFeature.attributes","type":"codeVoice"},{"text":" ","type":"text"},{"text":"dictionary contains the ","type":"text"},{"code":"floorCount","type":"codeVoice"},{"text":" key, then the key path ","type":"text"},{"code":"floorCount","type":"codeVoice"},{"text":" refers","type":"text"},{"text":" ","type":"text"},{"text":"to the value of the ","type":"text"},{"code":"floorCount","type":"codeVoice"},{"text":" attribute when evaluating that particular","type":"text"},{"text":" ","type":"text"},{"text":"polygon.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following special attributes are also available on features that are produced","type":"text"},{"text":" ","type":"text"},{"text":"as a result of clustering multiple point features together in a shape source:","type":"text"}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Attribute","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Type","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Meaning"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"cluster"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bool"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster."}]}]],[[{"type":"paragraph","inlineContent":[{"text":"cluster_id","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identifier for the point cluster."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"point_count"}]}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of point features in a given cluster."}]}]]]},{"inlineContent":[{"type":"text","text":"Some characters may not be used directly as part of a key path in a format"},{"type":"text","text":" "},{"type":"text","text":"string. For example, if a feature’s attribute is named "},{"type":"codeVoice","code":"ISO 3166-1:2006"},{"type":"text","text":", an"},{"type":"text","text":" "},{"type":"text","text":"expression format string of "},{"type":"codeVoice","code":"lowercase(ISO 3166-1:2006)"},{"type":"text","text":" or a predicate format"},{"type":"text","text":" "},{"type":"text","text":"string of "},{"type":"codeVoice","code":"ISO 3166-1:2006 == 'US-OH'"},{"type":"text","text":" would raise an exception. Instead, use a"},{"type":"text","text":" "},{"type":"codeVoice","code":"%K"},{"type":"text","text":" placeholder or the "},{"type":"codeVoice","code":"+[NSExpression expressionForKeyPath:]"},{"type":"text","text":" initializer:"}],"type":"paragraph"},{"code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"],"type":"codeListing","syntax":"objc"},{"code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","text":"Functions","anchor":"Functions"},{"inlineContent":[{"type":"text","text":"Of the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","isActive":true},{"type":"text","text":" "},{"type":"text","text":"by the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the following subset is supported in layer attribute values:"}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializer parameter"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"average:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"average({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"sum:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sum({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"count:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"count({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"min:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"min({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"max:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"max({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"add:to:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 + 2"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"from:subtract:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"2 - 1","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"multiply:by:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"1 * 2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"divide:by:"}]}],[{"type":"paragraph","inlineContent":[{"code":"1 \/ 2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:(1, 2)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"sqrt:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt(2)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"log:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"log(10)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ln:"}]}],[{"type":"paragraph","inlineContent":[{"code":"ln(2)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"raise:toPower:"}]}],[{"type":"paragraph","inlineContent":[{"code":"2 ** 2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"exp:"}]}],[{"type":"paragraph","inlineContent":[{"code":"exp(0)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"ceiling:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ceiling(0.99999)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"abs:"}]}],[{"type":"paragraph","inlineContent":[{"code":"abs(-1)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"trunc:"}]}],[{"type":"paragraph","inlineContent":[{"code":"trunc(6378.1370)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"floor:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"floor(-0.99999)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"uppercase:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"uppercase('Elysian Fields')"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lowercase:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lowercase('DOWNTOWN')"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"noindex:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"noindex(0 + 2 + c)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"length:"}]}],[{"type":"paragraph","inlineContent":[{"code":"length('Wapakoneta')","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"castObject:toType:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CAST(ele, 'NSString')"},{"type":"codeVoice","code":"CAST(ele, 'NSNumber')"}]}]]]},{"inlineContent":[{"type":"text","text":"A number of "},{"type":"reference","identifier":"#MapLibre-specific-functions","isActive":true},{"type":"text","text":" are also"},{"type":"text","text":" "},{"type":"text","text":"available."}],"type":"paragraph"},{"inlineContent":[{"text":"The following predefined functions are ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"strong"},{"text":" supported:","type":"text"}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Initializer parameter","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"median:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"median({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"mode:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"mode({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"stddev:"}]}],[{"type":"paragraph","inlineContent":[{"code":"stddev({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"random","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"random()"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"randomn:"}]}],[{"type":"paragraph","inlineContent":[{"code":"randomn(10)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"now","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"now()"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:(5, 3)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:"}]}],[{"type":"paragraph","inlineContent":[{"code":"bitwiseOr:with:(5, 3)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"bitwiseXor:with:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:(5, 3)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"leftshift:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"leftshift:by:(23, 1)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rightshift:by:"}]}],[{"type":"paragraph","inlineContent":[{"code":"rightshift:by:(23, 1)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"onesComplement:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"onesComplement(255)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"distanceToLocation:fromLocation:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:(there, here)"}]}]]]},{"level":3,"type":"heading","text":"Conditionals","anchor":"Conditionals"},{"inlineContent":[{"text":"Conditionals are supported via the built-in","type":"text"},{"text":" ","type":"text"},{"code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]","type":"codeVoice"},{"text":" ","type":"text"},{"text":"method and ","type":"text"},{"code":"TERNARY()","type":"codeVoice"},{"text":" operator. If you need to express multiple cases","type":"text"},{"text":" ","type":"text"},{"text":"(“else-if”), you can either nest a conditional within a conditional or use the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"#code-mgl_if-code","type":"reference"},{"text":" or ","type":"text"},{"isActive":true,"identifier":"#code-mgl_match-code","type":"reference"},{"text":" function.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Aggregates","anchor":"Aggregates"},{"inlineContent":[{"type":"text","text":"Aggregate expressions can contain arrays of expressions. In some cases, it is"},{"type":"text","text":" "},{"type":"text","text":"possible to use the array itself instead of wrapping the array in an aggregate"},{"type":"text","text":" "},{"type":"text","text":"expression."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Variables","anchor":"Variables"},{"inlineContent":[{"type":"text","text":"The following variables are defined by this SDK for use with style layers:"}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"text":"Variable","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Type","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Meaning"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"$featureIdentifier"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Any GeoJSON data type","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.featureIdentifierVariableExpression"},{"text":" property.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"$geometryType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"String"}],"type":"paragraph"}],[{"inlineContent":[{"text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:","type":"text"},{"text":"*   ","type":"text"},{"code":"Point","type":"codeVoice"},{"text":" for point features, corresponding to the ","type":"text"},{"code":"MLNPointAnnotation","type":"codeVoice"},{"text":" class","type":"text"},{"text":"*   ","type":"text"},{"code":"LineString","type":"codeVoice"},{"text":" for polyline features, corresponding to the ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true,"type":"reference"},{"text":" class","type":"text"},{"text":"*   ","type":"text"},{"code":"Polygon","type":"codeVoice"},{"text":" for polygon features, corresponding to the ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true,"type":"reference"},{"text":" class","type":"text"},{"text":"This variable corresponds to the ","type":"text"},{"code":"NSExpression.geometryTypeVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"$heatmapDensity","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},{"type":"text","text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the "},{"type":"codeVoice","code":"heatmapColor"},{"type":"text","text":" property. This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.heatmapDensityVariableExpression"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"$zoomLevel"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the ","type":"text"},{"code":"NSExpression.zoomLevelVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"$lineProgress","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient"},{"type":"text","text":" property. It corresponds to the "},{"type":"codeVoice","code":"NSExpression.lineProgressVariableExpression"},{"type":"text","text":" property."}],"type":"paragraph"}]]]},{"inlineContent":[{"text":"In addition to these variables, you can define your own variables and refer to","type":"text"},{"text":" ","type":"text"},{"text":"them elsewhere in the expression. The syntax for defining a variable makes use","type":"text"},{"text":" ","type":"text"},{"text":"of a ","type":"text"},{"type":"reference","identifier":"#MapLibre-specific-functions","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"MapLibre-specific function"}],"overridingTitle":"MapLibre-specific function"},{"text":" that takes an","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" as an argument:","type":"text"}],"type":"paragraph"},{"code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"],"type":"codeListing","syntax":"objc"},{"code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"MapLibre-specific functions","anchor":"MapLibre-specific-functions"},{"name":"Warning","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Due to a change in iOS 15.5, some of these stopped working. See ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},{"text":" for more information and workarounds.","type":"text"}]}],"style":"warning"},{"inlineContent":[{"type":"text","text":"For compatibility with the MapLibre Style Spec, the following functions"},{"type":"text","text":" "},{"type":"text","text":"are defined by this SDK. When setting a style layer property, you can call these"},{"type":"text","text":" "},{"type":"text","text":"functions just like the predefined functions above, using either the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"type":"text","text":" method or a convenient format"},{"type":"text","text":" "},{"type":"text","text":"string syntax:"}],"type":"paragraph"},{"level":3,"type":"heading","text":"mgl_does:have:","anchor":"mgldoeshave"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_does:have:(SELF, '🧀🍔')","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"mgl_does:have:(%@, '🧀🍔')","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns a Boolean value indicating whether the dictionary has a value for the"},{"type":"text","text":" "},{"type":"text","text":"key or whether the evaluated object ("},{"type":"codeVoice","code":"SELF"},{"type":"text","text":") has a value for the feature"},{"type":"text","text":" "},{"type":"text","text":"attribute. Compared to the "},{"type":"reference","isActive":true,"identifier":"#code-mgl_has-code"},{"type":"text","text":" custom function,"},{"type":"text","text":" "},{"type":"text","text":"that function’s target is instead passed in as the first argument to this"},{"type":"text","text":" "},{"type":"text","text":"function. Both functions are equivalent to the syntax "},{"type":"codeVoice","code":"key != NIL"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"codeVoice","code":"%@[key] != NIL"},{"type":"text","text":" but can be used outside of a predicate."}],"type":"paragraph"},{"level":3,"type":"heading","text":"mgl_interpolate:withCurveType:parameters:stops:","anchor":"mglinterpolatewithCurveTypeparametersstops"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Produces continuous, smooth results by interpolating between pairs of input and"},{"type":"text","text":" "},{"type":"text","text":"output values (“stops”). Compared to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code"},{"type":"text","text":" "},{"type":"text","text":"custom function, the input expression (that function’s target) is instead passed"},{"type":"text","text":" "},{"type":"text","text":"in as the first argument to this function."}],"type":"paragraph"},{"level":3,"type":"heading","text":"mgl_step:from:stops:","anchor":"mglstepfromstops"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_step:from:stops:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_step:from:stops:(x, 11, %@)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Produces discrete, stepped results by evaluating a piecewise-constant function"},{"type":"text","text":" "},{"type":"text","text":"defined by pairs of input and output values (“stops”). Compared to the"},{"type":"text","text":" "},{"identifier":"#code-mgl_stepwithminimum-stops-code","type":"reference","isActive":true},{"type":"text","text":" custom"},{"type":"text","text":" "},{"type":"text","text":"function, the input expression (that function’s target) is instead passed in as"},{"type":"text","text":" "},{"type":"text","text":"the first argument to this function."}],"type":"paragraph"},{"level":3,"type":"heading","text":"mgl_join:","anchor":"mgljoin"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_join:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_join({'Old', 'MacDonald'})","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the result of concatenating together all the elements of an array in","type":"text"},{"text":" ","type":"text"},{"text":"order. Compared to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"#code-stringbyappendingstring-code","type":"reference"},{"text":" custom","type":"text"},{"text":" ","type":"text"},{"text":"function, this function takes only one argument, which is an aggregate","type":"text"},{"text":" ","type":"text"},{"text":"expression containing the strings to concatenate.","type":"text"}],"type":"paragraph"},{"text":"mgl_acos:","anchor":"mglacos","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_acos:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_acos(1)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the arccosine of the number."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"mgl_asin:","anchor":"mglasin","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_asin:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_asin(0)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the arcsine of the number.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"mgl_atan:","anchor":"mglatan","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_atan:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_atan(20)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the arctangent of the number."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"mgl_cos:","anchor":"mglcos","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_cos:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_cos(0)"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the cosine of the number.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_log2:","anchor":"mgllog2","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_log2:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_log2(1024)"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the base-2 logarithm of the number.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_round:","anchor":"mglround","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_round:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_round(1.5)"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the number rounded to the nearest integer. If the number is halfway","type":"text"},{"text":" ","type":"text"},{"text":"between two integers, this function rounds it away from zero.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"mgl_sin:","anchor":"mglsin","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_sin:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_sin(0)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the sine of the number."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_tan:","anchor":"mgltan","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_tan(0)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the tangent of the number."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_distanceFrom:","anchor":"mgldistanceFrom","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_distanceFrom:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_distanceFrom(%@)"},{"type":"text","text":" with an "},{"type":"codeVoice","code":"MLNShape"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the straight-line distance from the evaluated object to the given shape.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_coalesce:","anchor":"mglcoalesce","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_coalesce:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_coalesce({x, y, z})"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the first non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" value from an array of expressions.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_attributed:","anchor":"mglattributed","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_attributed:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_attributed({x, y, z})","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"text":"Concatenates and returns the array of ","type":"text"},{"type":"codeVoice","code":"MLNAttributedExpression"},{"text":" objects, for use","type":"text"},{"text":" ","type":"text"},{"text":"with the ","type":"text"},{"type":"codeVoice","code":"MLNSymbolStyleLayer.text"},{"text":" property.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"MLNAttributedExpression.attributes"},{"type":"text","text":" valid attributes."}],"type":"paragraph"},{"rows":[[[{"inlineContent":[{"text":"Key","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Value Type","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"MLNFontNamesAttribute"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" evaluating to an "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" array."}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"MLNFontScaleAttribute","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" evaluating to an ","type":"text"},{"code":"NSNumber","type":"codeVoice"},{"text":" value.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"MLNFontColorAttribute","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" evaluating to an ","type":"text"},{"code":"UIColor","type":"codeVoice"},{"text":" (iOS) or ","type":"text"},{"code":"NSColor","type":"codeVoice"},{"text":" (macOS).","type":"text"}],"type":"paragraph"}]]],"header":"row","type":"table"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"MLN_LET","anchor":"MLNLET","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"MLN_LET:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" Any number of variable names interspersed with their assigned"},{"type":"text","text":" "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" values, followed by an "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"that may contain references to those variables."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the result of evaluating an expression with the given variable values."},{"type":"text","text":" "},{"type":"text","text":"Compared to the"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_expressionwithcontext-code","isActive":true},{"type":"text","text":" custom"},{"type":"text","text":" "},{"type":"text","text":"function, this function takes the variable names and values inline before the"},{"type":"text","text":" "},{"type":"text","text":"expression that contains references to those variables."}],"type":"paragraph"},{"text":"MLN_MATCH","anchor":"MLNMATCH","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_MATCH:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" An input expression, then any number of argument pairs, followed by a default"},{"type":"text","text":" "},{"type":"text","text":"expression. Each argument pair consists of a constant value followed by an"},{"type":"text","text":" "},{"type":"text","text":"expression to produce as a result of matching that constant value."},{"type":"text","text":" "},{"type":"text","text":"If the input value is an aggregate expression, then any of the constant values within"},{"type":"text","text":" "},{"type":"text","text":"that aggregate expression result in the following argument. This is shorthand for"},{"type":"text","text":" "},{"type":"text","text":"specifying an argument pair for each of the constant values within that aggregate"},{"type":"text","text":" "},{"type":"text","text":"expression. It is not possible to match the aggregate expression itself."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the result of matching the input expression against the given constant"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]","type":"codeVoice"},{"text":" ","type":"text"},{"text":"method and the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"MLN_IF","anchor":"MLNIF","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_IF:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" Alternating "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":" conditionals and resulting expressions,"},{"type":"text","text":" "},{"type":"text","text":"followed by a default expression."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the first expression that meets the condition; otherwise, the default"},{"type":"text","text":" "},{"type":"text","text":"value. Unlike"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"TERNARY()"},{"type":"text","text":" syntax, this function can accept multiple “if else” conditions"},{"type":"text","text":" "},{"type":"text","text":"and is supported on iOS 8."},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"type":"text","text":" and macOS 10.10."},{"type":"emphasis","inlineContent":[{"text":"x","type":"text"}]},{"type":"text","text":"; however, each conditional"},{"type":"text","text":" "},{"type":"text","text":"passed into this function must be wrapped in a constant expression."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]","type":"codeVoice"},{"text":" ","type":"text"},{"text":"method and the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"MLN_FUNCTION","anchor":"MLNFUNCTION","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"MLN_FUNCTION:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_FUNCTION('typeof', mystery)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" Any arguments required by the expression operator.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"An expression exactly as defined by the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Custom functions","anchor":"Custom-functions","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The following custom functions are also available with the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:selectorName:arguments:]"},{"type":"text","text":" method or the"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" format string syntax."}],"type":"paragraph"},{"inlineContent":[{"text":"Some of these functions are defined as methods on their respective target","type":"text"},{"text":" ","type":"text"},{"text":"classes, but you should not call them directly outside the context of an","type":"text"},{"text":" ","type":"text"},{"text":"expression, because the result may differ from the evaluated expression’s result","type":"text"},{"text":" ","type":"text"},{"text":"or may result in undefined behavior.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The MapLibre Style Spec defines some operators for which no custom"},{"type":"text","text":" "},{"type":"text","text":"function is available. To use these operators in an "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":", call the"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_function-code","isActive":true},{"type":"text","text":" function with the same arguments"},{"type":"text","text":" "},{"type":"text","text":"that the operator expects."}],"type":"paragraph"},{"text":"boolValue","anchor":"boolValue","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"boolValue","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"FUNCTION(1, 'boolValue')","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number or string."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" None."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A Boolean representation of the target: "},{"code":"FALSE","type":"codeVoice"},{"type":"text","text":" when then input is an"},{"type":"text","text":" "},{"type":"text","text":"empty string, 0, "},{"code":"FALSE","type":"codeVoice"},{"type":"text","text":", "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":", or "},{"code":"NaN","type":"codeVoice"},{"type":"text","text":", otherwise "},{"code":"TRUE","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"mgl_has:","anchor":"mglhas","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_has:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" ","type":"text"},{"text":"or the evaluated object (","type":"text"},{"type":"codeVoice","code":"SELF"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to an ","type":"text"},{"type":"codeVoice","code":"NSString"},{"text":" ","type":"text"},{"text":"representing the key to look up in the dictionary or the feature attribute to","type":"text"},{"text":" ","type":"text"},{"text":"look up in the evaluated object (see ","type":"text"},{"type":"codeVoice","code":"MLNFeature.attributes"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"true"},{"type":"text","text":" if the dictionary has a value for the key or if the evaluated"},{"type":"text","text":" "},{"type":"text","text":"object has a value for the feature attribute."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-mgl_does-have-code","isActive":true,"type":"reference"},{"text":" function, which is used on its own","type":"text"},{"text":" ","type":"text"},{"text":"without the ","type":"text"},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator. You can also check whether an object has an","type":"text"},{"text":" ","type":"text"},{"text":"attribute by comparing the key path to ","type":"text"},{"code":"NIL","type":"codeVoice"},{"text":", for example ","type":"text"},{"code":"cheeseburger != NIL","type":"codeVoice"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"code":"burger.cheese != NIL","type":"codeVoice"}],"type":"paragraph"},{"text":"mgl_expressionWithContext:","anchor":"mglexpressionWithContext","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_expressionWithContext:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)","type":"codeVoice"},{"text":" with","type":"text"},{"text":" ","type":"text"},{"text":"a dictionary containing ","type":"text"},{"code":"ios","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"macos","type":"codeVoice"},{"text":" keys","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that may contain references to the variables"},{"type":"text","text":" "},{"type":"text","text":"defined in the context dictionary."}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" An ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"NSString","type":"codeVoice"},{"text":"s as keys and","type":"text"},{"text":" ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":"s as values. Each key is a variable name and each","type":"text"},{"text":" ","type":"text"},{"text":"value is the variable’s value within the target expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The target expression with variable subexpressions replaced with the values"},{"type":"text","text":" "},{"type":"text","text":"defined in the context dictionary."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-mgl_let-code","isActive":true},{"text":" function, which is used on its own without the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION()"},{"text":" operator.","type":"text"}],"type":"paragraph"},{"text":"mgl_interpolateWithCurveType:parameters:stops:","anchor":"mglinterpolateWithCurveTypeparametersstops","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"with a dictionary containing zoom levels or other constant values as keys"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number and contains a"},{"type":"text","text":" "},{"type":"text","text":"variable or key path expression."}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" The first argument is one of the following strings denoting curve types:"},{"type":"text","text":" "},{"code":"linear","type":"codeVoice"},{"type":"text","text":", "},{"code":"exponential","type":"codeVoice"},{"type":"text","text":", or "},{"code":"cubic-bezier","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The second argument is an expression providing parameters for the curve:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"linear"},{"type":"text","text":", the argument is "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"exponential"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"type":"text","text":"expression that evaluates to a number, specifying the base of the"},{"type":"text","text":" "},{"type":"text","text":"exponential interpolation."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"cubic-bezier"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"type":"text","text":"array or aggregate expression containing four expressions, each"},{"type":"text","text":" "},{"type":"text","text":"evaluating to a number. The four numbers are control points for the"},{"type":"text","text":" "},{"type":"text","text":"cubic Bézier curve."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The third argument is an "},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" object representing the"},{"type":"text","text":" "},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A value interpolated along the continuous mathematical function defined by the"},{"type":"text","text":" "},{"type":"text","text":"arguments, with the target as the input to the function."}],"type":"paragraph"},{"inlineContent":[{"text":"The input expression is matched against the keys in the stop dictionary. The","type":"text"},{"text":" ","type":"text"},{"text":"keys may be feature attribute values, zoom levels, or heatmap densities. The","type":"text"},{"text":" ","type":"text"},{"text":"values may be constant values or ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" objects. For example, you can","type":"text"},{"text":" ","type":"text"},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"text":" ","type":"text"},{"text":"yellow, orange, and red as the values.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]","type":"codeVoice"},{"text":" ","type":"text"},{"text":"method and the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"function, which is used on its own without the "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}],"type":"paragraph"},{"text":"mgl_numberWithFallbackValues:","anchor":"mglnumberWithFallbackValues","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"doubleValue"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"floatValue"},{"text":", or","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"decimalValue"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"text":" ","type":"text"},{"text":"string.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" Zero or more ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":"s, each evaluating to a Boolean value","type":"text"},{"text":" ","type":"text"},{"text":"or string.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A numeric representation of the target:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}]}]},{"content":[{"inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"floatValue"},{"type":"text","text":", or"},{"type":"text","text":" "},{"type":"codeVoice","code":"decimalValue"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"type":"text","text":"string."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" ","type":"text"},{"text":"Zero or more ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":"s, each evaluating to a Boolean value","type":"text"},{"text":" ","type":"text"},{"text":"or string.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A numeric representation of the target:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"},{"type":"text","text":" "},{"type":"text","text":"“"},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","isActive":true},{"type":"text","text":"”"},{"type":"text","text":" "},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If multiple values are provided, each one is evaluated in order until the"},{"type":"text","text":" "},{"type":"text","text":"first successful conversion is obtained."}]}]}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"type":"text","text":" "},{"type":"text","text":"number by passing the value and the string "},{"type":"codeVoice","code":"NSNumber"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" "},{"type":"text","text":"operator."}],"type":"paragraph"},{"text":"mgl_stepWithMinimum:stops:","anchor":"mglstepWithMinimumstops","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)","type":"codeVoice"},{"text":" with","type":"text"},{"text":" ","type":"text"},{"text":"a dictionary with zoom levels or other constant values as keys","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number and contains a"},{"type":"text","text":" "},{"type":"text","text":"variable or key path expression."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"The first argument is an expression that evaluates to a number, specifying"},{"type":"text","text":" "},{"type":"text","text":"the minimum value in case the target is less than any of the stops in the"},{"type":"text","text":" "},{"type":"text","text":"second argument."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The second argument is an "},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" object representing the"},{"type":"text","text":" "},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"},{"inlineContent":[{"text":"The output value of the stop whose key is just less than the evaluated target,","type":"text"},{"text":" ","type":"text"},{"text":"or the minimum value if the target is less than the least of the stops’ keys.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The input expression is matched against the keys in the stop dictionary. The","type":"text"},{"text":" ","type":"text"},{"text":"keys may be feature attribute values, zoom levels, or heatmap densities. The","type":"text"},{"text":" ","type":"text"},{"text":"values may be constant values or ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" objects. For example, you can","type":"text"},{"text":" ","type":"text"},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"text":" ","type":"text"},{"text":"yellow, orange, and red as the values.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"stringByAppendingString:","anchor":"stringByAppendingString","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"stringByAppendingString:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a string.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" ","type":"text"},{"text":"One or more ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":"s, each evaluating to a string.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The target string with each of the argument strings appended in order."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]"},{"type":"text","text":" "},{"type":"text","text":"method and is similar to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_join-code","isActive":true},{"type":"text","text":" function, which concatenates multiple"},{"type":"text","text":" "},{"type":"text","text":"expressions and is used on its own without the "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}],"type":"paragraph"},{"text":"stringValue","anchor":"stringValue","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"stringValue","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(ele, 'stringValue')"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"type":"text","text":"string."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" "},{"type":"text","text":"None."}],"type":"paragraph"},{"inlineContent":[{"text":"A string representation of the target:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"type":"text","text":"NIL"},{"type":"text","text":", the result is the empty string."}]}]},{"content":[{"inlineContent":[{"text":"If the target is a Boolean value, the result is the string ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the target is a number, it is converted to a string as specified by the","type":"text"},{"text":" ","type":"text"},{"text":"“","type":"text"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","type":"reference","isActive":true},{"text":"”","type":"text"},{"text":" ","type":"text"},{"text":"algorithm of the ECMAScript Language Specification.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a color, it is converted to a string of the form"},{"type":"text","text":" "},{"type":"codeVoice","code":"rgba(r,g,b,a)"},{"type":"text","text":", where "},{"type":"text","text":"r"},{"type":"text","text":", "},{"type":"text","text":"g"},{"type":"text","text":", and "},{"type":"text","text":"b"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"text","text":"numerals ranging from 0 to 255 and "},{"type":"text","text":"a"},{"type":"text","text":" ranges from 0 to 1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Otherwise, the target is converted to a string in the format specified by the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"function of the ECMAScript Language Specification.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. You can also cast a value to a","type":"text"},{"text":" ","type":"text"},{"text":"string by passing the value and the string ","type":"text"},{"code":"NSString","type":"codeVoice"},{"text":" into the ","type":"text"},{"code":"CAST()","type":"codeVoice"},{"text":" ","type":"text"},{"text":"operator.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"],"traits":[{"interfaceLanguage":"occ"}]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"abstract":[{"text":"Using ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"text":" with MapLibre iOS","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"occ","url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions"},"references":{"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates","title":"Tile URL Templates","abstract":[{"type":"text","text":"Using URL Templates when defining tile sources"}],"role":"article","kind":"article"},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","titleInlineContent":[{"code":"mgl_interpolateWithCurveType:parameters:stops:","type":"codeVoice"}],"url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","type":"link","title":"mgl_interpolateWithCurveType:parameters:stops:"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","titleInlineContent":[{"text":"functions predefined","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","type":"link","title":"functions predefined"},"doc://org.swift.MyProject/documentation/MapLibre":{"kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}],"url":"\/documentation\/maplibre","title":"MapLibre","type":"topic","role":"collection"},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","titleInlineContent":[{"code":"interpolate","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","type":"link","title":"interpolate"},"#key-paths":{"identifier":"#key-paths","titleInlineContent":[{"text":"key paths","type":"text"}],"url":"#key-paths","type":"link","title":"key paths"},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","titleInlineContent":[{"code":"distance","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","type":"link","title":"distance"},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","titleInlineContent":[{"type":"codeVoice","code":"coalesce"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","type":"link","title":"coalesce"},"#variables":{"identifier":"#variables","titleInlineContent":[{"text":"variables","type":"text"}],"url":"#variables","type":"link","title":"variables"},"#code-mgl_if-code":{"identifier":"#code-mgl_if-code","titleInlineContent":[{"type":"codeVoice","code":"MLN_IF()"}],"url":"#code-mgl_if-code","type":"link","title":"MLN_IF()"},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","titleInlineContent":[{"code":"sin","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","type":"link","title":"sin"},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","titleInlineContent":[{"type":"codeVoice","code":"tan"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","type":"link","title":"tan"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","titleInlineContent":[{"code":"asin","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","type":"link","title":"asin"},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}],"url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","type":"link","title":"mgl_interpolate:withCurveType:parameters:stops:"},"https://tc39.github.io/ecma262/#sec-json.stringify":{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","titleInlineContent":[{"code":"JSON.stringify()","type":"codeVoice"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","type":"link","title":"JSON.stringify()"},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","titleInlineContent":[{"type":"codeVoice","code":"cos"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","type":"link","title":"cos"},"#code-mgl_does-have-code":{"identifier":"#code-mgl_does-have-code","titleInlineContent":[{"code":"mgl_does:have:","type":"codeVoice"}],"url":"#code-mgl_does-have-code","type":"link","title":"mgl_does:have:"},"#code-stringbyappendingstring-code":{"identifier":"#code-stringbyappendingstring-code","titleInlineContent":[{"type":"codeVoice","code":"stringByAppendingString:"}],"url":"#code-stringbyappendingstring-code","type":"link","title":"stringByAppendingString:"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"kind":"article","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample","title":"Adding Multiple Images","abstract":[{"type":"text","text":"Adding images to the map and assigning them to POI types"}],"role":"article"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","titleInlineContent":[{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"text":" method","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","type":"link","title":"+[NSExpression expressionForFunction:arguments:] method"},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","titleInlineContent":[{"type":"codeVoice","code":"step"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","type":"link","title":"step"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers","type":"topic","title":"User Interactions","abstract":[{"text":"Learn how to work with gesture recognizers","type":"text"}],"role":"article","kind":"article"},"#code-mgl_has-code":{"identifier":"#code-mgl_has-code","titleInlineContent":[{"code":"mgl_has:","type":"codeVoice"}],"url":"#code-mgl_has-code","type":"link","title":"mgl_has:"},"#using-expressions-to-configure-layout-and-paint-attributes":{"identifier":"#using-expressions-to-configure-layout-and-paint-attributes","titleInlineContent":[{"text":"inside an expression","type":"text"}],"url":"#using-expressions-to-configure-layout-and-paint-attributes","type":"link","title":"inside an expression"},"#code-mgl_match-code":{"identifier":"#code-mgl_match-code","titleInlineContent":[{"code":"MLN_MATCH()","type":"codeVoice"}],"url":"#code-mgl_match-code","type":"link","title":"MLN_MATCH()"},"#code-mgl_expressionwithcontext-code":{"identifier":"#code-mgl_expressionwithcontext-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_expressionWithContext:"}],"url":"#code-mgl_expressionwithcontext-code","type":"link","title":"mgl_expressionWithContext:"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors","role":"article","title":"Information for Style Authors","abstract":[],"kind":"article","type":"topic","url":"\/documentation\/maplibre-native-for-ios\/for_style_authors"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","titleInlineContent":[{"code":"to-number","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","type":"link","title":"to-number"},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","titleInlineContent":[{"type":"codeVoice","code":"atan"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","type":"link","title":"atan"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","kind":"article","abstract":[{"type":"text","text":"Using custom fonts"}],"url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts","role":"article","type":"topic","title":"Customizing Fonts"},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"role":"symbol","fragments":[{"text":"MLNShapeSource","kind":"identifier"}],"abstract":[{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true,"type":"reference"},{"type":"text","text":" is a map content source that supplies vector shapes to be"},{"type":"text","text":" "},{"type":"text","text":"shown on the map. The shapes may be instances of "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true,"type":"reference"},{"type":"text","text":" or "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true,"type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or they may be defined by local or external"},{"type":"text","text":" "},{"type":"text","text":"GeoJSON"},{"type":"text","text":" code. A shape source is added to an"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true,"type":"reference"},{"type":"text","text":" object along with an "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true,"type":"reference"},{"type":"text","text":" object. The vector style"},{"type":"text","text":" "},{"type":"text","text":"layer defines the appearance of any content supplied by the shape source. You"},{"type":"text","text":" "},{"type":"text","text":"can update a shape source by setting its "},{"type":"codeVoice","code":"shape"},{"type":"text","text":" or "},{"type":"codeVoice","code":"URL"},{"type":"text","text":" property."}],"url":"\/documentation\/maplibre\/mlnshapesource","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"topic","kind":"symbol","title":"MLNShapeSource"},"#code-mgl_function-code":{"identifier":"#code-mgl_function-code","titleInlineContent":[{"code":"MLN_FUNCTION()","type":"codeVoice"}],"url":"#code-mgl_function-code","type":"link","title":"MLN_FUNCTION()"},"#MapLibre-specific-functions":{"identifier":"#MapLibre-specific-functions","titleInlineContent":[{"text":"MapLibre-specific functions","type":"text"}],"url":"#MapLibre-specific-functions","type":"link","title":"MapLibre-specific functions"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","abstract":[{"type":"text","text":"The color gradient with which the line will be drawn. This property only has an"},{"type":"text","text":" "},{"type":"text","text":"effect on lines defined by an "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference"},{"type":"text","text":" whose "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"option is set to "},{"type":"codeVoice","code":"YES"},{"type":"text","text":"."}],"fragments":[{"text":"lineGradient","kind":"identifier"}],"title":"lineGradient","url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient","type":"topic","kind":"symbol","role":"symbol"},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","titleInlineContent":[{"text":"NumberToString","type":"text"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","type":"link","title":"NumberToString"},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","titleInlineContent":[{"type":"codeVoice","code":"round"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","type":"link","title":"round"},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","titleInlineContent":[{"code":"log2","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","type":"link","title":"log2"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"identifier","text":"MLNPolyline"}],"url":"\/documentation\/maplibre\/mlnpolyline","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","abstract":[{"type":"text","text":"An "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","type":"reference","isActive":true},{"type":"text","text":" object represents a shape consisting of two or more vertices,"},{"type":"text","text":" "},{"type":"text","text":"specified as "},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"type":"text","text":" instances, and the line segments that"},{"type":"text","text":" "},{"type":"text","text":"connect them. For example, you could use an polyline to represent a road or the"},{"type":"text","text":" "},{"type":"text","text":"path along which something moves."}],"title":"MLNPolyline"},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","titleInlineContent":[{"type":"codeVoice","code":"acos"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","type":"link","title":"acos"},"#code-mgl_join-code":{"identifier":"#code-mgl_join-code","titleInlineContent":[{"code":"mgl_join:","type":"codeVoice"}],"url":"#code-mgl_join-code","type":"link","title":"mgl_join:"},"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","titleInlineContent":[{"text":"kernel density estimation","type":"text"}],"url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","type":"link","title":"kernel density estimation"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","titleInlineContent":[{"code":"has","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","type":"link","title":"has"},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","titleInlineContent":[{"type":"codeVoice","code":"match"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","type":"link","title":"match"},"#code-mgl_stepwithminimum-stops-code":{"identifier":"#code-mgl_stepwithminimum-stops-code","titleInlineContent":[{"code":"mgl_stepWithMinimum:stops:","type":"codeVoice"}],"url":"#code-mgl_stepwithminimum-stops-code","type":"link","title":"mgl_stepWithMinimum:stops:"},"https://maplibre.org/maplibre-style-spec/expressions/":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","titleInlineContent":[{"text":"MapLibre Style Spec","type":"text"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","type":"link","title":"MapLibre Style Spec"},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","titleInlineContent":[{"code":"NSExpression+MLNAdditions.h","type":"codeVoice"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","type":"link","title":"NSExpression+MLNAdditions.h"},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","titleInlineContent":[{"type":"codeVoice","code":"format"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","type":"link","title":"format"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"kind":"symbol","fragments":[{"kind":"identifier","text":"MLNPolygon"}],"title":"MLNPolygon","type":"topic","url":"\/documentation\/maplibre\/mlnpolygon","abstract":[{"type":"text","text":"An "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","type":"reference","isActive":true},{"type":"text","text":" object represents a closed shape consisting of four or more"},{"type":"text","text":" "},{"type":"text","text":"vertices, specified as "},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"type":"text","text":" instances, and the edges that"},{"type":"text","text":" "},{"type":"text","text":"connect them. For example, you could use a polygon shape to represent a"},{"type":"text","text":" "},{"type":"text","text":"building, a lake, or an area you want to highlight."}],"role":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon"},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","titleInlineContent":[{"code":"concat","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","type":"link","title":"concat"},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","titleInlineContent":[{"type":"codeVoice","code":"case"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","type":"link","title":"case"},"https://github.com/maplibre/maplibre-native/issues/331":{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","titleInlineContent":[{"text":"#331","type":"text"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","type":"link","title":"#331"},"#code-mgl_let-code":{"identifier":"#code-mgl_let-code","titleInlineContent":[{"type":"codeVoice","code":"MLN_LET"}],"url":"#code-mgl_let-code","type":"link","title":"MLN_LET"},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","titleInlineContent":[{"code":"let","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","type":"link","title":"let"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","titleInlineContent":[{"type":"codeVoice","code":"to-string"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","type":"link","title":"to-string"},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","titleInlineContent":[{"text":"ToNumber Applied to the String Type","type":"text"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","type":"link","title":"ToNumber Applied to the String Type"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","titleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}],"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"link","title":"Predicate Programming Guide"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"role":"article","url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","abstract":[{"type":"text","text":"MapLibre Native for iOS supports custom "},{"type":"codeVoice","code":"Info.plist"},{"type":"text","text":" keys in your application in order to configure various settings."}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","type":"topic","kind":"article","title":"Info.plist Keys"}}}