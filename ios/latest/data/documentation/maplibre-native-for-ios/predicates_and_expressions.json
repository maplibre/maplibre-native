{"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"variants":[{"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"],"traits":[{"interfaceLanguage":"occ"}]}],"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"],"generated":true,"title":"Other Articles"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Using "},{"code":"NSPredicate","type":"codeVoice"},{"text":" with MapLibre iOS","type":"text"}],"identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions","interfaceLanguage":"occ"},"metadata":{"roleHeading":"Article","modules":[{"name":"MapLibre"}],"role":"article","title":"Predicates and expressions"},"primaryContentSections":[{"content":[{"inlineContent":[{"text":"Style layers use predicates and expressions to determine what to display and how","type":"text"},{"text":" ","type":"text"},{"text":"to format it. ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Predicates"}]},{"type":"text","text":" are represented by the same "},{"type":"codeVoice","code":"NSPredicate"},{"text":" class that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"filters results from Core Data or items in an "},{"code":"NSArray","type":"codeVoice"},{"type":"text","text":" in Objective-C."},{"type":"text","text":" "},{"text":"Predicates are based on ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"expressions","type":"text"}]},{"type":"text","text":", represented by the "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" class."},{"text":" ","type":"text"},{"type":"text","text":"Somewhat unusually, style layers also use expressions on their own."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This document discusses the specific subset of the predicate and expression"},{"text":" ","type":"text"},{"text":"syntax supported by this SDK. For a more general introduction to predicates and","type":"text"},{"type":"text","text":" "},{"text":"expressions, consult the","type":"text"},{"type":"text","text":" "},{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"in Apple developer documentation. For additional detail on how this SDK has","type":"text"},{"type":"text","text":" "},{"text":"extended the ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" class, see the ","type":"text"},{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","type":"reference","isActive":true},{"type":"text","text":" header."}],"type":"paragraph"},{"text":"Using predicates to filter vector data","type":"heading","anchor":"Using-predicates-to-filter-vector-data","level":2},{"type":"paragraph","inlineContent":[{"text":"Most style layer classes display ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"type":"text","text":" objects that you can show or hide"},{"type":"text","text":" "},{"text":"based on the feature’s attributes. Use the ","type":"text"},{"code":"MLNVectorStyleLayer.predicate","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"property to include only the features in the source layer that satisfy a"},{"text":" ","type":"text"},{"text":"condition that you define.","type":"text"}]},{"type":"heading","text":"Operators","anchor":"Operators","level":3},{"inlineContent":[{"text":"The following comparison operators are supported:","type":"text"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key = value"},{"code":"key == value","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSGreaterThanOrEqualToPredicateOperatorType"}]}],[{"inlineContent":[{"code":"key >= value","type":"codeVoice"},{"type":"codeVoice","code":"key => value"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSLessThanOrEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key <= value"},{"type":"codeVoice","code":"key =< value"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSGreaterThanPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"key > value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSLessThanPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"key < value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNotEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"code":"key != value","type":"codeVoice"},{"type":"codeVoice","code":"key <> value"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSBetweenPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key BETWEEN { 32, 212 }"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To test whether a feature has or lacks a specific attribute, compare the"},{"text":" ","type":"text"},{"text":"attribute to ","type":"text"},{"type":"codeVoice","code":"NULL"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":". Predicates created using the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSPredicate predicateWithValue:]"},{"type":"text","text":" method are also supported. String"},{"text":" ","type":"text"},{"type":"text","text":"operators and custom operators are not supported."}]},{"inlineContent":[{"type":"text","text":"The following compound operators are supported:"}],"type":"paragraph"},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSCompoundPredicateType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAndPredicateType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"predicate1 AND predicate2"},{"code":"predicate1 && predicate2","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSOrPredicateType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"predicate1 OR predicate2","type":"codeVoice"},{"text":"predicate1 || predicate2","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNotPredicateType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NOT predicate"},{"code":"!predicate","type":"codeVoice"}]}]]],"type":"table"},{"inlineContent":[{"text":"The following aggregate operators are supported:","type":"text"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSInPredicateOperatorType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSContainsPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key","type":"codeVoice"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"text":"You can use the ","type":"text"},{"code":"IN","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"CONTAINS","type":"codeVoice"},{"text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature (","type":"text"},{"code":"SELF","type":"codeVoice"},{"text":") lies within a given ","type":"text"},{"code":"MLNShape","type":"codeVoice"},{"type":"text","text":" or "},{"code":"MLNFeature","type":"codeVoice"},{"text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:","type":"text"}]},{"code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"],"syntax":"objc","type":"codeListing"},{"type":"codeListing","code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following combinations of comparison operators and modifiers are supported:"}]},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateModifier"}],"type":"paragraph"}],[{"inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAllPredicateModifier"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"ALL haystack != needle"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAnyPredicateModifier"}]}],[{"inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"ANY haystack = needle","type":"codeVoice"},{"code":"SOME haystack = needle","type":"codeVoice"}]}]]]},{"inlineContent":[{"type":"text","text":"The following comparison predicate options are supported for comparison and"},{"text":" ","type":"text"},{"type":"text","text":"aggregate operators that are used in the predicate:"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"code":"NSComparisonPredicateOptions","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"inlineContent":[{"code":"NSCaseInsensitivePredicateOption","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"'QUEBEC' =[c] 'Quebec'"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSDiacriticInsensitivePredicateOption"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"'Québec' =[d] 'Quebec'"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Other comparison predicate options are unsupported, namely "},{"type":"codeVoice","code":"l"},{"text":" ","type":"text"},{"text":"(for locale sensitivity) and ","type":"text"},{"type":"codeVoice","code":"n"},{"text":" (for normalization). A comparison is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison"},{"type":"text","text":" "},{"type":"text","text":"predicate options are not supported in conjunction with comparison modifiers"},{"text":" ","type":"text"},{"type":"text","text":"like "},{"type":"codeVoice","code":"ALL"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"ANY"},{"type":"text","text":"."}]},{"text":"Operands","level":3,"type":"heading","anchor":"Operands"},{"inlineContent":[{"text":"Operands in predicates can be ","type":"text"},{"isActive":true,"type":"reference","identifier":"#variables"},{"type":"text","text":", "},{"type":"reference","identifier":"#key-paths","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or almost anything else that can appear"},{"text":" ","type":"text"},{"identifier":"#using-expressions-to-configure-layout-and-paint-attributes","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Automatic type casting is not performed. Therefore, a feature only matches a"},{"type":"text","text":" "},{"type":"text","text":"predicate if its value for the attribute in question is of the same type as the"},{"type":"text","text":" "},{"type":"text","text":"value specified in the predicate. Use the "},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" operator to convert a key"},{"text":" ","type":"text"},{"type":"text","text":"path or variable into a matching type:"}]},{"items":[{"content":[{"inlineContent":[{"text":"To cast a value to a number, use ","type":"text"},{"code":"CAST(key, 'NSNumber')","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast a value to a string, use "},{"code":"CAST(key, 'NSString')","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast a value to a color, use ","type":"text"},{"code":"CAST(key, 'UIColor')","type":"codeVoice"},{"type":"text","text":" on iOS and "},{"type":"codeVoice","code":"CAST(key, 'NSColor')"},{"type":"text","text":" on macOS."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast an ","type":"text"},{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"UIColor"},{"text":" object to an array, use ","type":"text"},{"type":"codeVoice","code":"CAST(noindex(color), 'NSArray')"},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"For details about the predicate format string syntax, consult the “Predicate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Format String Syntax” chapter of the"},{"type":"text","text":" "},{"inlineContent":[{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"reference","isActive":true,"overridingTitle":"Predicate Programming Guide","overridingTitleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}]}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"in Apple developer documentation."}]},{"level":2,"text":"Using expressions to configure layout and paint attributes","type":"heading","anchor":"Using-expressions-to-configure-layout-and-paint-attributes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An expression can contain subexpressions of various types. Each of the supported"},{"text":" ","type":"text"},{"type":"text","text":"types of expressions is discussed below."}]},{"type":"heading","text":"Constant values","anchor":"Constant-values","level":3},{"inlineContent":[{"type":"text","text":"A constant value can be of any of the following types:"}],"type":"paragraph"},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"text":"In Objective-C","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"In Swift","type":"text"}]}]],[[{"inlineContent":[{"code":"NSColor","type":"codeVoice"},{"text":" (macOS)","type":"text"},{"type":"codeVoice","code":"UIColor"},{"text":" (iOS)","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSColor"},{"text":" (macOS)","type":"text"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS)"}]}]],[[{"inlineContent":[{"code":"NSString","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSString"}]}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNumber.doubleValue","type":"codeVoice"}]}],[{"inlineContent":[{"code":"NSNumber.doubleValue","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSArray<NSNumber>"}],"type":"paragraph"}],[{"inlineContent":[{"code":"[Float]","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSArray<NSString>"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[String]"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSValue.CGVectorValue"},{"text":" (iOS)","type":"text"},{"code":"NSValue","type":"codeVoice"},{"text":" containing ","type":"text"},{"type":"codeVoice","code":"CGVector"},{"type":"text","text":" (macOS)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.cgVectorValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue"},{"text":" containing ","type":"text"},{"type":"codeVoice","code":"CGVector"},{"type":"text","text":" (macOS)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSValue.UIEdgeInsetsValue"},{"type":"text","text":" (iOS)"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"text":" (macOS)","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.uiEdgeInsetsValue"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"text":" (macOS)","type":"text"}]}]]],"header":"row"},{"inlineContent":[{"text":"For literal floating-point values, use ","type":"text"},{"type":"codeVoice","code":"-[NSNumber numberWithDouble:]"},{"text":" instead","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"codeVoice","code":"-[NSNumber numberWithFloat:]"},{"text":" to avoid precision issues.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Key paths","anchor":"Key-paths","level":3},{"type":"paragraph","inlineContent":[{"text":"A key path expression refers to an attribute of the ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"text":" object being","type":"text"},{"text":" ","type":"text"},{"text":"evaluated for display. For example, if a polygon’s ","type":"text"},{"type":"codeVoice","code":"MLNFeature.attributes"},{"text":" ","type":"text"},{"text":"dictionary contains the ","type":"text"},{"type":"codeVoice","code":"floorCount"},{"text":" key, then the key path ","type":"text"},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" refers"},{"type":"text","text":" "},{"text":"to the value of the ","type":"text"},{"code":"floorCount","type":"codeVoice"},{"type":"text","text":" attribute when evaluating that particular"},{"type":"text","text":" "},{"text":"polygon.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following special attributes are also available on features that are produced"},{"type":"text","text":" "},{"type":"text","text":"as a result of clustering multiple point features together in a shape source:"}]},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"text":"Attribute","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Type"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Meaning"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"cluster"}]}],[{"inlineContent":[{"text":"Bool","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"cluster_id","type":"text"}]}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Identifier for the point cluster."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"point_count"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of point features in a given cluster."}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some characters may not be used directly as part of a key path in a format"},{"type":"text","text":" "},{"text":"string. For example, if a feature’s attribute is named ","type":"text"},{"code":"ISO 3166-1:2006","type":"codeVoice"},{"text":", an","type":"text"},{"type":"text","text":" "},{"text":"expression format string of ","type":"text"},{"type":"codeVoice","code":"lowercase(ISO 3166-1:2006)"},{"type":"text","text":" or a predicate format"},{"type":"text","text":" "},{"type":"text","text":"string of "},{"type":"codeVoice","code":"ISO 3166-1:2006 == 'US-OH'"},{"type":"text","text":" would raise an exception. Instead, use a"},{"type":"text","text":" "},{"type":"codeVoice","code":"%K"},{"type":"text","text":" placeholder or the "},{"type":"codeVoice","code":"+[NSExpression expressionForKeyPath:]"},{"type":"text","text":" initializer:"}]},{"syntax":"objc","type":"codeListing","code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"]},{"type":"codeListing","syntax":"swift","code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"]},{"text":"Functions","type":"heading","level":3,"anchor":"Functions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of the"},{"text":" ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"by the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","isActive":true},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the following subset is supported in layer attribute values:"}]},{"rows":[[[{"type":"paragraph","inlineContent":[{"text":"Initializer parameter","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"average:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"average({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"sum:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"sum({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"count:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"count({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"min:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"min({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"inlineContent":[{"code":"max:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"max({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"add:to:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"1 + 2","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"from:subtract:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"2 - 1","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"multiply:by:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"1 * 2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"divide:by:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"1 \/ 2","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"modulus:by:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"modulus:by:(1, 2)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"sqrt(2)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"log:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"log(10)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"ln:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"ln(2)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"raise:toPower:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"2 ** 2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"exp:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"exp(0)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ceiling:"}]}],[{"inlineContent":[{"code":"ceiling(0.99999)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"abs:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"abs(-1)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"trunc:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"trunc(6378.1370)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"floor:"}]}],[{"inlineContent":[{"code":"floor(-0.99999)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"uppercase:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"uppercase('Elysian Fields')"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"lowercase:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"lowercase('DOWNTOWN')"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"noindex:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"noindex(0 + 2 + c)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"length:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"length('Wapakoneta')","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"castObject:toType:"}]}],[{"type":"paragraph","inlineContent":[{"code":"CAST(ele, 'NSString')","type":"codeVoice"},{"type":"codeVoice","code":"CAST(ele, 'NSNumber')"}]}]]],"type":"table","header":"row"},{"inlineContent":[{"type":"text","text":"A number of "},{"isActive":true,"type":"reference","identifier":"#MapLibre-specific-functions"},{"type":"text","text":" are also"},{"type":"text","text":" "},{"text":"available.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following predefined functions are ","type":"text"},{"type":"strong","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" supported:"}]},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializer parameter"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"median:"}]}],[{"inlineContent":[{"code":"median({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"mode:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"mode({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"stddev:"}]}],[{"inlineContent":[{"code":"stddev({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"random"}]}],[{"inlineContent":[{"code":"random()","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"randomn:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"randomn(10)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"now","type":"codeVoice"}]}],[{"inlineContent":[{"code":"now()","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"bitwiseAnd:with:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:(5, 3)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"bitwiseOr:with:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"bitwiseOr:with:(5, 3)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"bitwiseXor:with:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:(5, 3)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"leftshift:by:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"leftshift:by:(23, 1)"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"rightshift:by:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rightshift:by:(23, 1)"}]}]],[[{"inlineContent":[{"code":"onesComplement:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"onesComplement(255)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:(there, here)"}]}]]],"type":"table","header":"row"},{"text":"Conditionals","level":3,"anchor":"Conditionals","type":"heading"},{"inlineContent":[{"type":"text","text":"Conditionals are supported via the built-in"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"type":"text","text":" "},{"type":"text","text":"method and "},{"type":"codeVoice","code":"TERNARY()"},{"text":" operator. If you need to express multiple cases","type":"text"},{"text":" ","type":"text"},{"text":"(“else-if”), you can either nest a conditional within a conditional or use the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-mgl_if-code","type":"reference","isActive":true},{"text":" or ","type":"text"},{"identifier":"#code-mgl_match-code","isActive":true,"type":"reference"},{"type":"text","text":" function."}],"type":"paragraph"},{"type":"heading","level":3,"text":"Aggregates","anchor":"Aggregates"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Aggregate expressions can contain arrays of expressions. In some cases, it is"},{"type":"text","text":" "},{"type":"text","text":"possible to use the array itself instead of wrapping the array in an aggregate"},{"type":"text","text":" "},{"type":"text","text":"expression."}]},{"level":3,"text":"Variables","type":"heading","anchor":"Variables"},{"inlineContent":[{"text":"The following variables are defined by this SDK for use with style layers:","type":"text"}],"type":"paragraph"},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Variable","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type"}]}],[{"inlineContent":[{"type":"text","text":"Meaning"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"$featureIdentifier","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Any GeoJSON data type"}]}],[{"inlineContent":[{"text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.featureIdentifierVariableExpression"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"$geometryType","type":"codeVoice"}]}],[{"inlineContent":[{"type":"text","text":"String"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:"},{"type":"text","text":"*   "},{"type":"codeVoice","code":"Point"},{"type":"text","text":" for point features, corresponding to the "},{"type":"codeVoice","code":"MLNPointAnnotation"},{"type":"text","text":" class"},{"type":"text","text":"*   "},{"type":"codeVoice","code":"LineString"},{"type":"text","text":" for polyline features, corresponding to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline"},{"text":" class","type":"text"},{"text":"*   ","type":"text"},{"type":"codeVoice","code":"Polygon"},{"text":" for polygon features, corresponding to the ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true,"type":"reference"},{"text":" class","type":"text"},{"text":"This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.geometryTypeVariableExpression"},{"type":"text","text":" property."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$heatmapDensity"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","isActive":true},{"type":"text","text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the "},{"type":"codeVoice","code":"heatmapColor"},{"text":" property. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.heatmapDensityVariableExpression"},{"text":" property.","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$zoomLevel"}]}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.zoomLevelVariableExpression"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$lineProgress"}]}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient"},{"text":" property. It corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.lineProgressVariableExpression"},{"type":"text","text":" property."}]}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"text":"In addition to these variables, you can define your own variables and refer to","type":"text"},{"type":"text","text":" "},{"text":"them elsewhere in the expression. The syntax for defining a variable makes use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of a "},{"isActive":true,"overridingTitle":"MapLibre-specific function","type":"reference","overridingTitleInlineContent":[{"text":"MapLibre-specific function","type":"text"}],"identifier":"#MapLibre-specific-functions"},{"text":" that takes an","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSDictionary"},{"text":" as an argument:","type":"text"}]},{"code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"],"type":"codeListing","syntax":"objc"},{"syntax":"swift","code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"],"type":"codeListing"},{"type":"heading","level":2,"anchor":"MapLibre-specific-functions","text":"MapLibre-specific functions"},{"type":"aside","style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to a change in iOS 15.5, some of these stopped working. See "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},{"text":" for more information and workarounds.","type":"text"}]}],"name":"Warning"},{"inlineContent":[{"type":"text","text":"For compatibility with the MapLibre Style Spec, the following functions"},{"text":" ","type":"text"},{"type":"text","text":"are defined by this SDK. When setting a style layer property, you can call these"},{"text":" ","type":"text"},{"text":"functions just like the predefined functions above, using either the","type":"text"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"text":" method or a convenient format","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"string syntax:"}],"type":"paragraph"},{"type":"heading","anchor":"mgldoeshave","level":3,"text":"mgl_does:have:"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_does:have:(SELF, '🧀🍔')","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"mgl_does:have:(%@, '🧀🍔')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"Returns a Boolean value indicating whether the dictionary has a value for the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"key or whether the evaluated object ("},{"type":"codeVoice","code":"SELF"},{"text":") has a value for the feature","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"attribute. Compared to the "},{"isActive":true,"type":"reference","identifier":"#code-mgl_has-code"},{"text":" custom function,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that function’s target is instead passed in as the first argument to this"},{"type":"text","text":" "},{"type":"text","text":"function. Both functions are equivalent to the syntax "},{"type":"codeVoice","code":"key != NIL"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"codeVoice","code":"%@[key] != NIL"},{"text":" but can be used outside of a predicate.","type":"text"}]},{"text":"mgl_interpolate:withCurveType:parameters:stops:","type":"heading","anchor":"mglinterpolatewithCurveTypeparametersstops","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"text":"Produces continuous, smooth results by interpolating between pairs of input and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"output values (“stops”). Compared to the"},{"type":"text","text":" "},{"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"custom function, the input expression (that function’s target) is instead passed"},{"text":" ","type":"text"},{"type":"text","text":"in as the first argument to this function."}],"type":"paragraph"},{"type":"heading","text":"mgl_step:from:stops:","level":3,"anchor":"mglstepfromstops"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_step:from:stops:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_step:from:stops:(x, 11, %@)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Produces discrete, stepped results by evaluating a piecewise-constant function"},{"type":"text","text":" "},{"type":"text","text":"defined by pairs of input and output values (“stops”). Compared to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_stepwithminimum-stops-code"},{"type":"text","text":" custom"},{"text":" ","type":"text"},{"text":"function, the input expression (that function’s target) is instead passed in as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the first argument to this function."}]},{"text":"mgl_join:","anchor":"mgljoin","level":3,"type":"heading"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_join:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_join({'Old', 'MacDonald'})","type":"codeVoice"}]},{"inlineContent":[{"text":"Returns the result of concatenating together all the elements of an array in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"order. Compared to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"#code-stringbyappendingstring-code","type":"reference"},{"text":" custom","type":"text"},{"type":"text","text":" "},{"text":"function, this function takes only one argument, which is an aggregate","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expression containing the strings to concatenate."}],"type":"paragraph"},{"type":"heading","level":3,"text":"mgl_acos:","anchor":"mglacos"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_acos:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_acos(1)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the arccosine of the number."}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"anchor":"mglasin","level":3,"text":"mgl_asin:","type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_asin:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_asin(0)"}]},{"inlineContent":[{"text":"Returns the arcsine of the number.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"mglatan","text":"mgl_atan:"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_atan:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_atan(20)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the arctangent of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","level":3,"text":"mgl_cos:","anchor":"mglcos"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_cos:"}]},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_cos(0)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the cosine of the number.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"text":"mgl_log2:","anchor":"mgllog2","type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_log2:"}]},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_log2(1024)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the base-2 logarithm of the number."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","text":"mgl_round:","level":3,"anchor":"mglround"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_round:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_round(1.5)"}]},{"inlineContent":[{"text":"Returns the number rounded to the nearest integer. If the number is halfway","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"between two integers, this function rounds it away from zero."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mglsin","type":"heading","level":3,"text":"mgl_sin:"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_sin:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin(0)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the sine of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mgltan","text":"mgl_tan:","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_tan(0)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the tangent of the number."}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"anchor":"mgldistanceFrom","level":3,"type":"heading","text":"mgl_distanceFrom:"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_distanceFrom:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_distanceFrom(%@)","type":"codeVoice"},{"text":" with an ","type":"text"},{"code":"MLNShape","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the straight-line distance from the evaluated object to the given shape."}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"level":3,"anchor":"mglcoalesce","type":"heading","text":"mgl_coalesce:"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_coalesce:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_coalesce({x, y, z})"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the first non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" value from an array of expressions.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"anchor":"mglattributed","text":"mgl_attributed:","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_attributed:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_attributed({x, y, z})"}],"type":"paragraph"},{"inlineContent":[{"text":"Concatenates and returns the array of ","type":"text"},{"type":"codeVoice","code":"MLNAttributedExpression"},{"type":"text","text":" objects, for use"},{"text":" ","type":"text"},{"type":"text","text":"with the "},{"type":"codeVoice","code":"MLNSymbolStyleLayer.text"},{"text":" property.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"code":"MLNAttributedExpression.attributes","type":"codeVoice"},{"text":" valid attributes.","type":"text"}]},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Key"}]}],[{"type":"paragraph","inlineContent":[{"text":"Value Type","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"MLNFontNamesAttribute","type":"codeVoice"}]}],[{"inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" evaluating to an "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" array."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"MLNFontScaleAttribute"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"code":"NSNumber","type":"codeVoice"},{"text":" value.","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"MLNFontColorAttribute","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"type":"codeVoice","code":"UIColor"},{"text":" (iOS) or ","type":"text"},{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)."}]}]]],"header":"row","type":"table"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"type":"heading","text":"MLN_LET","anchor":"MLNLET"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_LET:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" Any number of variable names interspersed with their assigned"},{"type":"text","text":" "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" values, followed by an "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" "},{"text":"that may contain references to those variables.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of evaluating an expression with the given variable values."},{"type":"text","text":" "},{"text":"Compared to the","type":"text"},{"type":"text","text":" "},{"identifier":"#code-mgl_expressionwithcontext-code","isActive":true,"type":"reference"},{"type":"text","text":" custom"},{"type":"text","text":" "},{"text":"function, this function takes the variable names and values inline before the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expression that contains references to those variables."}]},{"anchor":"MLNMATCH","text":"MLN_MATCH","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_MATCH:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" An input expression, then any number of argument pairs, followed by a default"},{"type":"text","text":" "},{"text":"expression. Each argument pair consists of a constant value followed by an","type":"text"},{"text":" ","type":"text"},{"text":"expression to produce as a result of matching that constant value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If the input value is an aggregate expression, then any of the constant values within"},{"text":" ","type":"text"},{"type":"text","text":"that aggregate expression result in the following argument. This is shorthand for"},{"type":"text","text":" "},{"text":"specifying an argument pair for each of the constant values within that aggregate","type":"text"},{"text":" ","type":"text"},{"text":"expression. It is not possible to match the aggregate expression itself.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the result of matching the input expression against the given constant"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]","type":"codeVoice"},{"type":"text","text":" "},{"text":"method and the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","level":3,"text":"MLN_IF","anchor":"MLNIF"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_IF:","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" Alternating ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"text":" conditionals and resulting expressions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"followed by a default expression."}]},{"inlineContent":[{"text":"Returns the first expression that meets the condition; otherwise, the default","type":"text"},{"type":"text","text":" "},{"text":"value. Unlike","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"TERNARY()","type":"codeVoice"},{"type":"text","text":" syntax, this function can accept multiple “if else” conditions"},{"text":" ","type":"text"},{"type":"text","text":"and is supported on iOS 8."},{"type":"emphasis","inlineContent":[{"text":"x","type":"text"}]},{"text":" and macOS 10.10.","type":"text"},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"type":"text","text":"; however, each conditional"},{"type":"text","text":" "},{"text":"passed into this function must be wrapped in a constant expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"anchor":"MLNFUNCTION","type":"heading","level":3,"text":"MLN_FUNCTION"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"MLN_FUNCTION:","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_FUNCTION('typeof', mystery)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" Any arguments required by the expression operator."}]},{"inlineContent":[{"type":"text","text":"An expression exactly as defined by the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Custom functions","anchor":"Custom-functions","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"The following custom functions are also available with the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:selectorName:arguments:]"},{"type":"text","text":" method or the"},{"type":"text","text":" "},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" format string syntax."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Some of these functions are defined as methods on their respective target"},{"type":"text","text":" "},{"text":"classes, but you should not call them directly outside the context of an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression, because the result may differ from the evaluated expression’s result"},{"text":" ","type":"text"},{"text":"or may result in undefined behavior.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The MapLibre Style Spec defines some operators for which no custom"},{"text":" ","type":"text"},{"text":"function is available. To use these operators in an ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":", call the","type":"text"},{"type":"text","text":" "},{"identifier":"#code-mgl_function-code","isActive":true,"type":"reference"},{"type":"text","text":" function with the same arguments"},{"text":" ","type":"text"},{"type":"text","text":"that the operator expects."}]},{"anchor":"boolValue","level":3,"type":"heading","text":"boolValue"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"boolValue","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(1, 'boolValue')"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a number or string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" None.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Boolean representation of the target: "},{"code":"FALSE","type":"codeVoice"},{"text":" when then input is an","type":"text"},{"type":"text","text":" "},{"text":"empty string, 0, ","type":"text"},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"NaN"},{"type":"text","text":", otherwise "},{"code":"TRUE","type":"codeVoice"},{"type":"text","text":"."}]},{"anchor":"mglhas","text":"mgl_has:","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_has:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" "},{"type":"text","text":"or the evaluated object ("},{"type":"codeVoice","code":"SELF"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to an "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"representing the key to look up in the dictionary or the feature attribute to"},{"text":" ","type":"text"},{"text":"look up in the evaluated object (see ","type":"text"},{"code":"MLNFeature.attributes","type":"codeVoice"},{"text":").","type":"text"}]},{"inlineContent":[{"code":"true","type":"codeVoice"},{"type":"text","text":" if the dictionary has a value for the key or if the evaluated"},{"type":"text","text":" "},{"type":"text","text":"object has a value for the feature attribute."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"identifier":"#code-mgl_does-have-code","isActive":true,"type":"reference"},{"type":"text","text":" function, which is used on its own"},{"type":"text","text":" "},{"type":"text","text":"without the "},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator. You can also check whether an object has an","type":"text"},{"type":"text","text":" "},{"text":"attribute by comparing the key path to ","type":"text"},{"code":"NIL","type":"codeVoice"},{"text":", for example ","type":"text"},{"code":"cheeseburger != NIL","type":"codeVoice"},{"type":"text","text":" "},{"text":"or ","type":"text"},{"type":"codeVoice","code":"burger.cheese != NIL"}],"type":"paragraph"},{"level":3,"type":"heading","text":"mgl_expressionWithContext:","anchor":"mglexpressionWithContext"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_expressionWithContext:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)"},{"text":" with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a dictionary containing "},{"code":"ios","type":"codeVoice"},{"type":"text","text":" and "},{"code":"macos","type":"codeVoice"},{"type":"text","text":" keys"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" that may contain references to the variables","type":"text"},{"type":"text","text":" "},{"text":"defined in the context dictionary.","type":"text"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" An "},{"code":"NSDictionary","type":"codeVoice"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"NSString"},{"text":"s as keys and","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSExpression"},{"text":"s as values. Each key is a variable name and each","type":"text"},{"type":"text","text":" "},{"text":"value is the variable’s value within the target expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The target expression with variable subexpressions replaced with the values"},{"type":"text","text":" "},{"text":"defined in the context dictionary.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"isActive":true,"identifier":"#code-mgl_let-code","type":"reference"},{"type":"text","text":" function, which is used on its own without the"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}]},{"anchor":"mglinterpolateWithCurveTypeparametersstops","level":3,"text":"mgl_interpolateWithCurveType:parameters:stops:","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)","type":"codeVoice"},{"type":"text","text":" "},{"text":"with a dictionary containing zoom levels or other constant values as keys","type":"text"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a number and contains a","type":"text"},{"type":"text","text":" "},{"text":"variable or key path expression.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" The first argument is one of the following strings denoting curve types:"},{"type":"text","text":" "},{"type":"codeVoice","code":"linear"},{"type":"text","text":", "},{"type":"codeVoice","code":"exponential"},{"type":"text","text":", or "},{"type":"codeVoice","code":"cubic-bezier"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"The second argument is an expression providing parameters for the curve:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"linear"},{"type":"text","text":", the argument is "},{"code":"NIL","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the curve type is ","type":"text"},{"code":"exponential","type":"codeVoice"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"type":"text","text":"expression that evaluates to a number, specifying the base of the"},{"text":" ","type":"text"},{"text":"exponential interpolation.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the curve type is "},{"code":"cubic-bezier","type":"codeVoice"},{"text":", the argument is an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"array or aggregate expression containing four expressions, each"},{"text":" ","type":"text"},{"type":"text","text":"evaluating to a number. The four numbers are control points for the"},{"text":" ","type":"text"},{"text":"cubic Bézier curve.","type":"text"}]}]}]},{"inlineContent":[{"text":"The third argument is an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" object representing the","type":"text"},{"type":"text","text":" "},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"text":" ","type":"text"},{"text":"values.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A value interpolated along the continuous mathematical function defined by the"},{"type":"text","text":" "},{"type":"text","text":"arguments, with the target as the input to the function."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"type":"text","text":" "},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"type":"text","text":" "},{"type":"text","text":"values may be constant values or "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" objects. For example, you can"},{"text":" ","type":"text"},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"yellow, orange, and red as the values."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code"},{"type":"text","text":" "},{"type":"text","text":"function, which is used on its own without the "},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"mglnumberWithFallbackValues","type":"heading","text":"mgl_numberWithFallbackValues:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"doubleValue"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"floatValue"},{"type":"text","text":", or"},{"type":"text","text":" "},{"type":"codeVoice","code":"decimalValue"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"text":" ","type":"text"},{"type":"text","text":"string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" Zero or more ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"type":"text","text":" "},{"type":"text","text":"or string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A numeric representation of the target:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"text":", the result is 0.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a string, it is converted to a number as specified by the","type":"text"}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"floatValue"},{"text":", or","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"decimalValue"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" "},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"text":" ","type":"text"},{"text":"string.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" "},{"type":"text","text":"Zero or more "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"text":" ","type":"text"},{"type":"text","text":"or string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A numeric representation of the target:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}]}]},{"content":[{"inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"},{"text":" ","type":"text"},{"type":"text","text":"“"},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","isActive":true},{"text":"”","type":"text"},{"type":"text","text":" "},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If multiple values are provided, each one is evaluated in order until the"},{"text":" ","type":"text"},{"type":"text","text":"first successful conversion is obtained."}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. You can also cast a value to a","type":"text"},{"type":"text","text":" "},{"text":"number by passing the value and the string ","type":"text"},{"type":"codeVoice","code":"NSNumber"},{"text":" into the ","type":"text"},{"code":"CAST()","type":"codeVoice"},{"type":"text","text":" "},{"text":"operator.","type":"text"}]},{"type":"heading","text":"mgl_stepWithMinimum:stops:","level":3,"anchor":"mglstepWithMinimumstops"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)","type":"codeVoice"},{"text":" with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a dictionary with zoom levels or other constant values as keys"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a number and contains a","type":"text"},{"type":"text","text":" "},{"text":"variable or key path expression.","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" ","type":"text"},{"text":"The first argument is an expression that evaluates to a number, specifying","type":"text"},{"text":" ","type":"text"},{"text":"the minimum value in case the target is less than any of the stops in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"second argument."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second argument is an "},{"code":"NSDictionary","type":"codeVoice"},{"text":" object representing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"text":" ","type":"text"},{"text":"values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The output value of the stop whose key is just less than the evaluated target,"},{"text":" ","type":"text"},{"type":"text","text":"or the minimum value if the target is less than the least of the stops’ keys."}]},{"type":"paragraph","inlineContent":[{"text":"The input expression is matched against the keys in the stop dictionary. The","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"text":" ","type":"text"},{"text":"values may be constant values or ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" objects. For example, you can"},{"text":" ","type":"text"},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"type":"text","text":" "},{"text":"yellow, orange, and red as the values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"stringByAppendingString:","level":3,"anchor":"stringByAppendingString","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"stringByAppendingString:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a string."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"One or more "},{"code":"NSExpression","type":"codeVoice"},{"text":"s, each evaluating to a string.","type":"text"}]},{"inlineContent":[{"text":"The target string with each of the argument strings appended in order.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"method and is similar to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"#code-mgl_join-code"},{"text":" function, which concatenates multiple","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expressions and is used on its own without the "},{"type":"codeVoice","code":"FUNCTION()"},{"text":" operator.","type":"text"}]},{"level":3,"anchor":"stringValue","text":"stringValue","type":"heading"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"stringValue"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(ele, 'stringValue')"}]},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"type":"text","text":" "},{"text":"string.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" "},{"text":"None.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A string representation of the target:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is ","type":"text"},{"text":"NIL","type":"text"},{"text":", the result is the empty string.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a Boolean value, the result is the string "},{"code":"true","type":"codeVoice"},{"type":"text","text":" or "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"If the target is a number, it is converted to a string as specified by the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"“"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","type":"reference","isActive":true},{"text":"”","type":"text"},{"type":"text","text":" "},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a color, it is converted to a string of the form"},{"type":"text","text":" "},{"code":"rgba(r,g,b,a)","type":"codeVoice"},{"type":"text","text":", where "},{"text":"r","type":"text"},{"text":", ","type":"text"},{"type":"text","text":"g"},{"type":"text","text":", and "},{"type":"text","text":"b"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"text","text":"numerals ranging from 0 to 255 and "},{"text":"a","type":"text"},{"type":"text","text":" ranges from 0 to 1."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Otherwise, the target is converted to a string in the format specified by the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","isActive":true},{"type":"text","text":" "},{"type":"text","text":"function of the ECMAScript Language Specification."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. You can also cast a value to a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string by passing the value and the string "},{"code":"NSString","type":"codeVoice"},{"text":" into the ","type":"text"},{"type":"codeVoice","code":"CAST()"},{"text":" ","type":"text"},{"type":"text","text":"operator."}],"type":"paragraph"}],"kind":"content"}],"references":{"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","title":"to-number","type":"link","titleInlineContent":[{"type":"codeVoice","code":"to-number"}]},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","title":"concat","titleInlineContent":[{"type":"codeVoice","code":"concat"}],"type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","title":"step","type":"link","titleInlineContent":[{"type":"codeVoice","code":"step"}]},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","title":"NumberToString","titleInlineContent":[{"text":"NumberToString","type":"text"}],"type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","title":"interpolate","type":"link","titleInlineContent":[{"type":"codeVoice","code":"interpolate"}]},"#code-mgl_stepwithminimum-stops-code":{"url":"#code-mgl_stepwithminimum-stops-code","identifier":"#code-mgl_stepwithminimum-stops-code","title":"mgl_stepWithMinimum:stops:","titleInlineContent":[{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}],"type":"link"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","title":"+[NSExpression expressionForFunction:arguments:] method","type":"link","titleInlineContent":[{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"text":" method","type":"text"}]},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","title":"NSExpression+MLNAdditions.h","titleInlineContent":[{"type":"codeVoice","code":"NSExpression+MLNAdditions.h"}],"type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","title":"log2","type":"link","titleInlineContent":[{"type":"codeVoice","code":"log2"}]},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","title":"case","titleInlineContent":[{"type":"codeVoice","code":"case"}],"type":"link"},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"kind":"symbol","title":"MLNShapeSource","fragments":[{"text":"MLNShapeSource","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","url":"\/documentation\/maplibre\/mlnshapesource","role":"symbol","abstract":[{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true,"type":"reference"},{"type":"text","text":" is a map content source that supplies vector shapes to be"},{"text":" ","type":"text"},{"type":"text","text":"shown on the map. The shapes may be instances of "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","type":"reference","isActive":true},{"type":"text","text":" or "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or they may be defined by local or external"},{"type":"text","text":" "},{"type":"text","text":"GeoJSON"},{"type":"text","text":" code. A shape source is added to an"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true},{"type":"text","text":" object along with an "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true,"type":"reference"},{"type":"text","text":" object. The vector style"},{"text":" ","type":"text"},{"type":"text","text":"layer defines the appearance of any content supplied by the shape source. You"},{"text":" ","type":"text"},{"type":"text","text":"can update a shape source by setting its "},{"code":"shape","type":"codeVoice"},{"type":"text","text":" or "},{"code":"URL","type":"codeVoice"},{"type":"text","text":" property."}]},"#variables":{"url":"#variables","identifier":"#variables","title":"variables","type":"link","titleInlineContent":[{"text":"variables","type":"text"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"role":"article","title":"Tile URL Templates","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates","abstract":[{"text":"Using URL Templates when defining tile sources","type":"text"}],"kind":"article","type":"topic"},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","title":"sin","titleInlineContent":[{"type":"codeVoice","code":"sin"}],"type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","title":"asin","type":"link","titleInlineContent":[{"type":"codeVoice","code":"asin"}]},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","title":"format","titleInlineContent":[{"type":"codeVoice","code":"format"}],"type":"link"},"#code-mgl_does-have-code":{"url":"#code-mgl_does-have-code","identifier":"#code-mgl_does-have-code","title":"mgl_does:have:","type":"link","titleInlineContent":[{"type":"codeVoice","code":"mgl_does:have:"}]},"https://github.com/maplibre/maplibre-native/issues/331":{"url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","title":"#331","titleInlineContent":[{"text":"#331","type":"text"}],"type":"link"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"kind":"article","url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","role":"article","type":"topic","title":"User Interactions","abstract":[{"text":"Learn how to work with gesture recognizers","type":"text"}]},"https://tc39.github.io/ecma262/#sec-json.stringify":{"url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","title":"JSON.stringify()","type":"link","titleInlineContent":[{"type":"codeVoice","code":"JSON.stringify()"}]},"#code-mgl_match-code":{"url":"#code-mgl_match-code","identifier":"#code-mgl_match-code","title":"MLN_MATCH()","titleInlineContent":[{"type":"codeVoice","code":"MLN_MATCH()"}],"type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","title":"atan","type":"link","titleInlineContent":[{"type":"codeVoice","code":"atan"}]},"#using-expressions-to-configure-layout-and-paint-attributes":{"url":"#using-expressions-to-configure-layout-and-paint-attributes","identifier":"#using-expressions-to-configure-layout-and-paint-attributes","title":"inside an expression","titleInlineContent":[{"text":"inside an expression","type":"text"}],"type":"link"},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","title":"mgl_interpolate:withCurveType:parameters:stops:","type":"link","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}]},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","title":"cos","titleInlineContent":[{"type":"codeVoice","code":"cos"}],"type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","title":"to-string","type":"link","titleInlineContent":[{"type":"codeVoice","code":"to-string"}]},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","title":"Predicate Programming Guide","titleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}],"type":"link"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"abstract":[{"type":"text","text":"Using custom fonts"}],"url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts","title":"Customizing Fonts","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","type":"topic","role":"article","kind":"article"},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","title":"tan","type":"link","titleInlineContent":[{"type":"codeVoice","code":"tan"}]},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","title":"ToNumber Applied to the String Type","titleInlineContent":[{"text":"ToNumber Applied to the String Type","type":"text"}],"type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","title":"match","type":"link","titleInlineContent":[{"type":"codeVoice","code":"match"}]},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","title":"mgl_interpolateWithCurveType:parameters:stops:","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"type":"link"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"The color gradient with which the line will be drawn. This property only has an"},{"type":"text","text":" "},{"text":"effect on lines defined by an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource"},{"text":" whose ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource"},{"type":"text","text":" "},{"type":"text","text":"option is set to "},{"code":"YES","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","role":"symbol","title":"lineGradient","fragments":[{"kind":"identifier","text":"lineGradient"}]},"doc://org.swift.MyProject/documentation/MapLibre":{"title":"MapLibre","url":"\/documentation\/maplibre","role":"collection","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","type":"topic","kind":"symbol","abstract":[{"text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling.","type":"text"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"url":"\/documentation\/maplibre\/mlnpolygon","abstract":[{"type":"text","text":"An "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true},{"text":" object represents a closed shape consisting of four or more","type":"text"},{"text":" ","type":"text"},{"text":"vertices, specified as ","type":"text"},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"type":"text","text":" instances, and the edges that"},{"type":"text","text":" "},{"type":"text","text":"connect them. For example, you could use a polygon shape to represent a"},{"text":" ","type":"text"},{"text":"building, a lake, or an area you want to highlight.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","title":"MLNPolygon","role":"symbol","fragments":[{"kind":"identifier","text":"MLNPolygon"}]},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","title":"acos","type":"link","titleInlineContent":[{"type":"codeVoice","code":"acos"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"fragments":[{"text":"MLNPolyline","kind":"identifier"}],"title":"MLNPolyline","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","type":"topic","abstract":[{"type":"text","text":"An "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","type":"reference"},{"type":"text","text":" object represents a shape consisting of two or more vertices,"},{"text":" ","type":"text"},{"type":"text","text":"specified as "},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"type":"text","text":" instances, and the line segments that"},{"type":"text","text":" "},{"type":"text","text":"connect them. For example, you could use an polyline to represent a road or the"},{"text":" ","type":"text"},{"type":"text","text":"path along which something moves."}],"kind":"symbol","role":"symbol","url":"\/documentation\/maplibre\/mlnpolyline"},"#code-mgl_let-code":{"url":"#code-mgl_let-code","identifier":"#code-mgl_let-code","title":"MLN_LET","titleInlineContent":[{"type":"codeVoice","code":"MLN_LET"}],"type":"link"},"#code-mgl_function-code":{"url":"#code-mgl_function-code","identifier":"#code-mgl_function-code","title":"MLN_FUNCTION()","type":"link","titleInlineContent":[{"type":"codeVoice","code":"MLN_FUNCTION()"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"abstract":[],"url":"\/documentation\/maplibre-native-for-ios\/for_style_authors","title":"Information for Style Authors","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors","type":"topic","role":"article","kind":"article"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","title":"has","titleInlineContent":[{"type":"codeVoice","code":"has"}],"type":"link"},"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","title":"kernel density estimation","type":"link","titleInlineContent":[{"text":"kernel density estimation","type":"text"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"kind":"article","url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","role":"article","type":"topic","title":"Info.plist Keys","abstract":[{"text":"MapLibre Native for iOS supports custom ","type":"text"},{"code":"Info.plist","type":"codeVoice"},{"type":"text","text":" keys in your application in order to configure various settings."}]},"#code-mgl_join-code":{"url":"#code-mgl_join-code","identifier":"#code-mgl_join-code","title":"mgl_join:","titleInlineContent":[{"type":"codeVoice","code":"mgl_join:"}],"type":"link"},"#code-stringbyappendingstring-code":{"url":"#code-stringbyappendingstring-code","identifier":"#code-stringbyappendingstring-code","title":"stringByAppendingString:","type":"link","titleInlineContent":[{"type":"codeVoice","code":"stringByAppendingString:"}]},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","title":"round","titleInlineContent":[{"type":"codeVoice","code":"round"}],"type":"link"},"#key-paths":{"url":"#key-paths","identifier":"#key-paths","title":"key paths","type":"link","titleInlineContent":[{"text":"key paths","type":"text"}]},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","title":"distance","titleInlineContent":[{"type":"codeVoice","code":"distance"}],"type":"link"},"#code-mgl_if-code":{"url":"#code-mgl_if-code","identifier":"#code-mgl_if-code","title":"MLN_IF()","type":"link","titleInlineContent":[{"type":"codeVoice","code":"MLN_IF()"}]},"https://maplibre.org/maplibre-style-spec/expressions/":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","title":"MapLibre Style Spec","titleInlineContent":[{"text":"MapLibre Style Spec","type":"text"}],"type":"link"},"#code-mgl_has-code":{"url":"#code-mgl_has-code","identifier":"#code-mgl_has-code","title":"mgl_has:","type":"link","titleInlineContent":[{"type":"codeVoice","code":"mgl_has:"}]},"#MapLibre-specific-functions":{"url":"#MapLibre-specific-functions","identifier":"#MapLibre-specific-functions","title":"MapLibre-specific functions","titleInlineContent":[{"text":"MapLibre-specific functions","type":"text"}],"type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","title":"coalesce","type":"link","titleInlineContent":[{"type":"codeVoice","code":"coalesce"}]},"#code-mgl_expressionwithcontext-code":{"url":"#code-mgl_expressionwithcontext-code","identifier":"#code-mgl_expressionwithcontext-code","title":"mgl_expressionWithContext:","titleInlineContent":[{"type":"codeVoice","code":"mgl_expressionWithContext:"}],"type":"link"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","title":"functions predefined","type":"link","titleInlineContent":[{"text":"functions predefined","type":"text"}]},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","title":"let","titleInlineContent":[{"type":"codeVoice","code":"let"}],"type":"link"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"kind":"article","url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","role":"article","type":"topic","title":"Adding Multiple Images","abstract":[{"text":"Adding images to the map and assigning them to POI types","type":"text"}]}}}