{"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions","interfaceLanguage":"occ"},"schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"]}],"kind":"article","abstract":[{"text":"Using ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"text":" with MapLibre iOS","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"text":"Style layers use predicates and expressions to determine what to display and how","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to format it. "},{"inlineContent":[{"type":"text","text":"Predicates"}],"type":"emphasis"},{"type":"text","text":" are represented by the same "},{"code":"NSPredicate","type":"codeVoice"},{"text":" class that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"filters results from Core Data or items in an "},{"type":"codeVoice","code":"NSArray"},{"type":"text","text":" in Objective-C."},{"text":" ","type":"text"},{"text":"Predicates are based on ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"expressions"}]},{"text":", represented by the ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" class."},{"type":"text","text":" "},{"type":"text","text":"Somewhat unusually, style layers also use expressions on their own."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This document discusses the specific subset of the predicate and expression"},{"text":" ","type":"text"},{"text":"syntax supported by this SDK. For a more general introduction to predicates and","type":"text"},{"type":"text","text":" "},{"text":"expressions, consult the","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"in Apple developer documentation. For additional detail on how this SDK has","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"extended the "},{"code":"NSExpression","type":"codeVoice"},{"text":" class, see the ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","type":"reference"},{"text":" header.","type":"text"}],"type":"paragraph"},{"anchor":"Using-predicates-to-filter-vector-data","type":"heading","text":"Using predicates to filter vector data","level":2},{"inlineContent":[{"type":"text","text":"Most style layer classes display "},{"type":"codeVoice","code":"MLNFeature"},{"text":" objects that you can show or hide","type":"text"},{"text":" ","type":"text"},{"text":"based on the feature’s attributes. Use the ","type":"text"},{"code":"MLNVectorStyleLayer.predicate","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"property to include only the features in the source layer that satisfy a"},{"text":" ","type":"text"},{"type":"text","text":"condition that you define."}],"type":"paragraph"},{"type":"heading","text":"Operators","level":3,"anchor":"Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following comparison operators are supported:"}]},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key = value"},{"code":"key == value","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"NSGreaterThanOrEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key >= value"},{"type":"codeVoice","code":"key => value"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSLessThanOrEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"key <= value"},{"type":"codeVoice","code":"key =< value"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSGreaterThanPredicateOperatorType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"key > value"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSLessThanPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"key < value"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNotEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"key != value","type":"codeVoice"},{"code":"key <> value","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"NSBetweenPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"key BETWEEN { 32, 212 }","type":"codeVoice"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To test whether a feature has or lacks a specific attribute, compare the"},{"text":" ","type":"text"},{"text":"attribute to ","type":"text"},{"type":"codeVoice","code":"NULL"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":". Predicates created using the"},{"text":" ","type":"text"},{"code":"+[NSPredicate predicateWithValue:]","type":"codeVoice"},{"text":" method are also supported. String","type":"text"},{"type":"text","text":" "},{"type":"text","text":"operators and custom operators are not supported."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following compound operators are supported:"}]},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSCompoundPredicateType"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"inlineContent":[{"code":"NSAndPredicateType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"predicate1 AND predicate2","type":"codeVoice"},{"type":"codeVoice","code":"predicate1 && predicate2"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSOrPredicateType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"predicate1 OR predicate2"},{"type":"text","text":"predicate1 || predicate2"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotPredicateType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NOT predicate"},{"type":"codeVoice","code":"!predicate"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following aggregate operators are supported:"}]},{"rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSInPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSContainsPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key","type":"codeVoice"}]}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the "},{"code":"IN","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CONTAINS"},{"text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature (","type":"text"},{"type":"codeVoice","code":"SELF"},{"text":") lies within a given ","type":"text"},{"code":"MLNShape","type":"codeVoice"},{"type":"text","text":" or "},{"code":"MLNFeature","type":"codeVoice"},{"type":"text","text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:"}]},{"type":"codeListing","code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"],"syntax":"objc"},{"code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following combinations of comparison operators and modifiers are supported:"}]},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateModifier"}]}],[{"inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSAllPredicateModifier","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ALL haystack != needle"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSAnyPredicateModifier"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"ANY haystack = needle","type":"codeVoice"},{"type":"codeVoice","code":"SOME haystack = needle"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following comparison predicate options are supported for comparison and"},{"type":"text","text":" "},{"text":"aggregate operators that are used in the predicate:","type":"text"}]},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateOptions"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSCaseInsensitivePredicateOption","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"'QUEBEC' =[c] 'Quebec'"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSDiacriticInsensitivePredicateOption"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"'Québec' =[d] 'Quebec'"}],"type":"paragraph"}]]],"type":"table","header":"row"},{"inlineContent":[{"type":"text","text":"Other comparison predicate options are unsupported, namely "},{"code":"l","type":"codeVoice"},{"type":"text","text":" "},{"text":"(for locale sensitivity) and ","type":"text"},{"type":"codeVoice","code":"n"},{"type":"text","text":" (for normalization). A comparison is"},{"type":"text","text":" "},{"type":"text","text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison"},{"text":" ","type":"text"},{"text":"predicate options are not supported in conjunction with comparison modifiers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"like "},{"type":"codeVoice","code":"ALL"},{"text":" and ","type":"text"},{"code":"ANY","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Operands","anchor":"Operands","type":"heading","level":3},{"inlineContent":[{"text":"Operands in predicates can be ","type":"text"},{"type":"reference","identifier":"#variables","isActive":true},{"type":"text","text":", "},{"identifier":"#key-paths","isActive":true,"type":"reference"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"or almost anything else that can appear"},{"text":" ","type":"text"},{"type":"reference","identifier":"#using-expressions-to-configure-layout-and-paint-attributes","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Automatic type casting is not performed. Therefore, a feature only matches a"},{"text":" ","type":"text"},{"text":"predicate if its value for the attribute in question is of the same type as the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value specified in the predicate. Use the "},{"code":"CAST()","type":"codeVoice"},{"text":" operator to convert a key","type":"text"},{"type":"text","text":" "},{"type":"text","text":"path or variable into a matching type:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast a value to a number, use ","type":"text"},{"type":"codeVoice","code":"CAST(key, 'NSNumber')"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast a value to a string, use "},{"type":"codeVoice","code":"CAST(key, 'NSString')"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast a value to a color, use ","type":"text"},{"type":"codeVoice","code":"CAST(key, 'UIColor')"},{"text":" on iOS and ","type":"text"},{"type":"codeVoice","code":"CAST(key, 'NSColor')"},{"text":" on macOS.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast an "},{"code":"NSColor","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" object to an array, use "},{"code":"CAST(noindex(color), 'NSArray')","type":"codeVoice"},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"For details about the predicate format string syntax, consult the “Predicate"},{"text":" ","type":"text"},{"type":"text","text":"Format String Syntax” chapter of the"},{"type":"text","text":" "},{"inlineContent":[{"overridingTitle":"Predicate Programming Guide","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}],"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"in Apple developer documentation."}],"type":"paragraph"},{"type":"heading","text":"Using expressions to configure layout and paint attributes","anchor":"Using-expressions-to-configure-layout-and-paint-attributes","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"An expression can contain subexpressions of various types. Each of the supported"},{"type":"text","text":" "},{"text":"types of expressions is discussed below.","type":"text"}]},{"text":"Constant values","type":"heading","anchor":"Constant-values","level":3},{"inlineContent":[{"type":"text","text":"A constant value can be of any of the following types:"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"In Objective-C","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"In Swift"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"text":" (iOS)","type":"text"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSColor"},{"text":" (macOS)","type":"text"},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" (iOS)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSString"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSString"}],"type":"paragraph"}],[{"inlineContent":[{"code":"String","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"NSNumber.doubleValue","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"NSNumber.doubleValue","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSArray<NSNumber>"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"[Float]"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSArray<NSString>","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"[String]","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSValue.CGVectorValue","type":"codeVoice"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue"},{"type":"text","text":" containing "},{"type":"codeVoice","code":"CGVector"},{"type":"text","text":" (macOS)"}]}],[{"inlineContent":[{"code":"NSValue.cgVectorValue","type":"codeVoice"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue"},{"text":" containing ","type":"text"},{"type":"codeVoice","code":"CGVector"},{"text":" (macOS)","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSValue.UIEdgeInsetsValue"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"text":" (macOS)","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.uiEdgeInsetsValue"},{"text":" (iOS)","type":"text"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"text":" (macOS)","type":"text"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For literal floating-point values, use "},{"code":"-[NSNumber numberWithDouble:]","type":"codeVoice"},{"text":" instead","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"codeVoice","code":"-[NSNumber numberWithFloat:]"},{"type":"text","text":" to avoid precision issues."}]},{"anchor":"Key-paths","text":"Key paths","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A key path expression refers to an attribute of the "},{"type":"codeVoice","code":"MLNFeature"},{"type":"text","text":" object being"},{"type":"text","text":" "},{"type":"text","text":"evaluated for display. For example, if a polygon’s "},{"code":"MLNFeature.attributes","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"dictionary contains the "},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" key, then the key path "},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" refers"},{"text":" ","type":"text"},{"text":"to the value of the ","type":"text"},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" attribute when evaluating that particular"},{"type":"text","text":" "},{"type":"text","text":"polygon."}]},{"type":"paragraph","inlineContent":[{"text":"The following special attributes are also available on features that are produced","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as a result of clustering multiple point features together in a shape source:"}]},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Attribute","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Meaning"}]}]],[[{"inlineContent":[{"type":"text","text":"cluster"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Bool","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"cluster_id"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"inlineContent":[{"text":"Identifier for the point cluster.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"point_count"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of point features in a given cluster."}]}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some characters may not be used directly as part of a key path in a format"},{"type":"text","text":" "},{"text":"string. For example, if a feature’s attribute is named ","type":"text"},{"type":"codeVoice","code":"ISO 3166-1:2006"},{"type":"text","text":", an"},{"type":"text","text":" "},{"text":"expression format string of ","type":"text"},{"type":"codeVoice","code":"lowercase(ISO 3166-1:2006)"},{"type":"text","text":" or a predicate format"},{"text":" ","type":"text"},{"text":"string of ","type":"text"},{"type":"codeVoice","code":"ISO 3166-1:2006 == 'US-OH'"},{"type":"text","text":" would raise an exception. Instead, use a"},{"type":"text","text":" "},{"type":"codeVoice","code":"%K"},{"text":" placeholder or the ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForKeyPath:]"},{"type":"text","text":" initializer:"}]},{"type":"codeListing","syntax":"objc","code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"]},{"syntax":"swift","type":"codeListing","code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"]},{"anchor":"Functions","level":3,"text":"Functions","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Of the","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},{"text":" ","type":"text"},{"type":"text","text":"by the"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","isActive":true,"type":"reference"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"the following subset is supported in layer attribute values:","type":"text"}]},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializer parameter"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"average:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"average({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"sum:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"sum({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"count:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"count({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"min:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"min({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"max:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"max({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"add:to:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 + 2"}]}]],[[{"inlineContent":[{"code":"from:subtract:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"2 - 1"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"multiply:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 * 2"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"divide:by:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"1 \/ 2"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:(1, 2)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"sqrt:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt(2)"}]}]],[[{"inlineContent":[{"code":"log:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"log(10)"}]}]],[[{"inlineContent":[{"code":"ln:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"ln(2)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"raise:toPower:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"2 ** 2"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"exp:"}]}],[{"inlineContent":[{"code":"exp(0)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"ceiling:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ceiling(0.99999)"}]}]],[[{"inlineContent":[{"code":"abs:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"abs(-1)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"trunc:"}]}],[{"type":"paragraph","inlineContent":[{"code":"trunc(6378.1370)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"floor:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"floor(-0.99999)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"uppercase:"}]}],[{"inlineContent":[{"code":"uppercase('Elysian Fields')","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"lowercase:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"lowercase('DOWNTOWN')","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"noindex:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"noindex(0 + 2 + c)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"length:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"length('Wapakoneta')"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"castObject:toType:"}]}],[{"inlineContent":[{"code":"CAST(ele, 'NSString')","type":"codeVoice"},{"code":"CAST(ele, 'NSNumber')","type":"codeVoice"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A number of "},{"identifier":"#MapLibre-specific-functions","type":"reference","isActive":true},{"type":"text","text":" are also"},{"type":"text","text":" "},{"text":"available.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following predefined functions are "},{"inlineContent":[{"text":"not","type":"text"}],"type":"strong"},{"text":" supported:","type":"text"}]},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"Initializer parameter"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"median:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"median({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"mode:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"mode({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"stddev:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"stddev({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"random","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"random()"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"randomn:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"randomn(10)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"now"}],"type":"paragraph"}],[{"inlineContent":[{"code":"now()","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"bitwiseAnd:with:(5, 3)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"bitwiseOr:with:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"bitwiseOr:with:(5, 3)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:"}]}],[{"type":"paragraph","inlineContent":[{"code":"bitwiseXor:with:(5, 3)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"leftshift:by:"}]}],[{"inlineContent":[{"code":"leftshift:by:(23, 1)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"rightshift:by:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"rightshift:by:(23, 1)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"onesComplement:"}]}],[{"inlineContent":[{"code":"onesComplement(255)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"distanceToLocation:fromLocation:(there, here)","type":"codeVoice"}],"type":"paragraph"}]]]},{"level":3,"type":"heading","anchor":"Conditionals","text":"Conditionals"},{"type":"paragraph","inlineContent":[{"text":"Conditionals are supported via the built-in","type":"text"},{"text":" ","type":"text"},{"code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method and "},{"type":"codeVoice","code":"TERNARY()"},{"type":"text","text":" operator. If you need to express multiple cases"},{"type":"text","text":" "},{"type":"text","text":"(“else-if”), you can either nest a conditional within a conditional or use the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_if-code"},{"type":"text","text":" or "},{"type":"reference","identifier":"#code-mgl_match-code","isActive":true},{"text":" function.","type":"text"}]},{"text":"Aggregates","anchor":"Aggregates","level":3,"type":"heading"},{"inlineContent":[{"text":"Aggregate expressions can contain arrays of expressions. In some cases, it is","type":"text"},{"type":"text","text":" "},{"text":"possible to use the array itself instead of wrapping the array in an aggregate","type":"text"},{"type":"text","text":" "},{"text":"expression.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"Variables","anchor":"Variables"},{"inlineContent":[{"type":"text","text":"The following variables are defined by this SDK for use with style layers:"}],"type":"paragraph"},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Variable"}]}],[{"inlineContent":[{"text":"Type","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Meaning"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$featureIdentifier"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Any GeoJSON data type"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the "},{"code":"NSExpression.featureIdentifierVariableExpression","type":"codeVoice"},{"type":"text","text":" property."}]}]],[[{"type":"paragraph","inlineContent":[{"code":"$geometryType","type":"codeVoice"}]}],[{"inlineContent":[{"text":"String","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:"},{"text":"*   ","type":"text"},{"type":"codeVoice","code":"Point"},{"type":"text","text":" for point features, corresponding to the "},{"type":"codeVoice","code":"MLNPointAnnotation"},{"text":" class","type":"text"},{"type":"text","text":"*   "},{"code":"LineString","type":"codeVoice"},{"type":"text","text":" for polyline features, corresponding to the "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true,"type":"reference"},{"type":"text","text":" class"},{"text":"*   ","type":"text"},{"type":"codeVoice","code":"Polygon"},{"type":"text","text":" for polygon features, corresponding to the "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true},{"text":" class","type":"text"},{"text":"This variable corresponds to the ","type":"text"},{"code":"NSExpression.geometryTypeVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$heatmapDensity"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},{"type":"text","text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the "},{"code":"heatmapColor","type":"codeVoice"},{"text":" property. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.heatmapDensityVariableExpression"},{"type":"text","text":" property."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$zoomLevel"}]}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the "},{"code":"NSExpression.zoomLevelVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}]}]],[[{"inlineContent":[{"code":"$lineProgress","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","type":"reference","isActive":true},{"text":" property. It corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.lineProgressVariableExpression"},{"text":" property.","type":"text"}]}]]],"header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to these variables, you can define your own variables and refer to"},{"type":"text","text":" "},{"text":"them elsewhere in the expression. The syntax for defining a variable makes use","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of a "},{"isActive":true,"overridingTitleInlineContent":[{"text":"MapLibre-specific function","type":"text"}],"overridingTitle":"MapLibre-specific function","identifier":"#MapLibre-specific-functions","type":"reference"},{"text":" that takes an","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" as an argument:","type":"text"}]},{"syntax":"objc","code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"],"type":"codeListing"},{"type":"codeListing","syntax":"swift","code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"]},{"level":2,"text":"MapLibre-specific functions","anchor":"MapLibre-specific-functions","type":"heading"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Due to a change in iOS 15.5, some of these stopped working. See ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","isActive":true},{"type":"text","text":" for more information and workarounds."}]}],"name":"Warning","type":"aside","style":"warning"},{"inlineContent":[{"text":"For compatibility with the MapLibre Style Spec, the following functions","type":"text"},{"type":"text","text":" "},{"text":"are defined by this SDK. When setting a style layer property, you can call these","type":"text"},{"type":"text","text":" "},{"text":"functions just like the predefined functions above, using either the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"text":" method or a convenient format","type":"text"},{"type":"text","text":" "},{"text":"string syntax:","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"mgldoeshave","text":"mgl_does:have:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_does:have:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_does:have:(SELF, '🧀🍔')","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"mgl_does:have:(%@, '🧀🍔')"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns a Boolean value indicating whether the dictionary has a value for the"},{"type":"text","text":" "},{"type":"text","text":"key or whether the evaluated object ("},{"code":"SELF","type":"codeVoice"},{"type":"text","text":") has a value for the feature"},{"type":"text","text":" "},{"text":"attribute. Compared to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"#code-mgl_has-code"},{"text":" custom function,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that function’s target is instead passed in as the first argument to this"},{"type":"text","text":" "},{"type":"text","text":"function. Both functions are equivalent to the syntax "},{"code":"key != NIL","type":"codeVoice"},{"text":" or","type":"text"},{"text":" ","type":"text"},{"code":"%@[key] != NIL","type":"codeVoice"},{"type":"text","text":" but can be used outside of a predicate."}]},{"level":3,"type":"heading","anchor":"mglinterpolatewithCurveTypeparametersstops","text":"mgl_interpolate:withCurveType:parameters:stops:"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Produces continuous, smooth results by interpolating between pairs of input and"},{"type":"text","text":" "},{"text":"output values (“stops”). Compared to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","isActive":true},{"type":"text","text":" "},{"type":"text","text":"custom function, the input expression (that function’s target) is instead passed"},{"text":" ","type":"text"},{"text":"in as the first argument to this function.","type":"text"}],"type":"paragraph"},{"text":"mgl_step:from:stops:","level":3,"anchor":"mglstepfromstops","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_step:from:stops:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_step:from:stops:(x, 11, %@)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Produces discrete, stepped results by evaluating a piecewise-constant function"},{"type":"text","text":" "},{"text":"defined by pairs of input and output values (“stops”). Compared to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"#code-mgl_stepwithminimum-stops-code","type":"reference"},{"text":" custom","type":"text"},{"text":" ","type":"text"},{"text":"function, the input expression (that function’s target) is instead passed in as","type":"text"},{"type":"text","text":" "},{"text":"the first argument to this function.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"mgl_join:","anchor":"mgljoin","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_join:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_join({'Old', 'MacDonald'})","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of concatenating together all the elements of an array in"},{"type":"text","text":" "},{"type":"text","text":"order. Compared to the"},{"type":"text","text":" "},{"identifier":"#code-stringbyappendingstring-code","type":"reference","isActive":true},{"type":"text","text":" custom"},{"text":" ","type":"text"},{"type":"text","text":"function, this function takes only one argument, which is an aggregate"},{"type":"text","text":" "},{"type":"text","text":"expression containing the strings to concatenate."}]},{"text":"mgl_acos:","level":3,"type":"heading","anchor":"mglacos"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_acos:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_acos(1)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the arccosine of the number.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"mgl_asin:","level":3,"anchor":"mglasin"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_asin:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_asin(0)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the arcsine of the number.","type":"text"}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"anchor":"mglatan","text":"mgl_atan:","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_atan:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_atan(20)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the arctangent of the number.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"mglcos","type":"heading","text":"mgl_cos:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_cos:"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_cos(0)"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the cosine of the number.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mgllog2","type":"heading","text":"mgl_log2:","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_log2:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_log2(1024)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the base-2 logarithm of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"anchor":"mglround","text":"mgl_round:","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_round:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_round(1.5)"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the number rounded to the nearest integer. If the number is halfway","type":"text"},{"type":"text","text":" "},{"text":"between two integers, this function rounds it away from zero.","type":"text"}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_sin:","type":"heading","level":3,"anchor":"mglsin"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin(0)"}]},{"inlineContent":[{"type":"text","text":"Returns the sine of the number."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"text":"mgl_tan:","level":3,"anchor":"mgltan","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_tan:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan(0)"}]},{"inlineContent":[{"type":"text","text":"Returns the tangent of the number."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"mgldistanceFrom","text":"mgl_distanceFrom:","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_distanceFrom:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_distanceFrom(%@)"},{"type":"text","text":" with an "},{"type":"codeVoice","code":"MLNShape"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the straight-line distance from the evaluated object to the given shape.","type":"text"}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"level":3,"text":"mgl_coalesce:","anchor":"mglcoalesce","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_coalesce:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_coalesce({x, y, z})","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the first non-"},{"code":"nil","type":"codeVoice"},{"text":" value from an array of expressions.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mglattributed","type":"heading","level":3,"text":"mgl_attributed:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_attributed:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_attributed({x, y, z})"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Concatenates and returns the array of "},{"code":"MLNAttributedExpression","type":"codeVoice"},{"text":" objects, for use","type":"text"},{"type":"text","text":" "},{"text":"with the ","type":"text"},{"code":"MLNSymbolStyleLayer.text","type":"codeVoice"},{"text":" property.","type":"text"}]},{"inlineContent":[{"type":"codeVoice","code":"MLNAttributedExpression.attributes"},{"type":"text","text":" valid attributes."}],"type":"paragraph"},{"type":"table","rows":[[[{"inlineContent":[{"type":"text","text":"Key"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Value Type"}]}]],[[{"inlineContent":[{"code":"MLNFontNamesAttribute","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" evaluating to an "},{"type":"codeVoice","code":"NSString"},{"text":" array.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"MLNFontScaleAttribute"}],"type":"paragraph"}],[{"inlineContent":[{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"type":"codeVoice","code":"NSNumber"},{"text":" value.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"MLNFontColorAttribute","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"text":" evaluating to an ","type":"text"},{"type":"codeVoice","code":"UIColor"},{"text":" (iOS) or ","type":"text"},{"type":"codeVoice","code":"NSColor"},{"text":" (macOS).","type":"text"}]}]]],"header":"row"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"level":3,"text":"MLN_LET","type":"heading","anchor":"MLNLET"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_LET:","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" Any number of variable names interspersed with their assigned","type":"text"},{"text":" ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" values, followed by an ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" ","type":"text"},{"text":"that may contain references to those variables.","type":"text"}]},{"inlineContent":[{"text":"Returns the result of evaluating an expression with the given variable values.","type":"text"},{"text":" ","type":"text"},{"text":"Compared to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"#code-mgl_expressionwithcontext-code","type":"reference"},{"type":"text","text":" custom"},{"type":"text","text":" "},{"type":"text","text":"function, this function takes the variable names and values inline before the"},{"type":"text","text":" "},{"type":"text","text":"expression that contains references to those variables."}],"type":"paragraph"},{"level":3,"text":"MLN_MATCH","type":"heading","anchor":"MLNMATCH"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"MLN_MATCH:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" An input expression, then any number of argument pairs, followed by a default","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression. Each argument pair consists of a constant value followed by an"},{"type":"text","text":" "},{"type":"text","text":"expression to produce as a result of matching that constant value."},{"type":"text","text":" "},{"type":"text","text":"If the input value is an aggregate expression, then any of the constant values within"},{"text":" ","type":"text"},{"type":"text","text":"that aggregate expression result in the following argument. This is shorthand for"},{"type":"text","text":" "},{"text":"specifying an argument pair for each of the constant values within that aggregate","type":"text"},{"type":"text","text":" "},{"text":"expression. It is not possible to match the aggregate expression itself.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the result of matching the input expression against the given constant","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"text":"MLN_IF","anchor":"MLNIF","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_IF:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" Alternating "},{"code":"NSPredicate","type":"codeVoice"},{"text":" conditionals and resulting expressions,","type":"text"},{"text":" ","type":"text"},{"text":"followed by a default expression.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the first expression that meets the condition; otherwise, the default"},{"text":" ","type":"text"},{"text":"value. Unlike","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"type":"text","text":" or"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"TERNARY()","type":"codeVoice"},{"type":"text","text":" syntax, this function can accept multiple “if else” conditions"},{"text":" ","type":"text"},{"text":"and is supported on iOS 8.","type":"text"},{"type":"emphasis","inlineContent":[{"text":"x","type":"text"}]},{"type":"text","text":" and macOS 10.10."},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"text":"; however, each conditional","type":"text"},{"type":"text","text":" "},{"text":"passed into this function must be wrapped in a constant expression.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"anchor":"MLNFUNCTION","text":"MLN_FUNCTION","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"MLN_FUNCTION:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"MLN_FUNCTION('typeof', mystery)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" Any arguments required by the expression operator.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"An expression exactly as defined by the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/"},{"text":".","type":"text"}]},{"anchor":"Custom-functions","type":"heading","text":"Custom functions","level":2},{"inlineContent":[{"text":"The following custom functions are also available with the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:selectorName:arguments:]"},{"type":"text","text":" method or the"},{"type":"text","text":" "},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" format string syntax."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Some of these functions are defined as methods on their respective target","type":"text"},{"type":"text","text":" "},{"type":"text","text":"classes, but you should not call them directly outside the context of an"},{"text":" ","type":"text"},{"type":"text","text":"expression, because the result may differ from the evaluated expression’s result"},{"type":"text","text":" "},{"type":"text","text":"or may result in undefined behavior."}]},{"type":"paragraph","inlineContent":[{"text":"The MapLibre Style Spec defines some operators for which no custom","type":"text"},{"type":"text","text":" "},{"text":"function is available. To use these operators in an ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":", call the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_function-code","isActive":true},{"type":"text","text":" function with the same arguments"},{"type":"text","text":" "},{"type":"text","text":"that the operator expects."}]},{"text":"boolValue","anchor":"boolValue","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"boolValue"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(1, 'boolValue')"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number or string."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" None.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Boolean representation of the target: "},{"type":"codeVoice","code":"FALSE"},{"text":" when then input is an","type":"text"},{"type":"text","text":" "},{"text":"empty string, 0, ","type":"text"},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"NaN"},{"type":"text","text":", otherwise "},{"type":"codeVoice","code":"TRUE"},{"text":".","type":"text"}]},{"level":3,"anchor":"mglhas","type":"heading","text":"mgl_has:"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"mgl_has:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to an ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"or the evaluated object ("},{"code":"SELF","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to an ","type":"text"},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"representing the key to look up in the dictionary or the feature attribute to"},{"text":" ","type":"text"},{"type":"text","text":"look up in the evaluated object (see "},{"code":"MLNFeature.attributes","type":"codeVoice"},{"type":"text","text":")."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"code":"true","type":"codeVoice"},{"type":"text","text":" if the dictionary has a value for the key or if the evaluated"},{"type":"text","text":" "},{"type":"text","text":"object has a value for the feature attribute."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"#code-mgl_does-have-code"},{"text":" function, which is used on its own","type":"text"},{"type":"text","text":" "},{"text":"without the ","type":"text"},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator. You can also check whether an object has an"},{"type":"text","text":" "},{"type":"text","text":"attribute by comparing the key path to "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":", for example "},{"code":"cheeseburger != NIL","type":"codeVoice"},{"type":"text","text":" "},{"text":"or ","type":"text"},{"code":"burger.cheese != NIL","type":"codeVoice"}]},{"type":"heading","anchor":"mglexpressionWithContext","text":"mgl_expressionWithContext:","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_expressionWithContext:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)","type":"codeVoice"},{"type":"text","text":" with"},{"text":" ","type":"text"},{"text":"a dictionary containing ","type":"text"},{"code":"ios","type":"codeVoice"},{"type":"text","text":" and "},{"code":"macos","type":"codeVoice"},{"type":"text","text":" keys"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that may contain references to the variables","type":"text"},{"type":"text","text":" "},{"type":"text","text":"defined in the context dictionary."}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" with "},{"type":"codeVoice","code":"NSString"},{"text":"s as keys and","type":"text"},{"text":" ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s as values. Each key is a variable name and each"},{"text":" ","type":"text"},{"text":"value is the variable’s value within the target expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The target expression with variable subexpressions replaced with the values","type":"text"},{"type":"text","text":" "},{"text":"defined in the context dictionary.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"#code-mgl_let-code"},{"text":" function, which is used on its own without the","type":"text"},{"type":"text","text":" "},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}]},{"type":"heading","level":3,"text":"mgl_interpolateWithCurveType:parameters:stops:","anchor":"mglinterpolateWithCurveTypeparametersstops"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)","type":"codeVoice"},{"text":" ","type":"text"},{"text":"with a dictionary containing zoom levels or other constant values as keys","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a number and contains a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"variable or key path expression."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" The first argument is one of the following strings denoting curve types:"},{"type":"text","text":" "},{"type":"codeVoice","code":"linear"},{"type":"text","text":", "},{"type":"codeVoice","code":"exponential"},{"type":"text","text":", or "},{"type":"codeVoice","code":"cubic-bezier"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"The second argument is an expression providing parameters for the curve:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"linear"},{"text":", the argument is ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the curve type is "},{"code":"exponential","type":"codeVoice"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"text":"expression that evaluates to a number, specifying the base of the","type":"text"},{"text":" ","type":"text"},{"text":"exponential interpolation.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"cubic-bezier"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"text":"array or aggregate expression containing four expressions, each","type":"text"},{"type":"text","text":" "},{"type":"text","text":"evaluating to a number. The four numbers are control points for the"},{"text":" ","type":"text"},{"type":"text","text":"cubic Bézier curve."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The third argument is an "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" object representing the"},{"type":"text","text":" "},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A value interpolated along the continuous mathematical function defined by the"},{"type":"text","text":" "},{"type":"text","text":"arguments, with the target as the input to the function."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"text":" ","type":"text"},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"text":" ","type":"text"},{"type":"text","text":"values may be constant values or "},{"type":"codeVoice","code":"NSExpression"},{"text":" objects. For example, you can","type":"text"},{"type":"text","text":" "},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"text":" ","type":"text"},{"text":"yellow, orange, and red as the values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"function, which is used on its own without the "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}]},{"level":3,"anchor":"mglnumberWithFallbackValues","text":"mgl_numberWithFallbackValues:","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"floatValue","type":"codeVoice"},{"text":", or","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"decimalValue"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"string."}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" Zero or more "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"text":" ","type":"text"},{"type":"text","text":"or string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A numeric representation of the target:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is "},{"code":"NIL","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"FALSE","type":"codeVoice"},{"type":"text","text":", the result is 0."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"code":"doubleValue","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"floatValue","type":"codeVoice"},{"text":", or","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"decimalValue"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"type":"text","text":"string."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" "},{"text":"Zero or more ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":"s, each evaluating to a Boolean value","type":"text"},{"text":" ","type":"text"},{"text":"or string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A numeric representation of the target:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a string, it is converted to a number as specified by the","type":"text"},{"text":" ","type":"text"},{"text":"“","type":"text"},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","isActive":true},{"type":"text","text":"”"},{"text":" ","type":"text"},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}]}]},{"content":[{"inlineContent":[{"text":"If multiple values are provided, each one is evaluated in order until the","type":"text"},{"type":"text","text":" "},{"text":"first successful conversion is obtained.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"type":"text","text":" "},{"text":"number by passing the value and the string ","type":"text"},{"code":"NSNumber","type":"codeVoice"},{"text":" into the ","type":"text"},{"code":"CAST()","type":"codeVoice"},{"type":"text","text":" "},{"text":"operator.","type":"text"}]},{"text":"mgl_stepWithMinimum:stops:","type":"heading","anchor":"mglstepWithMinimumstops","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_stepWithMinimum:stops:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)"},{"text":" with","type":"text"},{"type":"text","text":" "},{"text":"a dictionary with zoom levels or other constant values as keys","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" "},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a number and contains a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"variable or key path expression."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" ","type":"text"},{"type":"text","text":"The first argument is an expression that evaluates to a number, specifying"},{"type":"text","text":" "},{"type":"text","text":"the minimum value in case the target is less than any of the stops in the"},{"text":" ","type":"text"},{"text":"second argument.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The second argument is an "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" object representing the"},{"text":" ","type":"text"},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The output value of the stop whose key is just less than the evaluated target,"},{"text":" ","type":"text"},{"text":"or the minimum value if the target is less than the least of the stops’ keys.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The input expression is matched against the keys in the stop dictionary. The","type":"text"},{"text":" ","type":"text"},{"text":"keys may be feature attribute values, zoom levels, or heatmap densities. The","type":"text"},{"text":" ","type":"text"},{"text":"values may be constant values or ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" objects. For example, you can"},{"type":"text","text":" "},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"yellow, orange, and red as the values."}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"stringByAppendingString:","type":"heading","anchor":"stringByAppendingString","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"stringByAppendingString:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a string."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" ","type":"text"},{"type":"text","text":"One or more "},{"type":"codeVoice","code":"NSExpression"},{"text":"s, each evaluating to a string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The target string with each of the argument strings appended in order."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]"},{"text":" ","type":"text"},{"type":"text","text":"method and is similar to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"#code-mgl_join-code"},{"text":" function, which concatenates multiple","type":"text"},{"text":" ","type":"text"},{"text":"expressions and is used on its own without the ","type":"text"},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}]},{"level":3,"type":"heading","anchor":"stringValue","text":"stringValue"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"stringValue","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(ele, 'stringValue')"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"type":"text","text":"string."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"None."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A string representation of the target:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"type":"text","text":"NIL"},{"text":", the result is the empty string.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a Boolean value, the result is the string "},{"code":"true","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"If the target is a number, it is converted to a string as specified by the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"“"},{"isActive":true,"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type"},{"text":"”","type":"text"},{"text":" ","type":"text"},{"text":"algorithm of the ECMAScript Language Specification.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a color, it is converted to a string of the form"},{"text":" ","type":"text"},{"type":"codeVoice","code":"rgba(r,g,b,a)"},{"text":", where ","type":"text"},{"type":"text","text":"r"},{"text":", ","type":"text"},{"text":"g","type":"text"},{"text":", and ","type":"text"},{"type":"text","text":"b"},{"type":"text","text":" are"},{"text":" ","type":"text"},{"text":"numerals ranging from 0 to 255 and ","type":"text"},{"text":"a","type":"text"},{"type":"text","text":" ranges from 0 to 1."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Otherwise, the target is converted to a string in the format specified by the"},{"text":" ","type":"text"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"function of the ECMAScript Language Specification.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"text":" ","type":"text"},{"text":"string by passing the value and the string ","type":"text"},{"type":"codeVoice","code":"NSString"},{"text":" into the ","type":"text"},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" "},{"text":"operator.","type":"text"}],"type":"paragraph"}]}],"sections":[],"seeAlsoSections":[{"generated":true,"title":"Other Articles","identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"]}],"metadata":{"modules":[{"name":"MapLibre"}],"role":"article","roleHeading":"Article","title":"Predicates and expressions"},"references":{"https://maplibre.org/maplibre-style-spec/expressions/#step":{"type":"link","title":"step","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","titleInlineContent":[{"type":"codeVoice","code":"step"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step"},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","titleInlineContent":[{"code":"interpolate","type":"codeVoice"}],"title":"interpolate"},"https://github.com/maplibre/maplibre-native/issues/331":{"type":"link","title":"#331","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","titleInlineContent":[{"type":"text","text":"#331"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},"#code-mgl_if-code":{"identifier":"#code-mgl_if-code","type":"link","title":"MLN_IF()","titleInlineContent":[{"code":"MLN_IF()","type":"codeVoice"}],"url":"#code-mgl_if-code"},"#code-mgl_let-code":{"type":"link","title":"MLN_LET","identifier":"#code-mgl_let-code","titleInlineContent":[{"code":"MLN_LET","type":"codeVoice"}],"url":"#code-mgl_let-code"},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","type":"link","title":"concat","titleInlineContent":[{"code":"concat","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"type":"link","title":"asin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","titleInlineContent":[{"type":"codeVoice","code":"asin"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"role":"article","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","title":"User Interactions","kind":"article","abstract":[{"type":"text","text":"Learn how to work with gesture recognizers"}],"url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"role":"article","type":"topic","title":"Information for Style Authors","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors","kind":"article","abstract":[],"url":"\/documentation\/maplibre-native-for-ios\/for_style_authors"},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","titleInlineContent":[{"code":"match","type":"codeVoice"}],"title":"match"},"https://maplibre.org/maplibre-style-spec/expressions/":{"type":"link","title":"MapLibre Style Spec","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","titleInlineContent":[{"type":"text","text":"MapLibre Style Spec"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/"},"#code-mgl_expressionwithcontext-code":{"url":"#code-mgl_expressionwithcontext-code","type":"link","identifier":"#code-mgl_expressionwithcontext-code","titleInlineContent":[{"code":"mgl_expressionWithContext:","type":"codeVoice"}],"title":"mgl_expressionWithContext:"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"type":"link","title":"functions predefined","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","titleInlineContent":[{"type":"text","text":"functions predefined"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","type":"link","title":"cos","titleInlineContent":[{"code":"cos","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"type":"link","title":"to-number","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","titleInlineContent":[{"type":"codeVoice","code":"to-number"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","type":"link","title":"has","titleInlineContent":[{"code":"has","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has"},"#code-mgl_has-code":{"type":"link","title":"mgl_has:","identifier":"#code-mgl_has-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_has:"}],"url":"#code-mgl_has-code"},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","type":"link","title":"mgl_interpolate:withCurveType:parameters:stops:","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}],"url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code"},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"type":"link","title":"let","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","titleInlineContent":[{"code":"let","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","type":"link","title":"acos","titleInlineContent":[{"type":"codeVoice","code":"acos"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"type":"link","title":"ToNumber Applied to the String Type","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","titleInlineContent":[{"text":"ToNumber Applied to the String Type","type":"text"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type"},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","type":"link","title":"atan","titleInlineContent":[{"type":"codeVoice","code":"atan"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},"#code-mgl_stepwithminimum-stops-code":{"type":"link","title":"mgl_stepWithMinimum:stops:","identifier":"#code-mgl_stepwithminimum-stops-code","titleInlineContent":[{"code":"mgl_stepWithMinimum:stops:","type":"codeVoice"}],"url":"#code-mgl_stepwithminimum-stops-code"},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","type":"link","title":"coalesce","titleInlineContent":[{"type":"codeVoice","code":"coalesce"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"role":"article","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","title":"Info.plist Keys","kind":"article","abstract":[{"type":"text","text":"MapLibre Native for iOS supports custom "},{"type":"codeVoice","code":"Info.plist"},{"type":"text","text":" keys in your application in order to configure various settings."}],"url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys"},"#variables":{"type":"link","title":"variables","identifier":"#variables","titleInlineContent":[{"text":"variables","type":"text"}],"url":"#variables"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"abstract":[{"text":"An ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline"},{"text":" object represents a shape consisting of two or more vertices,","type":"text"},{"text":" ","type":"text"},{"text":"specified as ","type":"text"},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"text":" instances, and the line segments that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"connect them. For example, you could use an polyline to represent a road or the"},{"type":"text","text":" "},{"text":"path along which something moves.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","fragments":[{"text":"MLNPolyline","kind":"identifier"}],"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/maplibre\/mlnpolyline","title":"MLNPolyline"},"doc://org.swift.MyProject/documentation/MapLibre":{"title":"MapLibre","url":"\/documentation\/maplibre","type":"topic","role":"collection","kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}]},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","titleInlineContent":[{"type":"codeVoice","code":"format"}],"title":"format"},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"type":"link","title":"sin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","titleInlineContent":[{"code":"sin","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"link","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","titleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}],"title":"Predicate Programming Guide"},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"type":"link","title":"NumberToString","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","titleInlineContent":[{"text":"NumberToString","type":"text"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type"},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","titleInlineContent":[{"type":"codeVoice","code":"round"}],"title":"round"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"title":"MLNPolygon","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","abstract":[{"type":"text","text":"An "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","type":"reference"},{"text":" object represents a closed shape consisting of four or more","type":"text"},{"type":"text","text":" "},{"text":"vertices, specified as ","type":"text"},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"text":" instances, and the edges that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"connect them. For example, you could use a polygon shape to represent a"},{"type":"text","text":" "},{"type":"text","text":"building, a lake, or an area you want to highlight."}],"fragments":[{"kind":"identifier","text":"MLNPolygon"}],"type":"topic","kind":"symbol","url":"\/documentation\/maplibre\/mlnpolygon","role":"symbol"},"#code-mgl_match-code":{"url":"#code-mgl_match-code","type":"link","identifier":"#code-mgl_match-code","titleInlineContent":[{"type":"codeVoice","code":"MLN_MATCH()"}],"title":"MLN_MATCH()"},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"type":"link","title":"case","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","titleInlineContent":[{"type":"codeVoice","code":"case"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case"},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"kind":"symbol","title":"MLNShapeSource","abstract":[{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true},{"type":"text","text":" is a map content source that supplies vector shapes to be"},{"type":"text","text":" "},{"text":"shown on the map. The shapes may be instances of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","type":"reference"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"or they may be defined by local or external","type":"text"},{"text":" ","type":"text"},{"text":"GeoJSON","type":"text"},{"type":"text","text":" code. A shape source is added to an"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","type":"reference"},{"type":"text","text":" object along with an "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true,"type":"reference"},{"type":"text","text":" object. The vector style"},{"type":"text","text":" "},{"text":"layer defines the appearance of any content supplied by the shape source. You","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can update a shape source by setting its "},{"code":"shape","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"URL"},{"text":" property.","type":"text"}],"role":"symbol","fragments":[{"kind":"identifier","text":"MLNShapeSource"}],"url":"\/documentation\/maplibre\/mlnshapesource","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource"},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","type":"link","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"title":"mgl_interpolateWithCurveType:parameters:stops:"},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"type":"link","title":"NSExpression+MLNAdditions.h","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","titleInlineContent":[{"type":"codeVoice","code":"NSExpression+MLNAdditions.h"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h"},"#code-mgl_join-code":{"url":"#code-mgl_join-code","type":"link","identifier":"#code-mgl_join-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_join:"}],"title":"mgl_join:"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"type":"link","title":"to-string","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","titleInlineContent":[{"type":"codeVoice","code":"to-string"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","abstract":[{"text":"Using URL Templates when defining tile sources","type":"text"}],"kind":"article","title":"Tile URL Templates","type":"topic","role":"article"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","title":"Customizing Fonts","abstract":[{"type":"text","text":"Using custom fonts"}],"type":"topic","url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts","kind":"article","role":"article"},"#key-paths":{"type":"link","title":"key paths","identifier":"#key-paths","titleInlineContent":[{"type":"text","text":"key paths"}],"url":"#key-paths"},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","titleInlineContent":[{"type":"codeVoice","code":"tan"}],"title":"tan"},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"type":"link","title":"log2","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","titleInlineContent":[{"type":"codeVoice","code":"log2"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},"#code-mgl_function-code":{"url":"#code-mgl_function-code","type":"link","identifier":"#code-mgl_function-code","titleInlineContent":[{"type":"codeVoice","code":"MLN_FUNCTION()"}],"title":"MLN_FUNCTION()"},"https://tc39.github.io/ecma262/#sec-json.stringify":{"type":"link","title":"JSON.stringify()","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","titleInlineContent":[{"type":"codeVoice","code":"JSON.stringify()"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify"},"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","titleInlineContent":[{"type":"text","text":"kernel density estimation"}],"title":"kernel density estimation"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"role":"symbol","fragments":[{"kind":"identifier","text":"lineGradient"}],"url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient","type":"topic","title":"lineGradient","kind":"symbol","abstract":[{"type":"text","text":"The color gradient with which the line will be drawn. This property only has an"},{"type":"text","text":" "},{"text":"effect on lines defined by an ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true,"type":"reference"},{"text":" whose ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"option is set to "},{"type":"codeVoice","code":"YES"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient"},"#code-stringbyappendingstring-code":{"identifier":"#code-stringbyappendingstring-code","type":"link","title":"stringByAppendingString:","titleInlineContent":[{"type":"codeVoice","code":"stringByAppendingString:"}],"url":"#code-stringbyappendingstring-code"},"#code-mgl_does-have-code":{"url":"#code-mgl_does-have-code","type":"link","identifier":"#code-mgl_does-have-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_does:have:"}],"title":"mgl_does:have:"},"#using-expressions-to-configure-layout-and-paint-attributes":{"type":"link","title":"inside an expression","identifier":"#using-expressions-to-configure-layout-and-paint-attributes","titleInlineContent":[{"type":"text","text":"inside an expression"}],"url":"#using-expressions-to-configure-layout-and-paint-attributes"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"role":"article","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","title":"Adding Multiple Images","kind":"article","abstract":[{"type":"text","text":"Adding images to the map and assigning them to POI types"}],"url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample"},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","titleInlineContent":[{"type":"codeVoice","code":"distance"}],"title":"distance"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"type":"link","title":"+[NSExpression expressionForFunction:arguments:] method","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","titleInlineContent":[{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"type":"text","text":" method"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init"},"#MapLibre-specific-functions":{"url":"#MapLibre-specific-functions","type":"link","identifier":"#MapLibre-specific-functions","titleInlineContent":[{"type":"text","text":"MapLibre-specific functions"}],"title":"MapLibre-specific functions"}}}