{"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"identifier":{"interfaceLanguage":"occ","url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions"},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"text":"Style layers use predicates and expressions to determine what to display and how","type":"text"},{"type":"text","text":" "},{"text":"to format it. ","type":"text"},{"inlineContent":[{"type":"text","text":"Predicates"}],"type":"emphasis"},{"type":"text","text":" are represented by the same "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":" class that"},{"type":"text","text":" "},{"type":"text","text":"filters results from Core Data or items in an "},{"type":"codeVoice","code":"NSArray"},{"type":"text","text":" in Objective-C."},{"text":" ","type":"text"},{"type":"text","text":"Predicates are based on "},{"type":"emphasis","inlineContent":[{"text":"expressions","type":"text"}]},{"text":", represented by the ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" class."},{"type":"text","text":" "},{"text":"Somewhat unusually, style layers also use expressions on their own.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This document discusses the specific subset of the predicate and expression","type":"text"},{"type":"text","text":" "},{"type":"text","text":"syntax supported by this SDK. For a more general introduction to predicates and"},{"type":"text","text":" "},{"type":"text","text":"expressions, consult the"},{"type":"text","text":" "},{"inlineContent":[{"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","isActive":true}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"in Apple developer documentation. For additional detail on how this SDK has"},{"type":"text","text":" "},{"text":"extended the ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" class, see the "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h"},{"type":"text","text":" header."}]},{"anchor":"Using-predicates-to-filter-vector-data","text":"Using predicates to filter vector data","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Most style layer classes display ","type":"text"},{"type":"codeVoice","code":"MLNFeature"},{"type":"text","text":" objects that you can show or hide"},{"text":" ","type":"text"},{"text":"based on the feature’s attributes. Use the ","type":"text"},{"type":"codeVoice","code":"MLNVectorStyleLayer.predicate"},{"type":"text","text":" "},{"text":"property to include only the features in the source layer that satisfy a","type":"text"},{"text":" ","type":"text"},{"text":"condition that you define.","type":"text"}]},{"type":"heading","level":3,"text":"Operators","anchor":"Operators"},{"inlineContent":[{"type":"text","text":"The following comparison operators are supported:"}],"type":"paragraph"},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"key = value","type":"codeVoice"},{"type":"codeVoice","code":"key == value"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSGreaterThanOrEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"key >= value","type":"codeVoice"},{"code":"key => value","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSLessThanOrEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key <= value"},{"type":"codeVoice","code":"key =< value"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSGreaterThanPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"key > value"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSLessThanPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"key < value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key != value"},{"type":"codeVoice","code":"key <> value"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSBetweenPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"key BETWEEN { 32, 212 }","type":"codeVoice"}]}]]],"header":"row"},{"type":"paragraph","inlineContent":[{"text":"To test whether a feature has or lacks a specific attribute, compare the","type":"text"},{"text":" ","type":"text"},{"text":"attribute to ","type":"text"},{"code":"NULL","type":"codeVoice"},{"type":"text","text":" or "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":". Predicates created using the"},{"type":"text","text":" "},{"code":"+[NSPredicate predicateWithValue:]","type":"codeVoice"},{"type":"text","text":" method are also supported. String"},{"type":"text","text":" "},{"type":"text","text":"operators and custom operators are not supported."}]},{"type":"paragraph","inlineContent":[{"text":"The following compound operators are supported:","type":"text"}]},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSCompoundPredicateType","type":"codeVoice"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAndPredicateType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"predicate1 AND predicate2"},{"type":"codeVoice","code":"predicate1 && predicate2"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSOrPredicateType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"predicate1 OR predicate2"},{"text":"predicate1 || predicate2","type":"text"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNotPredicateType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NOT predicate"},{"code":"!predicate","type":"codeVoice"}]}]]]},{"inlineContent":[{"type":"text","text":"The following aggregate operators are supported:"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSInPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSContainsPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"IN"},{"text":" and ","type":"text"},{"code":"CONTAINS","type":"codeVoice"},{"type":"text","text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature ("},{"code":"SELF","type":"codeVoice"},{"text":") lies within a given ","type":"text"},{"type":"codeVoice","code":"MLNShape"},{"type":"text","text":" or "},{"code":"MLNFeature","type":"codeVoice"},{"type":"text","text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:"}]},{"type":"codeListing","syntax":"objc","code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"]},{"code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The following combinations of comparison operators and modifiers are supported:","type":"text"}]},{"rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateModifier"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSAllPredicateModifier","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSNotEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"code":"ALL haystack != needle","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSAnyPredicateModifier"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ANY haystack = needle"},{"type":"codeVoice","code":"SOME haystack = needle"}]}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"text":"The following comparison predicate options are supported for comparison and","type":"text"},{"type":"text","text":" "},{"text":"aggregate operators that are used in the predicate:","type":"text"}]},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSComparisonPredicateOptions","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSCaseInsensitivePredicateOption"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"'QUEBEC' =[c] 'Quebec'"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSDiacriticInsensitivePredicateOption"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"'Québec' =[d] 'Quebec'"}]}]]],"header":"row"},{"inlineContent":[{"type":"text","text":"Other comparison predicate options are unsupported, namely "},{"type":"codeVoice","code":"l"},{"type":"text","text":" "},{"text":"(for locale sensitivity) and ","type":"text"},{"type":"codeVoice","code":"n"},{"type":"text","text":" (for normalization). A comparison is"},{"type":"text","text":" "},{"type":"text","text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison"},{"type":"text","text":" "},{"type":"text","text":"predicate options are not supported in conjunction with comparison modifiers"},{"type":"text","text":" "},{"type":"text","text":"like "},{"type":"codeVoice","code":"ALL"},{"type":"text","text":" and "},{"code":"ANY","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"Operands","text":"Operands"},{"type":"paragraph","inlineContent":[{"text":"Operands in predicates can be ","type":"text"},{"type":"reference","identifier":"#variables","isActive":true},{"text":", ","type":"text"},{"identifier":"#key-paths","isActive":true,"type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"or almost anything else that can appear","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"#using-expressions-to-configure-layout-and-paint-attributes","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Automatic type casting is not performed. Therefore, a feature only matches a"},{"text":" ","type":"text"},{"text":"predicate if its value for the attribute in question is of the same type as the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value specified in the predicate. Use the "},{"code":"CAST()","type":"codeVoice"},{"type":"text","text":" operator to convert a key"},{"text":" ","type":"text"},{"text":"path or variable into a matching type:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast a value to a number, use ","type":"text"},{"type":"codeVoice","code":"CAST(key, 'NSNumber')"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"To cast a value to a string, use "},{"type":"codeVoice","code":"CAST(key, 'NSString')"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"To cast a value to a color, use "},{"code":"CAST(key, 'UIColor')","type":"codeVoice"},{"type":"text","text":" on iOS and "},{"type":"codeVoice","code":"CAST(key, 'NSColor')"},{"type":"text","text":" on macOS."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"To cast an "},{"type":"codeVoice","code":"NSColor"},{"text":" or ","type":"text"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" object to an array, use "},{"type":"codeVoice","code":"CAST(noindex(color), 'NSArray')"},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For details about the predicate format string syntax, consult the “Predicate"},{"text":" ","type":"text"},{"text":"Format String Syntax” chapter of the","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"overridingTitleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}],"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","isActive":true,"overridingTitle":"Predicate Programming Guide"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"in Apple developer documentation."}]},{"level":2,"text":"Using expressions to configure layout and paint attributes","type":"heading","anchor":"Using-expressions-to-configure-layout-and-paint-attributes"},{"inlineContent":[{"type":"text","text":"An expression can contain subexpressions of various types. Each of the supported"},{"text":" ","type":"text"},{"text":"types of expressions is discussed below.","type":"text"}],"type":"paragraph"},{"text":"Constant values","level":3,"type":"heading","anchor":"Constant-values"},{"inlineContent":[{"text":"A constant value can be of any of the following types:","type":"text"}],"type":"paragraph"},{"type":"table","rows":[[[{"inlineContent":[{"type":"text","text":"In Objective-C"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"In Swift","type":"text"}]}]],[[{"inlineContent":[{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"NSColor","type":"codeVoice"},{"text":" (macOS)","type":"text"},{"type":"codeVoice","code":"UIColor"},{"text":" (iOS)","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSString"}]}],[{"inlineContent":[{"code":"String","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSString"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}]],[[{"inlineContent":[{"code":"NSArray<NSNumber>","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[Float]"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSArray<NSString>"}]}],[{"type":"paragraph","inlineContent":[{"code":"[String]","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.CGVectorValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue"},{"type":"text","text":" containing "},{"code":"CGVector","type":"codeVoice"},{"type":"text","text":" (macOS)"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSValue.cgVectorValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue"},{"text":" containing ","type":"text"},{"type":"codeVoice","code":"CGVector"},{"text":" (macOS)","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.UIEdgeInsetsValue"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"type":"text","text":" (macOS)"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSValue.uiEdgeInsetsValue","type":"codeVoice"},{"type":"text","text":" (iOS)"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"type":"text","text":" (macOS)"}]}]]],"header":"row"},{"inlineContent":[{"text":"For literal floating-point values, use ","type":"text"},{"code":"-[NSNumber numberWithDouble:]","type":"codeVoice"},{"type":"text","text":" instead"},{"type":"text","text":" "},{"text":"of ","type":"text"},{"type":"codeVoice","code":"-[NSNumber numberWithFloat:]"},{"type":"text","text":" to avoid precision issues."}],"type":"paragraph"},{"type":"heading","anchor":"Key-paths","level":3,"text":"Key paths"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A key path expression refers to an attribute of the "},{"code":"MLNFeature","type":"codeVoice"},{"type":"text","text":" object being"},{"text":" ","type":"text"},{"text":"evaluated for display. For example, if a polygon’s ","type":"text"},{"type":"codeVoice","code":"MLNFeature.attributes"},{"text":" ","type":"text"},{"text":"dictionary contains the ","type":"text"},{"code":"floorCount","type":"codeVoice"},{"type":"text","text":" key, then the key path "},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" refers"},{"type":"text","text":" "},{"text":"to the value of the ","type":"text"},{"code":"floorCount","type":"codeVoice"},{"text":" attribute when evaluating that particular","type":"text"},{"type":"text","text":" "},{"type":"text","text":"polygon."}]},{"type":"paragraph","inlineContent":[{"text":"The following special attributes are also available on features that are produced","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as a result of clustering multiple point features together in a shape source:"}]},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"text":"Attribute","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type"}]}],[{"inlineContent":[{"text":"Meaning","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"cluster"}]}],[{"type":"paragraph","inlineContent":[{"text":"Bool","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"cluster_id"}]}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"Identifier for the point cluster."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"point_count","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"The number of point features in a given cluster."}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some characters may not be used directly as part of a key path in a format"},{"type":"text","text":" "},{"type":"text","text":"string. For example, if a feature’s attribute is named "},{"type":"codeVoice","code":"ISO 3166-1:2006"},{"type":"text","text":", an"},{"text":" ","type":"text"},{"text":"expression format string of ","type":"text"},{"type":"codeVoice","code":"lowercase(ISO 3166-1:2006)"},{"type":"text","text":" or a predicate format"},{"text":" ","type":"text"},{"type":"text","text":"string of "},{"code":"ISO 3166-1:2006 == 'US-OH'","type":"codeVoice"},{"text":" would raise an exception. Instead, use a","type":"text"},{"type":"text","text":" "},{"code":"%K","type":"codeVoice"},{"type":"text","text":" placeholder or the "},{"type":"codeVoice","code":"+[NSExpression expressionForKeyPath:]"},{"type":"text","text":" initializer:"}]},{"type":"codeListing","syntax":"objc","code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"]},{"syntax":"swift","code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"],"type":"codeListing"},{"level":3,"type":"heading","anchor":"Functions","text":"Functions"},{"type":"paragraph","inlineContent":[{"text":"Of the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"by the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"the following subset is supported in layer attribute values:","type":"text"}]},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializer parameter"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"average:"}]}],[{"type":"paragraph","inlineContent":[{"code":"average({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sum:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sum({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"count:"}]}],[{"inlineContent":[{"code":"count({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"min:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"min({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"max:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"max({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"add:to:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 + 2"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"from:subtract:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"2 - 1","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"multiply:by:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"1 * 2"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"divide:by:"}]}],[{"type":"paragraph","inlineContent":[{"code":"1 \/ 2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"modulus:by:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"modulus:by:(1, 2)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt(2)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"log:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"log(10)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ln:"}]}],[{"type":"paragraph","inlineContent":[{"code":"ln(2)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"raise:toPower:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"2 ** 2"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"exp:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"exp(0)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"ceiling:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"ceiling(0.99999)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"abs:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"abs(-1)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"trunc:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"trunc(6378.1370)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"floor:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"floor(-0.99999)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"uppercase:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"uppercase('Elysian Fields')"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lowercase:"}]}],[{"inlineContent":[{"code":"lowercase('DOWNTOWN')","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"noindex:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"noindex(0 + 2 + c)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"length:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"length('Wapakoneta')"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"castObject:toType:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"CAST(ele, 'NSString')"},{"code":"CAST(ele, 'NSNumber')","type":"codeVoice"}],"type":"paragraph"}]]],"type":"table","header":"row"},{"inlineContent":[{"type":"text","text":"A number of "},{"identifier":"#MapLibre-specific-functions","type":"reference","isActive":true},{"text":" are also","type":"text"},{"text":" ","type":"text"},{"text":"available.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following predefined functions are "},{"inlineContent":[{"type":"text","text":"not"}],"type":"strong"},{"text":" supported:","type":"text"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"text":"Initializer parameter","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"median:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"median({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"mode:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"mode({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"stddev:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"stddev({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"inlineContent":[{"code":"random","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"random()"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"randomn:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"randomn(10)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"now"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"now()"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:(5, 3)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:(5, 3)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:"}]}],[{"inlineContent":[{"code":"bitwiseXor:with:(5, 3)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"leftshift:by:"}]}],[{"type":"paragraph","inlineContent":[{"code":"leftshift:by:(23, 1)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rightshift:by:"}]}],[{"type":"paragraph","inlineContent":[{"code":"rightshift:by:(23, 1)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"onesComplement:"}]}],[{"inlineContent":[{"code":"onesComplement(255)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:(there, here)"}]}]]],"type":"table","header":"row"},{"anchor":"Conditionals","level":3,"type":"heading","text":"Conditionals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conditionals are supported via the built-in"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"type":"text","text":" "},{"text":"method and ","type":"text"},{"type":"codeVoice","code":"TERNARY()"},{"text":" operator. If you need to express multiple cases","type":"text"},{"type":"text","text":" "},{"text":"(“else-if”), you can either nest a conditional within a conditional or use the","type":"text"},{"type":"text","text":" "},{"identifier":"#code-mgl_if-code","type":"reference","isActive":true},{"type":"text","text":" or "},{"type":"reference","identifier":"#code-mgl_match-code","isActive":true},{"text":" function.","type":"text"}]},{"text":"Aggregates","type":"heading","level":3,"anchor":"Aggregates"},{"inlineContent":[{"text":"Aggregate expressions can contain arrays of expressions. In some cases, it is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"possible to use the array itself instead of wrapping the array in an aggregate"},{"type":"text","text":" "},{"text":"expression.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"Variables","text":"Variables"},{"inlineContent":[{"text":"The following variables are defined by this SDK for use with style layers:","type":"text"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Variable"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Meaning"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"$featureIdentifier"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Any GeoJSON data type","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.featureIdentifierVariableExpression"},{"text":" property.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$geometryType"}]}],[{"inlineContent":[{"type":"text","text":"String"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:","type":"text"},{"text":"*   ","type":"text"},{"code":"Point","type":"codeVoice"},{"type":"text","text":" for point features, corresponding to the "},{"code":"MLNPointAnnotation","type":"codeVoice"},{"type":"text","text":" class"},{"text":"*   ","type":"text"},{"type":"codeVoice","code":"LineString"},{"text":" for polyline features, corresponding to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline"},{"type":"text","text":" class"},{"type":"text","text":"*   "},{"type":"codeVoice","code":"Polygon"},{"type":"text","text":" for polygon features, corresponding to the "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true,"type":"reference"},{"text":" class","type":"text"},{"text":"This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.geometryTypeVariableExpression"},{"type":"text","text":" property."}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"$heatmapDensity"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"reference","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","isActive":true},{"text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the ","type":"text"},{"type":"codeVoice","code":"heatmapColor"},{"text":" property. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.heatmapDensityVariableExpression"},{"type":"text","text":" property."}]}]],[[{"type":"paragraph","inlineContent":[{"code":"$zoomLevel","type":"codeVoice"}]}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.zoomLevelVariableExpression"},{"text":" property.","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"$lineProgress","type":"codeVoice"}]}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient"},{"text":" property. It corresponds to the ","type":"text"},{"code":"NSExpression.lineProgressVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}],"type":"paragraph"}]]],"type":"table","header":"row"},{"inlineContent":[{"type":"text","text":"In addition to these variables, you can define your own variables and refer to"},{"text":" ","type":"text"},{"type":"text","text":"them elsewhere in the expression. The syntax for defining a variable makes use"},{"type":"text","text":" "},{"text":"of a ","type":"text"},{"overridingTitleInlineContent":[{"type":"text","text":"MapLibre-specific function"}],"identifier":"#MapLibre-specific-functions","isActive":true,"type":"reference","overridingTitle":"MapLibre-specific function"},{"type":"text","text":" that takes an"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" as an argument:"}],"type":"paragraph"},{"type":"codeListing","code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"],"syntax":"objc"},{"code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"MapLibre-specific functions","anchor":"MapLibre-specific-functions"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to a change in iOS 15.5, some of these stopped working. See "},{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","isActive":true,"type":"reference"},{"text":" for more information and workarounds.","type":"text"}]}],"name":"Warning","type":"aside","style":"warning"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For compatibility with the MapLibre Style Spec, the following functions"},{"text":" ","type":"text"},{"text":"are defined by this SDK. When setting a style layer property, you can call these","type":"text"},{"type":"text","text":" "},{"type":"text","text":"functions just like the predefined functions above, using either the"},{"text":" ","type":"text"},{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"text":" method or a convenient format","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"string syntax:"}]},{"level":3,"type":"heading","text":"mgl_does:have:","anchor":"mgldoeshave"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_does:have:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:(SELF, '🧀🍔')"},{"text":" or ","type":"text"},{"code":"mgl_does:have:(%@, '🧀🍔')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"Returns a Boolean value indicating whether the dictionary has a value for the","type":"text"},{"type":"text","text":" "},{"text":"key or whether the evaluated object (","type":"text"},{"code":"SELF","type":"codeVoice"},{"type":"text","text":") has a value for the feature"},{"type":"text","text":" "},{"type":"text","text":"attribute. Compared to the "},{"identifier":"#code-mgl_has-code","type":"reference","isActive":true},{"text":" custom function,","type":"text"},{"type":"text","text":" "},{"text":"that function’s target is instead passed in as the first argument to this","type":"text"},{"type":"text","text":" "},{"type":"text","text":"function. Both functions are equivalent to the syntax "},{"type":"codeVoice","code":"key != NIL"},{"type":"text","text":" or"},{"text":" ","type":"text"},{"code":"%@[key] != NIL","type":"codeVoice"},{"type":"text","text":" but can be used outside of a predicate."}]},{"anchor":"mglinterpolatewithCurveTypeparametersstops","level":3,"text":"mgl_interpolate:withCurveType:parameters:stops:","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"mgl_interpolate:withCurveType:parameters:stops:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Produces continuous, smooth results by interpolating between pairs of input and"},{"text":" ","type":"text"},{"type":"text","text":"output values (“stops”). Compared to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"custom function, the input expression (that function’s target) is instead passed"},{"type":"text","text":" "},{"type":"text","text":"in as the first argument to this function."}]},{"type":"heading","level":3,"anchor":"mglstepfromstops","text":"mgl_step:from:stops:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_step:from:stops:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_step:from:stops:(x, 11, %@)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Produces discrete, stepped results by evaluating a piecewise-constant function","type":"text"},{"text":" ","type":"text"},{"text":"defined by pairs of input and output values (“stops”). Compared to the","type":"text"},{"type":"text","text":" "},{"identifier":"#code-mgl_stepwithminimum-stops-code","isActive":true,"type":"reference"},{"text":" custom","type":"text"},{"type":"text","text":" "},{"text":"function, the input expression (that function’s target) is instead passed in as","type":"text"},{"type":"text","text":" "},{"text":"the first argument to this function.","type":"text"}]},{"type":"heading","level":3,"text":"mgl_join:","anchor":"mgljoin"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_join:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_join({'Old', 'MacDonald'})","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of concatenating together all the elements of an array in"},{"type":"text","text":" "},{"type":"text","text":"order. Compared to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"#code-stringbyappendingstring-code","type":"reference"},{"text":" custom","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"function, this function takes only one argument, which is an aggregate"},{"type":"text","text":" "},{"type":"text","text":"expression containing the strings to concatenate."}]},{"text":"mgl_acos:","level":3,"type":"heading","anchor":"mglacos"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_acos:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_acos(1)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the arccosine of the number."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"mglasin","text":"mgl_asin:"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_asin:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_asin(0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the arcsine of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","level":3,"anchor":"mglatan","text":"mgl_atan:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_atan:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_atan(20)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the arctangent of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"text":"mgl_cos:","level":3,"type":"heading","anchor":"mglcos"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_cos:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_cos(0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the cosine of the number.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_log2:","level":3,"anchor":"mgllog2","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_log2:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"mgl_log2(1024)","type":"codeVoice"}]},{"inlineContent":[{"type":"text","text":"Returns the base-2 logarithm of the number."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"mgl_round:","anchor":"mglround","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_round:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_round(1.5)"}]},{"inlineContent":[{"type":"text","text":"Returns the number rounded to the nearest integer. If the number is halfway"},{"text":" ","type":"text"},{"type":"text","text":"between two integers, this function rounds it away from zero."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"anchor":"mglsin","type":"heading","text":"mgl_sin:"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_sin:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin(0)"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the sine of the number.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","level":3,"anchor":"mgltan","text":"mgl_tan:"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan(0)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the tangent of the number."}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"level":3,"text":"mgl_distanceFrom:","type":"heading","anchor":"mgldistanceFrom"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_distanceFrom:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_distanceFrom(%@)"},{"type":"text","text":" with an "},{"type":"codeVoice","code":"MLNShape"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the straight-line distance from the evaluated object to the given shape."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"anchor":"mglcoalesce","type":"heading","text":"mgl_coalesce:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_coalesce:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_coalesce({x, y, z})"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the first non-"},{"type":"codeVoice","code":"nil"},{"text":" value from an array of expressions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"text":"mgl_attributed:","level":3,"anchor":"mglattributed","type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_attributed:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_attributed({x, y, z})","type":"codeVoice"}]},{"inlineContent":[{"text":"Concatenates and returns the array of ","type":"text"},{"code":"MLNAttributedExpression","type":"codeVoice"},{"type":"text","text":" objects, for use"},{"text":" ","type":"text"},{"type":"text","text":"with the "},{"code":"MLNSymbolStyleLayer.text","type":"codeVoice"},{"type":"text","text":" property."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"code":"MLNAttributedExpression.attributes","type":"codeVoice"},{"type":"text","text":" valid attributes."}]},{"rows":[[[{"type":"paragraph","inlineContent":[{"text":"Key","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Value Type"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontNamesAttribute"}]}],[{"inlineContent":[{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"type":"codeVoice","code":"NSString"},{"text":" array.","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"MLNFontScaleAttribute","type":"codeVoice"}]}],[{"inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"text":" evaluating to an ","type":"text"},{"type":"codeVoice","code":"NSNumber"},{"text":" value.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"MLNFontColorAttribute","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" evaluating to an ","type":"text"},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" (iOS) or "},{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)."}]}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","anchor":"MLNLET","text":"MLN_LET","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_LET:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" Any number of variable names interspersed with their assigned","type":"text"},{"type":"text","text":" "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" values, followed by an "},{"code":"NSExpression","type":"codeVoice"},{"text":" ","type":"text"},{"text":"that may contain references to those variables.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the result of evaluating an expression with the given variable values.","type":"text"},{"text":" ","type":"text"},{"text":"Compared to the","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"#code-mgl_expressionwithcontext-code"},{"text":" custom","type":"text"},{"text":" ","type":"text"},{"text":"function, this function takes the variable names and values inline before the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expression that contains references to those variables."}]},{"type":"heading","text":"MLN_MATCH","anchor":"MLNMATCH","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_MATCH:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" An input expression, then any number of argument pairs, followed by a default","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expression. Each argument pair consists of a constant value followed by an"},{"text":" ","type":"text"},{"text":"expression to produce as a result of matching that constant value.","type":"text"},{"type":"text","text":" "},{"text":"If the input value is an aggregate expression, then any of the constant values within","type":"text"},{"text":" ","type":"text"},{"text":"that aggregate expression result in the following argument. This is shorthand for","type":"text"},{"type":"text","text":" "},{"text":"specifying an argument pair for each of the constant values within that aggregate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression. It is not possible to match the aggregate expression itself."}]},{"type":"paragraph","inlineContent":[{"text":"Returns the result of matching the input expression against the given constant","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]"},{"type":"text","text":" "},{"text":"method and the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"anchor":"MLNIF","type":"heading","level":3,"text":"MLN_IF"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_IF:"}]},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" Alternating "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" conditionals and resulting expressions,"},{"text":" ","type":"text"},{"type":"text","text":"followed by a default expression."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the first expression that meets the condition; otherwise, the default","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value. Unlike"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"TERNARY()","type":"codeVoice"},{"text":" syntax, this function can accept multiple “if else” conditions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and is supported on iOS 8."},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"text":" and macOS 10.10.","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"type":"text","text":"; however, each conditional"},{"text":" ","type":"text"},{"text":"passed into this function must be wrapped in a constant expression.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]"},{"text":" ","type":"text"},{"text":"method and the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"MLN_FUNCTION","level":3,"anchor":"MLNFUNCTION","type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_FUNCTION:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_FUNCTION('typeof', mystery)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" Any arguments required by the expression operator."}]},{"inlineContent":[{"type":"text","text":"An expression exactly as defined by the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Custom functions","level":2,"type":"heading","anchor":"Custom-functions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following custom functions are also available with the"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForFunction:selectorName:arguments:]","type":"codeVoice"},{"type":"text","text":" method or the"},{"type":"text","text":" "},{"code":"FUNCTION()","type":"codeVoice"},{"text":" format string syntax.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some of these functions are defined as methods on their respective target"},{"type":"text","text":" "},{"type":"text","text":"classes, but you should not call them directly outside the context of an"},{"type":"text","text":" "},{"type":"text","text":"expression, because the result may differ from the evaluated expression’s result"},{"text":" ","type":"text"},{"type":"text","text":"or may result in undefined behavior."}]},{"inlineContent":[{"text":"The MapLibre Style Spec defines some operators for which no custom","type":"text"},{"type":"text","text":" "},{"type":"text","text":"function is available. To use these operators in an "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":", call the"},{"text":" ","type":"text"},{"identifier":"#code-mgl_function-code","isActive":true,"type":"reference"},{"text":" function with the same arguments","type":"text"},{"type":"text","text":" "},{"text":"that the operator expects.","type":"text"}],"type":"paragraph"},{"text":"boolValue","level":3,"anchor":"boolValue","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"boolValue","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"FUNCTION(1, 'boolValue')","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a number or string.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" None."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Boolean representation of the target: "},{"type":"codeVoice","code":"FALSE"},{"text":" when then input is an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"empty string, 0, "},{"code":"FALSE","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":", or "},{"type":"codeVoice","code":"NaN"},{"text":", otherwise ","type":"text"},{"type":"codeVoice","code":"TRUE"},{"type":"text","text":"."}]},{"text":"mgl_has:","type":"heading","level":3,"anchor":"mglhas"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_has:","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to an "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"or the evaluated object ("},{"type":"codeVoice","code":"SELF"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to an "},{"type":"codeVoice","code":"NSString"},{"text":" ","type":"text"},{"text":"representing the key to look up in the dictionary or the feature attribute to","type":"text"},{"text":" ","type":"text"},{"text":"look up in the evaluated object (see ","type":"text"},{"code":"MLNFeature.attributes","type":"codeVoice"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"true"},{"type":"text","text":" if the dictionary has a value for the key or if the evaluated"},{"type":"text","text":" "},{"text":"object has a value for the feature attribute.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_does-have-code"},{"type":"text","text":" function, which is used on its own"},{"type":"text","text":" "},{"text":"without the ","type":"text"},{"type":"codeVoice","code":"FUNCTION()"},{"text":" operator. You can also check whether an object has an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"attribute by comparing the key path to "},{"code":"NIL","type":"codeVoice"},{"text":", for example ","type":"text"},{"type":"codeVoice","code":"cheeseburger != NIL"},{"type":"text","text":" "},{"text":"or ","type":"text"},{"type":"codeVoice","code":"burger.cheese != NIL"}],"type":"paragraph"},{"text":"mgl_expressionWithContext:","level":3,"anchor":"mglexpressionWithContext","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_expressionWithContext:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)"},{"type":"text","text":" with"},{"type":"text","text":" "},{"text":"a dictionary containing ","type":"text"},{"type":"codeVoice","code":"ios"},{"text":" and ","type":"text"},{"code":"macos","type":"codeVoice"},{"text":" keys","type":"text"}]},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that may contain references to the variables"},{"type":"text","text":" "},{"text":"defined in the context dictionary.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" An "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" with "},{"type":"codeVoice","code":"NSString"},{"text":"s as keys and","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":"s as values. Each key is a variable name and each","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value is the variable’s value within the target expression."}]},{"inlineContent":[{"type":"text","text":"The target expression with variable subexpressions replaced with the values"},{"type":"text","text":" "},{"type":"text","text":"defined in the context dictionary."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_let-code","isActive":true},{"type":"text","text":" function, which is used on its own without the"},{"text":" ","type":"text"},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"mglinterpolateWithCurveTypeparametersstops","text":"mgl_interpolateWithCurveType:parameters:stops:","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)"},{"type":"text","text":" "},{"text":"with a dictionary containing zoom levels or other constant values as keys","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number and contains a"},{"type":"text","text":" "},{"text":"variable or key path expression.","type":"text"}]},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" The first argument is one of the following strings denoting curve types:"},{"type":"text","text":" "},{"type":"codeVoice","code":"linear"},{"text":", ","type":"text"},{"code":"exponential","type":"codeVoice"},{"type":"text","text":", or "},{"code":"cubic-bezier","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second argument is an expression providing parameters for the curve:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the curve type is "},{"code":"linear","type":"codeVoice"},{"text":", the argument is ","type":"text"},{"type":"codeVoice","code":"NIL"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the curve type is ","type":"text"},{"type":"codeVoice","code":"exponential"},{"text":", the argument is an","type":"text"},{"text":" ","type":"text"},{"text":"expression that evaluates to a number, specifying the base of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"exponential interpolation."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the curve type is ","type":"text"},{"code":"cubic-bezier","type":"codeVoice"},{"text":", the argument is an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"array or aggregate expression containing four expressions, each"},{"text":" ","type":"text"},{"text":"evaluating to a number. The four numbers are control points for the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"cubic Bézier curve."}]}]}]},{"inlineContent":[{"text":"The third argument is an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" object representing the"},{"type":"text","text":" "},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A value interpolated along the continuous mathematical function defined by the"},{"type":"text","text":" "},{"type":"text","text":"arguments, with the target as the input to the function."}]},{"type":"paragraph","inlineContent":[{"text":"The input expression is matched against the keys in the stop dictionary. The","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"text":" ","type":"text"},{"type":"text","text":"values may be constant values or "},{"code":"NSExpression","type":"codeVoice"},{"text":" objects. For example, you can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"type":"text","text":" "},{"text":"yellow, orange, and red as the values.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]"},{"type":"text","text":" "},{"text":"method and the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"function, which is used on its own without the "},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"mglnumberWithFallbackValues","text":"mgl_numberWithFallbackValues:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"floatValue","type":"codeVoice"},{"type":"text","text":", or"},{"type":"text","text":" "},{"type":"codeVoice","code":"decimalValue"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"text":" ","type":"text"},{"text":"string.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" Zero or more ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"text":" ","type":"text"},{"type":"text","text":"or string."}]},{"inlineContent":[{"type":"text","text":"A numeric representation of the target:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":" or "},{"code":"FALSE","type":"codeVoice"},{"type":"text","text":", the result is 0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"floatValue","type":"codeVoice"},{"type":"text","text":", or"},{"type":"text","text":" "},{"type":"codeVoice","code":"decimalValue"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"text":"string.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" "},{"text":"Zero or more ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"text":" ","type":"text"},{"text":"or string.","type":"text"}]},{"inlineContent":[{"text":"A numeric representation of the target:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"If the target is ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"code":"FALSE","type":"codeVoice"},{"type":"text","text":", the result is 0."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"},{"text":" ","type":"text"},{"type":"text","text":"“"},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","isActive":true},{"type":"text","text":"”"},{"type":"text","text":" "},{"text":"algorithm of the ECMAScript Language Specification.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If multiple values are provided, each one is evaluated in order until the"},{"text":" ","type":"text"},{"text":"first successful conversion is obtained.","type":"text"}]}]}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"text":" ","type":"text"},{"type":"text","text":"number by passing the value and the string "},{"code":"NSNumber","type":"codeVoice"},{"text":" into the ","type":"text"},{"type":"codeVoice","code":"CAST()"},{"text":" ","type":"text"},{"type":"text","text":"operator."}]},{"level":3,"type":"heading","text":"mgl_stepWithMinimum:stops:","anchor":"mglstepWithMinimumstops"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)","type":"codeVoice"},{"type":"text","text":" with"},{"text":" ","type":"text"},{"type":"text","text":"a dictionary with zoom levels or other constant values as keys"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" "},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a number and contains a","type":"text"},{"text":" ","type":"text"},{"text":"variable or key path expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" "},{"type":"text","text":"The first argument is an expression that evaluates to a number, specifying"},{"type":"text","text":" "},{"type":"text","text":"the minimum value in case the target is less than any of the stops in the"},{"text":" ","type":"text"},{"text":"second argument.","type":"text"}]},{"inlineContent":[{"text":"The second argument is an ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" object representing the"},{"type":"text","text":" "},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"text":" ","type":"text"},{"text":"values.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The output value of the stop whose key is just less than the evaluated target,"},{"type":"text","text":" "},{"type":"text","text":"or the minimum value if the target is less than the least of the stops’ keys."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"text":" ","type":"text"},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"text":" ","type":"text"},{"text":"values may be constant values or ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" objects. For example, you can"},{"text":" ","type":"text"},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"type":"text","text":" "},{"text":"yellow, orange, and red as the values.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"stringByAppendingString:","type":"heading","level":3,"anchor":"stringByAppendingString"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"stringByAppendingString:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" "},{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a string.","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"One or more "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a string."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The target string with each of the argument strings appended in order."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]"},{"text":" ","type":"text"},{"type":"text","text":"method and is similar to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_join-code","isActive":true},{"text":" function, which concatenates multiple","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expressions and is used on its own without the "},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}]},{"anchor":"stringValue","text":"stringValue","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"stringValue","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION(ele, 'stringValue')","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"text":" ","type":"text"},{"text":"string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"None."}]},{"inlineContent":[{"type":"text","text":"A string representation of the target:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is ","type":"text"},{"type":"text","text":"NIL"},{"type":"text","text":", the result is the empty string."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a Boolean value, the result is the string ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" or "},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"If the target is a number, it is converted to a string as specified by the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"“"},{"isActive":true,"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type"},{"type":"text","text":"”"},{"type":"text","text":" "},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the target is a color, it is converted to a string of the form","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"rgba(r,g,b,a)"},{"type":"text","text":", where "},{"type":"text","text":"r"},{"type":"text","text":", "},{"type":"text","text":"g"},{"type":"text","text":", and "},{"type":"text","text":"b"},{"type":"text","text":" are"},{"text":" ","type":"text"},{"text":"numerals ranging from 0 to 255 and ","type":"text"},{"type":"text","text":"a"},{"type":"text","text":" ranges from 0 to 1."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Otherwise, the target is converted to a string in the format specified by the"},{"type":"text","text":" "},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"function of the ECMAScript Language Specification.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. You can also cast a value to a","type":"text"},{"type":"text","text":" "},{"text":"string by passing the value and the string ","type":"text"},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" into the "},{"code":"CAST()","type":"codeVoice"},{"text":" ","type":"text"},{"text":"operator.","type":"text"}]}]}],"kind":"article","sections":[],"seeAlsoSections":[{"title":"Other Articles","identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"],"generated":true}],"variants":[{"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"],"traits":[{"interfaceLanguage":"occ"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"MapLibre"}],"title":"Predicates and expressions"},"abstract":[{"type":"text","text":"Using "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" with MapLibre iOS"}],"references":{"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"link","title":"Predicate Programming Guide","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","titleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}]},"#code-mgl_does-have-code":{"title":"mgl_does:have:","identifier":"#code-mgl_does-have-code","type":"link","url":"#code-mgl_does-have-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_does:have:"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"title":"Info.plist Keys","type":"topic","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","kind":"article","abstract":[{"type":"text","text":"MapLibre Native for iOS supports custom "},{"type":"codeVoice","code":"Info.plist"},{"text":" keys in your application in order to configure various settings.","type":"text"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"url":"\/documentation\/maplibre\/mlnpolyline","role":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","title":"MLNPolyline","fragments":[{"text":"MLNPolyline","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"An "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","type":"reference","isActive":true},{"type":"text","text":" object represents a shape consisting of two or more vertices,"},{"text":" ","type":"text"},{"type":"text","text":"specified as "},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"text":" instances, and the line segments that","type":"text"},{"type":"text","text":" "},{"text":"connect them. For example, you could use an polyline to represent a road or the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"path along which something moves."}]},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","type":"link","title":"NumberToString","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","titleInlineContent":[{"type":"text","text":"NumberToString"}]},"#using-expressions-to-configure-layout-and-paint-attributes":{"title":"inside an expression","identifier":"#using-expressions-to-configure-layout-and-paint-attributes","type":"link","url":"#using-expressions-to-configure-layout-and-paint-attributes","titleInlineContent":[{"type":"text","text":"inside an expression"}]},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","type":"link","title":"match","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","titleInlineContent":[{"type":"codeVoice","code":"match"}]},"#code-mgl_stepwithminimum-stops-code":{"title":"mgl_stepWithMinimum:stops:","identifier":"#code-mgl_stepwithminimum-stops-code","type":"link","url":"#code-mgl_stepwithminimum-stops-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}]},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","type":"link","title":"log2","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","titleInlineContent":[{"type":"codeVoice","code":"log2"}]},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"title":"acos","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","titleInlineContent":[{"type":"codeVoice","code":"acos"}]},"https://maplibre.org/maplibre-style-spec/expressions/":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","type":"link","title":"MapLibre Style Spec","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","titleInlineContent":[{"type":"text","text":"MapLibre Style Spec"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"url":"\/documentation\/maplibre\/mlnpolygon","abstract":[{"type":"text","text":"An "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon"},{"type":"text","text":" object represents a closed shape consisting of four or more"},{"text":" ","type":"text"},{"type":"text","text":"vertices, specified as "},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"text":" instances, and the edges that","type":"text"},{"type":"text","text":" "},{"text":"connect them. For example, you could use a polygon shape to represent a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"building, a lake, or an area you want to highlight."}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","title":"MLNPolygon","role":"symbol","kind":"symbol","fragments":[{"kind":"identifier","text":"MLNPolygon"}],"type":"topic"},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"title":"let","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","titleInlineContent":[{"type":"codeVoice","code":"let"}]},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","type":"link","title":"distance","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","titleInlineContent":[{"type":"codeVoice","code":"distance"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"kind":"article","title":"Adding Multiple Images","url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample","abstract":[{"text":"Adding images to the map and assigning them to POI types","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","type":"topic","role":"article"},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"title":"mgl_interpolateWithCurveType:parameters:stops:","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","type":"link","url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}]},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","type":"link","title":"asin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","titleInlineContent":[{"type":"codeVoice","code":"asin"}]},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"title":"NSExpression+MLNAdditions.h","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","type":"link","url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","titleInlineContent":[{"type":"codeVoice","code":"NSExpression+MLNAdditions.h"}]},"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","type":"link","title":"kernel density estimation","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","titleInlineContent":[{"type":"text","text":"kernel density estimation"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"kind":"article","title":"Tile URL Templates","url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates","abstract":[{"text":"Using URL Templates when defining tile sources","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","type":"topic","role":"article"},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"title":"coalesce","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","titleInlineContent":[{"type":"codeVoice","code":"coalesce"}]},"#code-mgl_join-code":{"url":"#code-mgl_join-code","type":"link","title":"mgl_join:","identifier":"#code-mgl_join-code","titleInlineContent":[{"type":"codeVoice","code":"mgl_join:"}]},"https://tc39.github.io/ecma262/#sec-json.stringify":{"title":"JSON.stringify()","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","type":"link","url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","titleInlineContent":[{"type":"codeVoice","code":"JSON.stringify()"}]},"#code-mgl_function-code":{"url":"#code-mgl_function-code","type":"link","title":"MLN_FUNCTION()","identifier":"#code-mgl_function-code","titleInlineContent":[{"type":"codeVoice","code":"MLN_FUNCTION()"}]},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"title":"tan","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","titleInlineContent":[{"code":"tan","type":"codeVoice"}],"type":"link"},"#code-mgl_has-code":{"type":"link","identifier":"#code-mgl_has-code","title":"mgl_has:","titleInlineContent":[{"code":"mgl_has:","type":"codeVoice"}],"url":"#code-mgl_has-code"},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"title":"mgl_interpolate:withCurveType:parameters:stops:","url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","titleInlineContent":[{"code":"mgl_interpolate:withCurveType:parameters:stops:","type":"codeVoice"}],"type":"link"},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","role":"symbol","title":"MLNShapeSource","abstract":[{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true,"type":"reference"},{"type":"text","text":" is a map content source that supplies vector shapes to be"},{"text":" ","type":"text"},{"type":"text","text":"shown on the map. The shapes may be instances of "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","type":"reference","isActive":true},{"text":" or ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"or they may be defined by local or external","type":"text"},{"text":" ","type":"text"},{"text":"GeoJSON","type":"text"},{"text":" code. A shape source is added to an","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","type":"reference"},{"text":" object along with an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle"},{"type":"text","text":" object. The vector style"},{"text":" ","type":"text"},{"type":"text","text":"layer defines the appearance of any content supplied by the shape source. You"},{"type":"text","text":" "},{"type":"text","text":"can update a shape source by setting its "},{"type":"codeVoice","code":"shape"},{"text":" or ","type":"text"},{"code":"URL","type":"codeVoice"},{"text":" property.","type":"text"}],"kind":"symbol","url":"\/documentation\/maplibre\/mlnshapesource","fragments":[{"text":"MLNShapeSource","kind":"identifier"}],"type":"topic"},"#MapLibre-specific-functions":{"type":"link","identifier":"#MapLibre-specific-functions","title":"MapLibre-specific functions","titleInlineContent":[{"text":"MapLibre-specific functions","type":"text"}],"url":"#MapLibre-specific-functions"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"title":"has","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","titleInlineContent":[{"code":"has","type":"codeVoice"}],"type":"link"},"#code-mgl_if-code":{"type":"link","identifier":"#code-mgl_if-code","title":"MLN_IF()","titleInlineContent":[{"code":"MLN_IF()","type":"codeVoice"}],"url":"#code-mgl_if-code"},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"title":"concat","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","titleInlineContent":[{"code":"concat","type":"codeVoice"}],"type":"link"},"#code-mgl_let-code":{"type":"link","identifier":"#code-mgl_let-code","title":"MLN_LET","titleInlineContent":[{"code":"MLN_LET","type":"codeVoice"}],"url":"#code-mgl_let-code"},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"title":"interpolate","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","titleInlineContent":[{"code":"interpolate","type":"codeVoice"}],"type":"link"},"doc://org.swift.MyProject/documentation/MapLibre":{"url":"\/documentation\/maplibre","role":"collection","abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}],"kind":"symbol","title":"MapLibre","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre"},"#variables":{"type":"link","identifier":"#variables","title":"variables","titleInlineContent":[{"text":"variables","type":"text"}],"url":"#variables"},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"title":"ToNumber Applied to the String Type","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","titleInlineContent":[{"text":"ToNumber Applied to the String Type","type":"text"}],"type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","title":"step","titleInlineContent":[{"code":"step","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"role":"symbol","fragments":[{"text":"lineGradient","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","abstract":[{"type":"text","text":"The color gradient with which the line will be drawn. This property only has an"},{"type":"text","text":" "},{"type":"text","text":"effect on lines defined by an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource"},{"type":"text","text":" whose "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"option is set to "},{"type":"codeVoice","code":"YES"},{"text":".","type":"text"}],"title":"lineGradient","kind":"symbol","url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"title":"to-number","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","titleInlineContent":[{"code":"to-number","type":"codeVoice"}],"type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","title":"round","titleInlineContent":[{"code":"round","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"title":"cos","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","titleInlineContent":[{"code":"cos","type":"codeVoice"}],"type":"link"},"#code-stringbyappendingstring-code":{"type":"link","identifier":"#code-stringbyappendingstring-code","title":"stringByAppendingString:","titleInlineContent":[{"code":"stringByAppendingString:","type":"codeVoice"}],"url":"#code-stringbyappendingstring-code"},"#code-mgl_match-code":{"title":"MLN_MATCH()","url":"#code-mgl_match-code","identifier":"#code-mgl_match-code","titleInlineContent":[{"code":"MLN_MATCH()","type":"codeVoice"}],"type":"link"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","title":"functions predefined","titleInlineContent":[{"text":"functions predefined","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"kind":"article","title":"Information for Style Authors","url":"\/documentation\/maplibre-native-for-ios\/for_style_authors","abstract":[],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors","type":"topic","role":"article"},"https://github.com/maplibre/maplibre-native/issues/331":{"title":"#331","url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","titleInlineContent":[{"text":"#331","type":"text"}],"type":"link"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","title":"+[NSExpression expressionForFunction:arguments:] method","titleInlineContent":[{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"type":"text","text":" method"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init"},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"title":"atan","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","titleInlineContent":[{"code":"atan","type":"codeVoice"}],"type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","title":"sin","titleInlineContent":[{"code":"sin","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"kind":"article","title":"User Interactions","url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers","abstract":[{"text":"Learn how to work with gesture recognizers","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","type":"topic","role":"article"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"kind":"article","title":"Customizing Fonts","url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts","abstract":[{"type":"text","text":"Using custom fonts"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","type":"topic","role":"article"},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"title":"format","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","titleInlineContent":[{"code":"format","type":"codeVoice"}],"type":"link"},"#code-mgl_expressionwithcontext-code":{"type":"link","identifier":"#code-mgl_expressionwithcontext-code","title":"mgl_expressionWithContext:","titleInlineContent":[{"code":"mgl_expressionWithContext:","type":"codeVoice"}],"url":"#code-mgl_expressionwithcontext-code"},"#key-paths":{"title":"key paths","url":"#key-paths","identifier":"#key-paths","titleInlineContent":[{"text":"key paths","type":"text"}],"type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","title":"to-string","titleInlineContent":[{"code":"to-string","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string"},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"title":"case","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","titleInlineContent":[{"code":"case","type":"codeVoice"}],"type":"link"}}}