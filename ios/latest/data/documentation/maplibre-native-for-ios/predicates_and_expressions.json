{"abstract":[{"type":"text","text":"Using "},{"type":"codeVoice","code":"NSPredicate"},{"text":" with MapLibre iOS","type":"text"}],"kind":"article","metadata":{"role":"article","modules":[{"name":"MapLibre"}],"roleHeading":"Article","title":"Predicates and expressions"},"primaryContentSections":[{"content":[{"inlineContent":[{"type":"text","text":"Style layers use predicates and expressions to determine what to display and how"},{"text":" ","type":"text"},{"text":"to format it. ","type":"text"},{"inlineContent":[{"type":"text","text":"Predicates"}],"type":"emphasis"},{"text":" are represented by the same ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" class that"},{"type":"text","text":" "},{"type":"text","text":"filters results from Core Data or items in an "},{"type":"codeVoice","code":"NSArray"},{"type":"text","text":" in Objective-C."},{"text":" ","type":"text"},{"text":"Predicates are based on ","type":"text"},{"inlineContent":[{"text":"expressions","type":"text"}],"type":"emphasis"},{"type":"text","text":", represented by the "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" class."},{"text":" ","type":"text"},{"type":"text","text":"Somewhat unusually, style layers also use expressions on their own."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This document discusses the specific subset of the predicate and expression"},{"text":" ","type":"text"},{"text":"syntax supported by this SDK. For a more general introduction to predicates and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expressions, consult the"},{"type":"text","text":" "},{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"in Apple developer documentation. For additional detail on how this SDK has"},{"type":"text","text":" "},{"type":"text","text":"extended the "},{"type":"codeVoice","code":"NSExpression"},{"text":" class, see the ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","type":"reference"},{"type":"text","text":" header."}]},{"anchor":"Using-predicates-to-filter-vector-data","text":"Using predicates to filter vector data","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most style layer classes display "},{"code":"MLNFeature","type":"codeVoice"},{"type":"text","text":" objects that you can show or hide"},{"text":" ","type":"text"},{"type":"text","text":"based on the feature’s attributes. Use the "},{"code":"MLNVectorStyleLayer.predicate","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"property to include only the features in the source layer that satisfy a"},{"text":" ","type":"text"},{"text":"condition that you define.","type":"text"}]},{"level":3,"text":"Operators","type":"heading","anchor":"Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following comparison operators are supported:"}]},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key = value"},{"type":"codeVoice","code":"key == value"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSGreaterThanOrEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key >= value"},{"code":"key => value","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSLessThanOrEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key <= value"},{"type":"codeVoice","code":"key =< value"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSGreaterThanPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"key > value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSLessThanPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"key < value"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"key != value"},{"code":"key <> value","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSBetweenPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"code":"key BETWEEN { 32, 212 }","type":"codeVoice"}],"type":"paragraph"}]]]},{"inlineContent":[{"type":"text","text":"To test whether a feature has or lacks a specific attribute, compare the"},{"type":"text","text":" "},{"type":"text","text":"attribute to "},{"code":"NULL","type":"codeVoice"},{"type":"text","text":" or "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":". Predicates created using the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSPredicate predicateWithValue:]"},{"type":"text","text":" method are also supported. String"},{"text":" ","type":"text"},{"text":"operators and custom operators are not supported.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following compound operators are supported:"}]},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSCompoundPredicateType"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAndPredicateType"}]}],[{"inlineContent":[{"code":"predicate1 AND predicate2","type":"codeVoice"},{"code":"predicate1 && predicate2","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSOrPredicateType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"predicate1 OR predicate2"},{"type":"text","text":"predicate1 || predicate2"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotPredicateType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NOT predicate"},{"code":"!predicate","type":"codeVoice"}]}]]],"type":"table"},{"inlineContent":[{"type":"text","text":"The following aggregate operators are supported:"}],"type":"paragraph"},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSInPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSContainsPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key","type":"codeVoice"}]}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"text":"You can use the ","type":"text"},{"type":"codeVoice","code":"IN"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CONTAINS"},{"type":"text","text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature ("},{"code":"SELF","type":"codeVoice"},{"text":") lies within a given ","type":"text"},{"code":"MLNShape","type":"codeVoice"},{"type":"text","text":" or "},{"code":"MLNFeature","type":"codeVoice"},{"text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:","type":"text"}]},{"syntax":"objc","type":"codeListing","code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"]},{"syntax":"swift","code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The following combinations of comparison operators and modifiers are supported:","type":"text"}]},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateModifier"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSAllPredicateModifier","type":"codeVoice"}]}],[{"inlineContent":[{"code":"NSNotEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"ALL haystack != needle"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSAnyPredicateModifier","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ANY haystack = needle"},{"type":"codeVoice","code":"SOME haystack = needle"}]}]]]},{"inlineContent":[{"type":"text","text":"The following comparison predicate options are supported for comparison and"},{"type":"text","text":" "},{"text":"aggregate operators that are used in the predicate:","type":"text"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateOptions"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSCaseInsensitivePredicateOption"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"'QUEBEC' =[c] 'Quebec'"}]}]],[[{"inlineContent":[{"code":"NSDiacriticInsensitivePredicateOption","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"'Québec' =[d] 'Quebec'"}]}]]],"type":"table","header":"row"},{"inlineContent":[{"type":"text","text":"Other comparison predicate options are unsupported, namely "},{"type":"codeVoice","code":"l"},{"text":" ","type":"text"},{"text":"(for locale sensitivity) and ","type":"text"},{"type":"codeVoice","code":"n"},{"text":" (for normalization). A comparison is","type":"text"},{"type":"text","text":" "},{"text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison","type":"text"},{"type":"text","text":" "},{"type":"text","text":"predicate options are not supported in conjunction with comparison modifiers"},{"text":" ","type":"text"},{"type":"text","text":"like "},{"code":"ALL","type":"codeVoice"},{"type":"text","text":" and "},{"code":"ANY","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Operands","type":"heading","text":"Operands"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Operands in predicates can be "},{"type":"reference","isActive":true,"identifier":"#variables"},{"text":", ","type":"text"},{"identifier":"#key-paths","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"or almost anything else that can appear","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"#using-expressions-to-configure-layout-and-paint-attributes"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Automatic type casting is not performed. Therefore, a feature only matches a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"predicate if its value for the attribute in question is of the same type as the"},{"type":"text","text":" "},{"text":"value specified in the predicate. Use the ","type":"text"},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" operator to convert a key"},{"type":"text","text":" "},{"type":"text","text":"path or variable into a matching type:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast a value to a number, use "},{"code":"CAST(key, 'NSNumber')","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"To cast a value to a string, use "},{"type":"codeVoice","code":"CAST(key, 'NSString')"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"To cast a value to a color, use ","type":"text"},{"code":"CAST(key, 'UIColor')","type":"codeVoice"},{"type":"text","text":" on iOS and "},{"code":"CAST(key, 'NSColor')","type":"codeVoice"},{"text":" on macOS.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast an ","type":"text"},{"code":"NSColor","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" object to an array, use "},{"type":"codeVoice","code":"CAST(noindex(color), 'NSArray')"},{"type":"text","text":"."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"For details about the predicate format string syntax, consult the “Predicate","type":"text"},{"type":"text","text":" "},{"text":"Format String Syntax” chapter of the","type":"text"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","overridingTitle":"Predicate Programming Guide","overridingTitleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}],"type":"reference"}]},{"text":" ","type":"text"},{"type":"text","text":"in Apple developer documentation."}]},{"text":"Using expressions to configure layout and paint attributes","anchor":"Using-expressions-to-configure-layout-and-paint-attributes","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"An expression can contain subexpressions of various types. Each of the supported"},{"text":" ","type":"text"},{"type":"text","text":"types of expressions is discussed below."}],"type":"paragraph"},{"anchor":"Constant-values","text":"Constant values","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A constant value can be of any of the following types:","type":"text"}]},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Objective-C"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"text":" (iOS)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"text":" (iOS)","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSString"}]}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSString"}]}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSArray<NSNumber>"}]}],[{"type":"paragraph","inlineContent":[{"code":"[Float]","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSArray<NSString>"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"[String]"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.CGVectorValue"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue"},{"text":" containing ","type":"text"},{"code":"CGVector","type":"codeVoice"},{"text":" (macOS)","type":"text"}]}],[{"inlineContent":[{"code":"NSValue.cgVectorValue","type":"codeVoice"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue"},{"text":" containing ","type":"text"},{"code":"CGVector","type":"codeVoice"},{"text":" (macOS)","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.UIEdgeInsetsValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"type":"text","text":" (macOS)"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSValue.uiEdgeInsetsValue"},{"text":" (iOS)","type":"text"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"text":" (macOS)","type":"text"}],"type":"paragraph"}]]],"type":"table"},{"inlineContent":[{"text":"For literal floating-point values, use ","type":"text"},{"type":"codeVoice","code":"-[NSNumber numberWithDouble:]"},{"text":" instead","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of "},{"code":"-[NSNumber numberWithFloat:]","type":"codeVoice"},{"type":"text","text":" to avoid precision issues."}],"type":"paragraph"},{"type":"heading","text":"Key paths","anchor":"Key-paths","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"A key path expression refers to an attribute of the "},{"type":"codeVoice","code":"MLNFeature"},{"text":" object being","type":"text"},{"type":"text","text":" "},{"text":"evaluated for display. For example, if a polygon’s ","type":"text"},{"type":"codeVoice","code":"MLNFeature.attributes"},{"text":" ","type":"text"},{"type":"text","text":"dictionary contains the "},{"code":"floorCount","type":"codeVoice"},{"text":" key, then the key path ","type":"text"},{"code":"floorCount","type":"codeVoice"},{"text":" refers","type":"text"},{"type":"text","text":" "},{"text":"to the value of the ","type":"text"},{"code":"floorCount","type":"codeVoice"},{"text":" attribute when evaluating that particular","type":"text"},{"text":" ","type":"text"},{"text":"polygon.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The following special attributes are also available on features that are produced"},{"text":" ","type":"text"},{"text":"as a result of clustering multiple point features together in a shape source:","type":"text"}],"type":"paragraph"},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attribute"}]}],[{"inlineContent":[{"text":"Type","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Meaning"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"cluster"}]}],[{"inlineContent":[{"text":"Bool","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster."}]}]],[[{"inlineContent":[{"type":"text","text":"cluster_id"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Identifier for the point cluster.","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"point_count"}]}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"The number of point features in a given cluster."}],"type":"paragraph"}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some characters may not be used directly as part of a key path in a format"},{"type":"text","text":" "},{"type":"text","text":"string. For example, if a feature’s attribute is named "},{"type":"codeVoice","code":"ISO 3166-1:2006"},{"text":", an","type":"text"},{"type":"text","text":" "},{"text":"expression format string of ","type":"text"},{"type":"codeVoice","code":"lowercase(ISO 3166-1:2006)"},{"text":" or a predicate format","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string of "},{"type":"codeVoice","code":"ISO 3166-1:2006 == 'US-OH'"},{"type":"text","text":" would raise an exception. Instead, use a"},{"text":" ","type":"text"},{"type":"codeVoice","code":"%K"},{"text":" placeholder or the ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForKeyPath:]"},{"text":" initializer:","type":"text"}]},{"syntax":"objc","type":"codeListing","code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"]},{"code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"],"type":"codeListing","syntax":"swift"},{"anchor":"Functions","level":3,"type":"heading","text":"Functions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},{"text":" ","type":"text"},{"type":"text","text":"by the"},{"text":" ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","type":"reference","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"the following subset is supported in layer attribute values:","type":"text"}]},{"rows":[[[{"inlineContent":[{"type":"text","text":"Initializer parameter"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"average:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"average({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"sum:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"sum({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"count:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"count({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"inlineContent":[{"code":"min:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"min({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"max:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"max({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"add:to:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"1 + 2"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"from:subtract:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"2 - 1"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"multiply:by:"}]}],[{"inlineContent":[{"code":"1 * 2","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"divide:by:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"1 \/ 2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:"}]}],[{"inlineContent":[{"code":"modulus:by:(1, 2)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"sqrt:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt(2)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"log:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"log(10)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ln:"}]}],[{"type":"paragraph","inlineContent":[{"code":"ln(2)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"raise:toPower:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"2 ** 2"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"exp:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"exp(0)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"ceiling:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"ceiling(0.99999)","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"abs:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"abs(-1)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"trunc:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"trunc(6378.1370)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"floor:"}]}],[{"type":"paragraph","inlineContent":[{"code":"floor(-0.99999)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"uppercase:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"uppercase('Elysian Fields')","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"lowercase:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"lowercase('DOWNTOWN')","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"noindex:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"noindex(0 + 2 + c)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"length:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"length('Wapakoneta')","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"castObject:toType:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"CAST(ele, 'NSString')"},{"code":"CAST(ele, 'NSNumber')","type":"codeVoice"}],"type":"paragraph"}]]],"type":"table","header":"row"},{"inlineContent":[{"type":"text","text":"A number of "},{"type":"reference","isActive":true,"identifier":"#MapLibre-specific-functions"},{"text":" are also","type":"text"},{"type":"text","text":" "},{"type":"text","text":"available."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following predefined functions are "},{"inlineContent":[{"type":"text","text":"not"}],"type":"strong"},{"type":"text","text":" supported:"}],"type":"paragraph"},{"header":"row","rows":[[[{"inlineContent":[{"text":"Initializer parameter","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"median:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"median({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"mode:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"mode({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"stddev:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"stddev({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"random"}]}],[{"type":"paragraph","inlineContent":[{"code":"random()","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"randomn:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"randomn(10)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"now","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"now()","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:(5, 3)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:(5, 3)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:"}]}],[{"type":"paragraph","inlineContent":[{"code":"bitwiseXor:with:(5, 3)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"leftshift:by:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"leftshift:by:(23, 1)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rightshift:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rightshift:by:(23, 1)"}]}]],[[{"inlineContent":[{"code":"onesComplement:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"onesComplement(255)"}]}]],[[{"inlineContent":[{"code":"distanceToLocation:fromLocation:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:(there, here)"}],"type":"paragraph"}]]],"type":"table"},{"text":"Conditionals","anchor":"Conditionals","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Conditionals are supported via the built-in","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"type":"text","text":" "},{"type":"text","text":"method and "},{"code":"TERNARY()","type":"codeVoice"},{"text":" operator. If you need to express multiple cases","type":"text"},{"type":"text","text":" "},{"text":"(“else-if”), you can either nest a conditional within a conditional or use the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_if-code"},{"text":" or ","type":"text"},{"identifier":"#code-mgl_match-code","type":"reference","isActive":true},{"type":"text","text":" function."}]},{"level":3,"text":"Aggregates","type":"heading","anchor":"Aggregates"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Aggregate expressions can contain arrays of expressions. In some cases, it is"},{"type":"text","text":" "},{"text":"possible to use the array itself instead of wrapping the array in an aggregate","type":"text"},{"text":" ","type":"text"},{"text":"expression.","type":"text"}]},{"anchor":"Variables","level":3,"text":"Variables","type":"heading"},{"inlineContent":[{"type":"text","text":"The following variables are defined by this SDK for use with style layers:"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Variable"}]}],[{"type":"paragraph","inlineContent":[{"text":"Type","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Meaning","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"$featureIdentifier","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Any GeoJSON data type"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.featureIdentifierVariableExpression"},{"type":"text","text":" property."}]}]],[[{"inlineContent":[{"code":"$geometryType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"String"}]}],[{"inlineContent":[{"text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:","type":"text"},{"text":"*   ","type":"text"},{"type":"codeVoice","code":"Point"},{"text":" for point features, corresponding to the ","type":"text"},{"type":"codeVoice","code":"MLNPointAnnotation"},{"text":" class","type":"text"},{"type":"text","text":"*   "},{"code":"LineString","type":"codeVoice"},{"type":"text","text":" for polyline features, corresponding to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline"},{"type":"text","text":" class"},{"type":"text","text":"*   "},{"code":"Polygon","type":"codeVoice"},{"type":"text","text":" for polygon features, corresponding to the "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true},{"type":"text","text":" class"},{"text":"This variable corresponds to the ","type":"text"},{"code":"NSExpression.geometryTypeVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"$heatmapDensity","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"inlineContent":[{"text":"The ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},{"type":"text","text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the "},{"type":"codeVoice","code":"heatmapColor"},{"type":"text","text":" property. This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.heatmapDensityVariableExpression"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"$zoomLevel"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"inlineContent":[{"text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.zoomLevelVariableExpression"},{"text":" property.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"$lineProgress"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","type":"reference"},{"text":" property. It corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.lineProgressVariableExpression"},{"text":" property.","type":"text"}],"type":"paragraph"}]]],"type":"table","header":"row"},{"inlineContent":[{"type":"text","text":"In addition to these variables, you can define your own variables and refer to"},{"type":"text","text":" "},{"text":"them elsewhere in the expression. The syntax for defining a variable makes use","type":"text"},{"text":" ","type":"text"},{"text":"of a ","type":"text"},{"type":"reference","identifier":"#MapLibre-specific-functions","isActive":true,"overridingTitle":"MapLibre-specific function","overridingTitleInlineContent":[{"type":"text","text":"MapLibre-specific function"}]},{"type":"text","text":" that takes an"},{"text":" ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"text":" as an argument:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"],"syntax":"objc"},{"code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"],"type":"codeListing","syntax":"swift"},{"text":"MapLibre-specific functions","anchor":"MapLibre-specific-functions","level":2,"type":"heading"},{"name":"Warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to a change in iOS 15.5, some of these stopped working. See "},{"type":"reference","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","isActive":true},{"type":"text","text":" for more information and workarounds."}]}],"type":"aside","style":"warning"},{"inlineContent":[{"type":"text","text":"For compatibility with the MapLibre Style Spec, the following functions"},{"text":" ","type":"text"},{"type":"text","text":"are defined by this SDK. When setting a style layer property, you can call these"},{"type":"text","text":" "},{"text":"functions just like the predefined functions above, using either the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"type":"text","text":" method or a convenient format"},{"type":"text","text":" "},{"type":"text","text":"string syntax:"}],"type":"paragraph"},{"level":3,"text":"mgl_does:have:","type":"heading","anchor":"mgldoeshave"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_does:have:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_does:have:(SELF, '🧀🍔')"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"mgl_does:have:(%@, '🧀🍔')"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns a Boolean value indicating whether the dictionary has a value for the"},{"text":" ","type":"text"},{"text":"key or whether the evaluated object (","type":"text"},{"code":"SELF","type":"codeVoice"},{"text":") has a value for the feature","type":"text"},{"type":"text","text":" "},{"text":"attribute. Compared to the ","type":"text"},{"identifier":"#code-mgl_has-code","isActive":true,"type":"reference"},{"type":"text","text":" custom function,"},{"type":"text","text":" "},{"text":"that function’s target is instead passed in as the first argument to this","type":"text"},{"text":" ","type":"text"},{"text":"function. Both functions are equivalent to the syntax ","type":"text"},{"type":"codeVoice","code":"key != NIL"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"codeVoice","code":"%@[key] != NIL"},{"text":" but can be used outside of a predicate.","type":"text"}]},{"text":"mgl_interpolate:withCurveType:parameters:stops:","anchor":"mglinterpolatewithCurveTypeparametersstops","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_interpolate:withCurveType:parameters:stops:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Produces continuous, smooth results by interpolating between pairs of input and"},{"type":"text","text":" "},{"type":"text","text":"output values (“stops”). Compared to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"custom function, the input expression (that function’s target) is instead passed"},{"text":" ","type":"text"},{"type":"text","text":"in as the first argument to this function."}]},{"text":"mgl_step:from:stops:","type":"heading","level":3,"anchor":"mglstepfromstops"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_step:from:stops:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_step:from:stops:(x, 11, %@)"}]},{"type":"paragraph","inlineContent":[{"text":"Produces discrete, stepped results by evaluating a piecewise-constant function","type":"text"},{"type":"text","text":" "},{"text":"defined by pairs of input and output values (“stops”). Compared to the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-mgl_stepwithminimum-stops-code","type":"reference","isActive":true},{"type":"text","text":" custom"},{"text":" ","type":"text"},{"text":"function, the input expression (that function’s target) is instead passed in as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the first argument to this function."}]},{"text":"mgl_join:","anchor":"mgljoin","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_join:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_join({'Old', 'MacDonald'})"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the result of concatenating together all the elements of an array in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"order. Compared to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-stringbyappendingstring-code","isActive":true},{"type":"text","text":" custom"},{"type":"text","text":" "},{"type":"text","text":"function, this function takes only one argument, which is an aggregate"},{"text":" ","type":"text"},{"type":"text","text":"expression containing the strings to concatenate."}]},{"anchor":"mglacos","text":"mgl_acos:","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_acos:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_acos(1)","type":"codeVoice"}]},{"inlineContent":[{"type":"text","text":"Returns the arccosine of the number."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"mglasin","text":"mgl_asin:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_asin:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_asin(0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the arcsine of the number.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"mgl_atan:","type":"heading","level":3,"anchor":"mglatan"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_atan:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_atan(20)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the arctangent of the number."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"text":"mgl_cos:","anchor":"mglcos","type":"heading"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_cos:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_cos(0)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the cosine of the number.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"mgllog2","text":"mgl_log2:","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_log2:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_log2(1024)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the base-2 logarithm of the number."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_round:","level":3,"type":"heading","anchor":"mglround"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_round:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_round(1.5)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the number rounded to the nearest integer. If the number is halfway","type":"text"},{"text":" ","type":"text"},{"text":"between two integers, this function rounds it away from zero.","type":"text"}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"mgl_sin:","level":3,"anchor":"mglsin"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_sin:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_sin(0)"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the sine of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","anchor":"mgltan","text":"mgl_tan:","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_tan:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_tan(0)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the tangent of the number."}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_distanceFrom:","anchor":"mgldistanceFrom","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_distanceFrom:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_distanceFrom(%@)"},{"text":" with an ","type":"text"},{"type":"codeVoice","code":"MLNShape"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the straight-line distance from the evaluated object to the given shape.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"level":3,"text":"mgl_coalesce:","anchor":"mglcoalesce","type":"heading"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_coalesce:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_coalesce({x, y, z})","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the first non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" value from an array of expressions.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"anchor":"mglattributed","text":"mgl_attributed:","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_attributed:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_attributed({x, y, z})","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Concatenates and returns the array of "},{"code":"MLNAttributedExpression","type":"codeVoice"},{"type":"text","text":" objects, for use"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"code":"MLNSymbolStyleLayer.text","type":"codeVoice"},{"text":" property.","type":"text"}]},{"inlineContent":[{"type":"codeVoice","code":"MLNAttributedExpression.attributes"},{"text":" valid attributes.","type":"text"}],"type":"paragraph"},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Key"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Value Type"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"MLNFontNamesAttribute"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"type":"codeVoice","code":"NSString"},{"text":" array.","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontScaleAttribute"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" evaluating to an "},{"type":"codeVoice","code":"NSNumber"},{"text":" value.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"MLNFontColorAttribute","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS) or "},{"type":"codeVoice","code":"NSColor"},{"text":" (macOS).","type":"text"}]}]]],"header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","text":"MLN_LET","level":3,"anchor":"MLNLET"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_LET:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" Any number of variable names interspersed with their assigned"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSExpression"},{"text":" values, followed by an ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" ","type":"text"},{"text":"that may contain references to those variables.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the result of evaluating an expression with the given variable values."},{"text":" ","type":"text"},{"type":"text","text":"Compared to the"},{"text":" ","type":"text"},{"identifier":"#code-mgl_expressionwithcontext-code","type":"reference","isActive":true},{"text":" custom","type":"text"},{"text":" ","type":"text"},{"text":"function, this function takes the variable names and values inline before the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression that contains references to those variables."}],"type":"paragraph"},{"type":"heading","text":"MLN_MATCH","anchor":"MLNMATCH","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_MATCH:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" An input expression, then any number of argument pairs, followed by a default","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression. Each argument pair consists of a constant value followed by an"},{"text":" ","type":"text"},{"type":"text","text":"expression to produce as a result of matching that constant value."},{"type":"text","text":" "},{"type":"text","text":"If the input value is an aggregate expression, then any of the constant values within"},{"type":"text","text":" "},{"text":"that aggregate expression result in the following argument. This is shorthand for","type":"text"},{"type":"text","text":" "},{"text":"specifying an argument pair for each of the constant values within that aggregate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression. It is not possible to match the aggregate expression itself."}]},{"inlineContent":[{"type":"text","text":"Returns the result of matching the input expression against the given constant"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"MLN_IF","anchor":"MLNIF","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_IF:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" Alternating ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" conditionals and resulting expressions,"},{"type":"text","text":" "},{"text":"followed by a default expression.","type":"text"}]},{"inlineContent":[{"text":"Returns the first expression that meets the condition; otherwise, the default","type":"text"},{"text":" ","type":"text"},{"text":"value. Unlike","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"text":" or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"TERNARY()","type":"codeVoice"},{"text":" syntax, this function can accept multiple “if else” conditions","type":"text"},{"type":"text","text":" "},{"text":"and is supported on iOS 8.","type":"text"},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"text":" and macOS 10.10.","type":"text"},{"inlineContent":[{"text":"x","type":"text"}],"type":"emphasis"},{"text":"; however, each conditional","type":"text"},{"type":"text","text":" "},{"text":"passed into this function must be wrapped in a constant expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"anchor":"MLNFUNCTION","type":"heading","text":"MLN_FUNCTION","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_FUNCTION:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_FUNCTION('typeof', mystery)"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" Any arguments required by the expression operator.","type":"text"}]},{"inlineContent":[{"type":"text","text":"An expression exactly as defined by the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"text":"Custom functions","type":"heading","anchor":"Custom-functions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following custom functions are also available with the"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForFunction:selectorName:arguments:]","type":"codeVoice"},{"type":"text","text":" method or the"},{"text":" ","type":"text"},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" format string syntax."}]},{"inlineContent":[{"text":"Some of these functions are defined as methods on their respective target","type":"text"},{"type":"text","text":" "},{"type":"text","text":"classes, but you should not call them directly outside the context of an"},{"text":" ","type":"text"},{"type":"text","text":"expression, because the result may differ from the evaluated expression’s result"},{"type":"text","text":" "},{"type":"text","text":"or may result in undefined behavior."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The MapLibre Style Spec defines some operators for which no custom"},{"text":" ","type":"text"},{"type":"text","text":"function is available. To use these operators in an "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":", call the"},{"text":" ","type":"text"},{"identifier":"#code-mgl_function-code","type":"reference","isActive":true},{"text":" function with the same arguments","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that the operator expects."}],"type":"paragraph"},{"anchor":"boolValue","text":"boolValue","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"boolValue","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(1, 'boolValue')"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a number or string.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" None.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A Boolean representation of the target: "},{"code":"FALSE","type":"codeVoice"},{"type":"text","text":" when then input is an"},{"type":"text","text":" "},{"type":"text","text":"empty string, 0, "},{"code":"FALSE","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"NIL"},{"text":", or ","type":"text"},{"code":"NaN","type":"codeVoice"},{"text":", otherwise ","type":"text"},{"type":"codeVoice","code":"TRUE"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"mglhas","level":3,"text":"mgl_has:"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_has:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to an "},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" "},{"type":"text","text":"or the evaluated object ("},{"code":"SELF","type":"codeVoice"},{"text":").","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to an ","type":"text"},{"type":"codeVoice","code":"NSString"},{"text":" ","type":"text"},{"text":"representing the key to look up in the dictionary or the feature attribute to","type":"text"},{"text":" ","type":"text"},{"text":"look up in the evaluated object (see ","type":"text"},{"type":"codeVoice","code":"MLNFeature.attributes"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"code":"true","type":"codeVoice"},{"type":"text","text":" if the dictionary has a value for the key or if the evaluated"},{"type":"text","text":" "},{"type":"text","text":"object has a value for the feature attribute."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_does-have-code"},{"text":" function, which is used on its own","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"without the "},{"type":"codeVoice","code":"FUNCTION()"},{"text":" operator. You can also check whether an object has an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"attribute by comparing the key path to "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":", for example "},{"code":"cheeseburger != NIL","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"or "},{"type":"codeVoice","code":"burger.cheese != NIL"}],"type":"paragraph"},{"text":"mgl_expressionWithContext:","type":"heading","anchor":"mglexpressionWithContext","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_expressionWithContext:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)"},{"type":"text","text":" with"},{"text":" ","type":"text"},{"text":"a dictionary containing ","type":"text"},{"type":"codeVoice","code":"ios"},{"type":"text","text":" and "},{"code":"macos","type":"codeVoice"},{"text":" keys","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that may contain references to the variables"},{"type":"text","text":" "},{"text":"defined in the context dictionary.","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" An "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" with "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":"s as keys and"},{"type":"text","text":" "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s as values. Each key is a variable name and each"},{"type":"text","text":" "},{"type":"text","text":"value is the variable’s value within the target expression."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The target expression with variable subexpressions replaced with the values"},{"type":"text","text":" "},{"type":"text","text":"defined in the context dictionary."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-mgl_let-code","isActive":true},{"text":" function, which is used on its own without the","type":"text"},{"type":"text","text":" "},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator.","type":"text"}]},{"anchor":"mglinterpolateWithCurveTypeparametersstops","text":"mgl_interpolateWithCurveType:parameters:stops:","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_interpolateWithCurveType:parameters:stops:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)"},{"type":"text","text":" "},{"text":"with a dictionary containing zoom levels or other constant values as keys","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a number and contains a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"variable or key path expression."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" The first argument is one of the following strings denoting curve types:","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"linear"},{"text":", ","type":"text"},{"type":"codeVoice","code":"exponential"},{"text":", or ","type":"text"},{"code":"cubic-bezier","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"The second argument is an expression providing parameters for the curve:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"linear"},{"type":"text","text":", the argument is "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"exponential"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"type":"text","text":"expression that evaluates to a number, specifying the base of the"},{"type":"text","text":" "},{"type":"text","text":"exponential interpolation."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the curve type is "},{"code":"cubic-bezier","type":"codeVoice"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"text":"array or aggregate expression containing four expressions, each","type":"text"},{"type":"text","text":" "},{"text":"evaluating to a number. The four numbers are control points for the","type":"text"},{"type":"text","text":" "},{"text":"cubic Bézier curve.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The third argument is an "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" object representing the"},{"text":" ","type":"text"},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values."}]},{"inlineContent":[{"text":"A value interpolated along the continuous mathematical function defined by the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"arguments, with the target as the input to the function."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"text":" ","type":"text"},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"text":" ","type":"text"},{"text":"values may be constant values or ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" objects. For example, you can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"type":"text","text":" "},{"text":"yellow, orange, and red as the values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code"},{"type":"text","text":" "},{"type":"text","text":"function, which is used on its own without the "},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator.","type":"text"}]},{"text":"mgl_numberWithFallbackValues:","type":"heading","level":3,"anchor":"mglnumberWithFallbackValues"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"floatValue"},{"type":"text","text":", or"},{"text":" ","type":"text"},{"code":"decimalValue","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" Zero or more "},{"type":"codeVoice","code":"NSExpression"},{"text":"s, each evaluating to a Boolean value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A numeric representation of the target:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"code":"NIL","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"FALSE","type":"codeVoice"},{"type":"text","text":", the result is 0."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"text":",","type":"text"},{"type":"text","text":" "},{"code":"floatValue","type":"codeVoice"},{"text":", or","type":"text"},{"type":"text","text":" "},{"code":"decimalValue","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"text":" ","type":"text"},{"type":"text","text":"string."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"Zero or more "},{"type":"codeVoice","code":"NSExpression"},{"text":"s, each evaluating to a Boolean value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A numeric representation of the target:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is ","type":"text"},{"code":"NIL","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"FALSE","type":"codeVoice"},{"type":"text","text":", the result is 0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"},{"text":" ","type":"text"},{"type":"text","text":"“"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","type":"reference","isActive":true},{"type":"text","text":"”"},{"type":"text","text":" "},{"text":"algorithm of the ECMAScript Language Specification.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If multiple values are provided, each one is evaluated in order until the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"first successful conversion is obtained."}]}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"type":"text","text":" "},{"text":"number by passing the value and the string ","type":"text"},{"code":"NSNumber","type":"codeVoice"},{"text":" into the ","type":"text"},{"type":"codeVoice","code":"CAST()"},{"text":" ","type":"text"},{"type":"text","text":"operator."}]},{"type":"heading","anchor":"mglstepWithMinimumstops","level":3,"text":"mgl_stepWithMinimum:stops:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_stepWithMinimum:stops:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)"},{"type":"text","text":" with"},{"type":"text","text":" "},{"type":"text","text":"a dictionary with zoom levels or other constant values as keys"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" "},{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a number and contains a"},{"type":"text","text":" "},{"type":"text","text":"variable or key path expression."}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"The first argument is an expression that evaluates to a number, specifying"},{"type":"text","text":" "},{"type":"text","text":"the minimum value in case the target is less than any of the stops in the"},{"text":" ","type":"text"},{"text":"second argument.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The second argument is an "},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" object representing the"},{"text":" ","type":"text"},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The output value of the stop whose key is just less than the evaluated target,"},{"type":"text","text":" "},{"text":"or the minimum value if the target is less than the least of the stops’ keys.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"type":"text","text":" "},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"text":" ","type":"text"},{"text":"values may be constant values or ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" objects. For example, you can","type":"text"},{"type":"text","text":" "},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"type":"text","text":" "},{"type":"text","text":"yellow, orange, and red as the values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]"},{"type":"text","text":" "},{"text":"method and the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"type":"heading","text":"stringByAppendingString:","anchor":"stringByAppendingString"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"stringByAppendingString:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"type":"text","text":" "},{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"One or more "},{"type":"codeVoice","code":"NSExpression"},{"text":"s, each evaluating to a string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The target string with each of the argument strings appended in order.","type":"text"}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]"},{"type":"text","text":" "},{"text":"method and is similar to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"#code-mgl_join-code"},{"type":"text","text":" function, which concatenates multiple"},{"type":"text","text":" "},{"type":"text","text":"expressions and is used on its own without the "},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"stringValue","level":3,"text":"stringValue"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"stringValue","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(ele, 'stringValue')"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"text":"string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" ","type":"text"},{"text":"None.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A string representation of the target:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is ","type":"text"},{"text":"NIL","type":"text"},{"text":", the result is the empty string.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"If the target is a Boolean value, the result is the string ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the target is a number, it is converted to a string as specified by the","type":"text"},{"type":"text","text":" "},{"text":"“","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type"},{"type":"text","text":"”"},{"text":" ","type":"text"},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a color, it is converted to a string of the form"},{"type":"text","text":" "},{"type":"codeVoice","code":"rgba(r,g,b,a)"},{"type":"text","text":", where "},{"text":"r","type":"text"},{"type":"text","text":", "},{"text":"g","type":"text"},{"text":", and ","type":"text"},{"text":"b","type":"text"},{"text":" are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"numerals ranging from 0 to 255 and "},{"text":"a","type":"text"},{"text":" ranges from 0 to 1.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Otherwise, the target is converted to a string in the format specified by the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify"},{"text":" ","type":"text"},{"type":"text","text":"function of the ECMAScript Language Specification."}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"text":" ","type":"text"},{"text":"string by passing the value and the string ","type":"text"},{"type":"codeVoice","code":"NSString"},{"text":" into the ","type":"text"},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" "},{"type":"text","text":"operator."}],"type":"paragraph"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"]}],"identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions","interfaceLanguage":"occ"},"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"],"title":"Other Articles","generated":true}],"references":{"#code-mgl_join-code":{"type":"link","url":"#code-mgl_join-code","title":"mgl_join:","titleInlineContent":[{"type":"codeVoice","code":"mgl_join:"}],"identifier":"#code-mgl_join-code"},"#MapLibre-specific-functions":{"type":"link","title":"MapLibre-specific functions","titleInlineContent":[{"type":"text","text":"MapLibre-specific functions"}],"url":"#MapLibre-specific-functions","identifier":"#MapLibre-specific-functions"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample","title":"Adding Multiple Images","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","type":"topic","abstract":[{"text":"Adding images to the map and assigning them to POI types","type":"text"}],"kind":"article"},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","title":"interpolate","titleInlineContent":[{"type":"codeVoice","code":"interpolate"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","role":"article","url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates","kind":"article","title":"Tile URL Templates","abstract":[{"text":"Using URL Templates when defining tile sources","type":"text"}],"type":"topic"},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"type":"link","title":"match","titleInlineContent":[{"type":"codeVoice","code":"match"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","title":"asin","titleInlineContent":[{"type":"codeVoice","code":"asin"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},"#code-mgl_expressionwithcontext-code":{"type":"link","title":"mgl_expressionWithContext:","titleInlineContent":[{"type":"codeVoice","code":"mgl_expressionWithContext:"}],"url":"#code-mgl_expressionwithcontext-code","identifier":"#code-mgl_expressionwithcontext-code"},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"type":"link","url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","title":"NSExpression+MLNAdditions.h","titleInlineContent":[{"type":"codeVoice","code":"NSExpression+MLNAdditions.h"}],"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h"},"#variables":{"type":"link","title":"variables","titleInlineContent":[{"type":"text","text":"variables"}],"url":"#variables","identifier":"#variables"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts","title":"Customizing Fonts","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","type":"topic","abstract":[{"text":"Using custom fonts","type":"text"}],"kind":"article"},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","title":"atan","titleInlineContent":[{"type":"codeVoice","code":"atan"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"type":"link","title":"functions predefined","titleInlineContent":[{"type":"text","text":"functions predefined"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","role":"article","url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","kind":"article","title":"Info.plist Keys","abstract":[{"text":"MapLibre Native for iOS supports custom ","type":"text"},{"type":"codeVoice","code":"Info.plist"},{"text":" keys in your application in order to configure various settings.","type":"text"}],"type":"topic"},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","title":"cos","titleInlineContent":[{"type":"codeVoice","code":"cos"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","role":"article","url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers","kind":"article","title":"User Interactions","abstract":[{"text":"Learn how to work with gesture recognizers","type":"text"}],"type":"topic"},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"type":"link","title":"mgl_interpolateWithCurveType:parameters:stops:","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code"},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"type":"topic","role":"symbol","fragments":[{"text":"MLNShapeSource","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","abstract":[{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference","isActive":true},{"type":"text","text":" is a map content source that supplies vector shapes to be"},{"type":"text","text":" "},{"text":"shown on the map. The shapes may be instances of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","type":"reference"},{"type":"text","text":" or "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or they may be defined by local or external"},{"text":" ","type":"text"},{"text":"GeoJSON","type":"text"},{"text":" code. A shape source is added to an","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true,"type":"reference"},{"type":"text","text":" object along with an "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true,"type":"reference"},{"type":"text","text":" object. The vector style"},{"text":" ","type":"text"},{"text":"layer defines the appearance of any content supplied by the shape source. You","type":"text"},{"text":" ","type":"text"},{"text":"can update a shape source by setting its ","type":"text"},{"type":"codeVoice","code":"shape"},{"type":"text","text":" or "},{"type":"codeVoice","code":"URL"},{"type":"text","text":" property."}],"url":"\/documentation\/maplibre\/mlnshapesource","title":"MLNShapeSource"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"type":"link","url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","title":"Predicate Programming Guide","titleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}],"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html"},"https://tc39.github.io/ecma262/#sec-json.stringify":{"type":"link","title":"JSON.stringify()","titleInlineContent":[{"type":"codeVoice","code":"JSON.stringify()"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify"},"#code-mgl_has-code":{"type":"link","url":"#code-mgl_has-code","title":"mgl_has:","titleInlineContent":[{"type":"codeVoice","code":"mgl_has:"}],"identifier":"#code-mgl_has-code"},"https://github.com/maplibre/maplibre-native/issues/331":{"type":"link","title":"#331","titleInlineContent":[{"type":"text","text":"#331"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},"#code-mgl_stepwithminimum-stops-code":{"type":"link","url":"#code-mgl_stepwithminimum-stops-code","title":"mgl_stepWithMinimum:stops:","titleInlineContent":[{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}],"identifier":"#code-mgl_stepwithminimum-stops-code"},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"type":"link","title":"concat","titleInlineContent":[{"type":"codeVoice","code":"concat"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},"#code-mgl_match-code":{"identifier":"#code-mgl_match-code","type":"link","titleInlineContent":[{"type":"codeVoice","code":"MLN_MATCH()"}],"url":"#code-mgl_match-code","title":"MLN_MATCH()"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"type":"link","title":"to-number","titleInlineContent":[{"type":"codeVoice","code":"to-number"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"title":"Information for Style Authors","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors","abstract":[],"url":"\/documentation\/maplibre-native-for-ios\/for_style_authors","role":"article","type":"topic"},"https://maplibre.org/maplibre-style-spec/expressions/":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","type":"link","titleInlineContent":[{"type":"text","text":"MapLibre Style Spec"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","title":"MapLibre Style Spec"},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"type":"link","title":"mgl_interpolate:withCurveType:parameters:stops:","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}],"url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code"},"#code-stringbyappendingstring-code":{"identifier":"#code-stringbyappendingstring-code","type":"link","titleInlineContent":[{"type":"codeVoice","code":"stringByAppendingString:"}],"url":"#code-stringbyappendingstring-code","title":"stringByAppendingString:"},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"type":"link","title":"round","titleInlineContent":[{"type":"codeVoice","code":"round"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","type":"link","titleInlineContent":[{"type":"codeVoice","code":"sin"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","title":"sin"},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"type":"link","title":"NumberToString","titleInlineContent":[{"type":"text","text":"NumberToString"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"title":"MLNPolygon","fragments":[{"kind":"identifier","text":"MLNPolygon"}],"kind":"symbol","type":"topic","url":"\/documentation\/maplibre\/mlnpolygon","role":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","abstract":[{"text":"An ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","type":"reference","isActive":true},{"text":" object represents a closed shape consisting of four or more","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"vertices, specified as "},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"text":" instances, and the edges that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"connect them. For example, you could use a polygon shape to represent a"},{"text":" ","type":"text"},{"text":"building, a lake, or an area you want to highlight.","type":"text"}]},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","title":"coalesce","titleInlineContent":[{"type":"codeVoice","code":"coalesce"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"type":"link","title":"has","titleInlineContent":[{"type":"codeVoice","code":"has"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has"},"doc://org.swift.MyProject/documentation/MapLibre":{"role":"collection","abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}],"title":"MapLibre","kind":"symbol","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","url":"\/documentation\/maplibre"},"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"type":"link","url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","title":"kernel density estimation","titleInlineContent":[{"type":"text","text":"kernel density estimation"}],"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"type":"link","title":"distance","titleInlineContent":[{"type":"codeVoice","code":"distance"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","title":"acos","titleInlineContent":[{"type":"codeVoice","code":"acos"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"type":"link","title":"let","titleInlineContent":[{"type":"codeVoice","code":"let"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","title":"to-string","titleInlineContent":[{"type":"codeVoice","code":"to-string"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string"},"#key-paths":{"type":"link","title":"key paths","titleInlineContent":[{"type":"text","text":"key paths"}],"url":"#key-paths","identifier":"#key-paths"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"fragments":[{"kind":"identifier","text":"MLNPolyline"}],"url":"\/documentation\/maplibre\/mlnpolyline","title":"MLNPolyline","role":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","type":"topic","abstract":[{"type":"text","text":"An "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline"},{"text":" object represents a shape consisting of two or more vertices,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specified as "},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"text":" instances, and the line segments that","type":"text"},{"text":" ","type":"text"},{"text":"connect them. For example, you could use an polyline to represent a road or the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"path along which something moves."}],"kind":"symbol"},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","titleInlineContent":[{"type":"codeVoice","code":"tan"}],"title":"tan","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan"},"#code-mgl_function-code":{"type":"link","titleInlineContent":[{"code":"MLN_FUNCTION()","type":"codeVoice"}],"url":"#code-mgl_function-code","identifier":"#code-mgl_function-code","title":"MLN_FUNCTION()"},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","titleInlineContent":[{"type":"codeVoice","code":"log2"}],"title":"log2","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"type":"link","titleInlineContent":[{"text":"ToNumber Applied to the String Type","type":"text"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","title":"ToNumber Applied to the String Type"},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","titleInlineContent":[{"type":"codeVoice","code":"format"}],"title":"format","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"type":"link","titleInlineContent":[{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"type":"text","text":" method"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","title":"+[NSExpression expressionForFunction:arguments:] method"},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","titleInlineContent":[{"code":"case","type":"codeVoice"}],"title":"case","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case"},"#code-mgl_does-have-code":{"type":"link","titleInlineContent":[{"code":"mgl_does:have:","type":"codeVoice"}],"url":"#code-mgl_does-have-code","identifier":"#code-mgl_does-have-code","title":"mgl_does:have:"},"#using-expressions-to-configure-layout-and-paint-attributes":{"identifier":"#using-expressions-to-configure-layout-and-paint-attributes","titleInlineContent":[{"text":"inside an expression","type":"text"}],"title":"inside an expression","type":"link","url":"#using-expressions-to-configure-layout-and-paint-attributes"},"#code-mgl_let-code":{"type":"link","titleInlineContent":[{"code":"MLN_LET","type":"codeVoice"}],"url":"#code-mgl_let-code","identifier":"#code-mgl_let-code","title":"MLN_LET"},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","titleInlineContent":[{"code":"step","type":"codeVoice"}],"title":"step","type":"link","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step"},"#code-mgl_if-code":{"type":"link","titleInlineContent":[{"code":"MLN_IF()","type":"codeVoice"}],"url":"#code-mgl_if-code","identifier":"#code-mgl_if-code","title":"MLN_IF()"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","title":"lineGradient","url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient","abstract":[{"type":"text","text":"The color gradient with which the line will be drawn. This property only has an"},{"text":" ","type":"text"},{"text":"effect on lines defined by an ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference","isActive":true},{"text":" whose ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource"},{"type":"text","text":" "},{"text":"option is set to ","type":"text"},{"type":"codeVoice","code":"YES"},{"type":"text","text":"."}],"fragments":[{"text":"lineGradient","kind":"identifier"}]}}}