{"metadata":{"role":"article","roleHeading":"Article","title":"Predicates and expressions","modules":[{"name":"MapLibre"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"title":"Other Articles","identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"],"generated":true}],"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"]}],"identifier":{"interfaceLanguage":"occ","url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions"},"abstract":[{"text":"Using ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" with MapLibre iOS"}],"sections":[],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"text":"Style layers use predicates and expressions to determine what to display and how","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to format it. "},{"inlineContent":[{"text":"Predicates","type":"text"}],"type":"emphasis"},{"type":"text","text":" are represented by the same "},{"type":"codeVoice","code":"NSPredicate"},{"text":" class that","type":"text"},{"type":"text","text":" "},{"text":"filters results from Core Data or items in an ","type":"text"},{"code":"NSArray","type":"codeVoice"},{"type":"text","text":" in Objective-C."},{"text":" ","type":"text"},{"type":"text","text":"Predicates are based on "},{"inlineContent":[{"type":"text","text":"expressions"}],"type":"emphasis"},{"text":", represented by the ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" class.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Somewhat unusually, style layers also use expressions on their own."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This document discusses the specific subset of the predicate and expression"},{"text":" ","type":"text"},{"type":"text","text":"syntax supported by this SDK. For a more general introduction to predicates and"},{"text":" ","type":"text"},{"type":"text","text":"expressions, consult the"},{"text":" ","type":"text"},{"inlineContent":[{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","isActive":true,"type":"reference"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"in Apple developer documentation. For additional detail on how this SDK has"},{"text":" ","type":"text"},{"type":"text","text":"extended the "},{"type":"codeVoice","code":"NSExpression"},{"text":" class, see the ","type":"text"},{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","isActive":true,"type":"reference"},{"text":" header.","type":"text"}]},{"level":2,"anchor":"Using-predicates-to-filter-vector-data","type":"heading","text":"Using predicates to filter vector data"},{"type":"paragraph","inlineContent":[{"text":"Most style layer classes display ","type":"text"},{"type":"codeVoice","code":"MLNFeature"},{"type":"text","text":" objects that you can show or hide"},{"type":"text","text":" "},{"type":"text","text":"based on the feature’s attributes. Use the "},{"type":"codeVoice","code":"MLNVectorStyleLayer.predicate"},{"type":"text","text":" "},{"type":"text","text":"property to include only the features in the source layer that satisfy a"},{"type":"text","text":" "},{"type":"text","text":"condition that you define."}]},{"anchor":"Operators","text":"Operators","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The following comparison operators are supported:","type":"text"}]},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"key = value","type":"codeVoice"},{"type":"codeVoice","code":"key == value"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSGreaterThanOrEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"key >= value","type":"codeVoice"},{"type":"codeVoice","code":"key => value"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSLessThanOrEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key <= value"},{"type":"codeVoice","code":"key =< value"}]}]],[[{"inlineContent":[{"code":"NSGreaterThanPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key > value"}]}]],[[{"inlineContent":[{"code":"NSLessThanPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key < value"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNotEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key != value"},{"type":"codeVoice","code":"key <> value"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSBetweenPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key BETWEEN { 32, 212 }"}],"type":"paragraph"}]]]},{"inlineContent":[{"type":"text","text":"To test whether a feature has or lacks a specific attribute, compare the"},{"text":" ","type":"text"},{"type":"text","text":"attribute to "},{"type":"codeVoice","code":"NULL"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"NIL"},{"text":". Predicates created using the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSPredicate predicateWithValue:]"},{"text":" method are also supported. String","type":"text"},{"text":" ","type":"text"},{"text":"operators and custom operators are not supported.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following compound operators are supported:","type":"text"}],"type":"paragraph"},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSCompoundPredicateType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAndPredicateType"}]}],[{"type":"paragraph","inlineContent":[{"code":"predicate1 AND predicate2","type":"codeVoice"},{"code":"predicate1 && predicate2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSOrPredicateType","type":"codeVoice"}]}],[{"inlineContent":[{"code":"predicate1 OR predicate2","type":"codeVoice"},{"type":"text","text":"predicate1 || predicate2"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNotPredicateType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NOT predicate"},{"type":"codeVoice","code":"!predicate"}]}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following aggregate operators are supported:"}]},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSInPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSContainsPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key"}]}]]],"type":"table","header":"row"},{"inlineContent":[{"type":"text","text":"You can use the "},{"code":"IN","type":"codeVoice"},{"type":"text","text":" and "},{"code":"CONTAINS","type":"codeVoice"},{"text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature (","type":"text"},{"code":"SELF","type":"codeVoice"},{"type":"text","text":") lies within a given "},{"code":"MLNShape","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:","type":"text"}],"type":"paragraph"},{"code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"],"type":"codeListing","syntax":"objc"},{"syntax":"swift","code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The following combinations of comparison operators and modifiers are supported:"}],"type":"paragraph"},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSComparisonPredicateModifier","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSAllPredicateModifier"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"ALL haystack != needle","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAnyPredicateModifier"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"code":"ANY haystack = needle","type":"codeVoice"},{"type":"codeVoice","code":"SOME haystack = needle"}],"type":"paragraph"}]]],"type":"table"},{"inlineContent":[{"text":"The following comparison predicate options are supported for comparison and","type":"text"},{"text":" ","type":"text"},{"text":"aggregate operators that are used in the predicate:","type":"text"}],"type":"paragraph"},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSComparisonPredicateOptions","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSCaseInsensitivePredicateOption"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"'QUEBEC' =[c] 'Quebec'"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSDiacriticInsensitivePredicateOption"}]}],[{"inlineContent":[{"code":"'Québec' =[d] 'Quebec'","type":"codeVoice"}],"type":"paragraph"}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Other comparison predicate options are unsupported, namely "},{"type":"codeVoice","code":"l"},{"text":" ","type":"text"},{"text":"(for locale sensitivity) and ","type":"text"},{"code":"n","type":"codeVoice"},{"type":"text","text":" (for normalization). A comparison is"},{"type":"text","text":" "},{"text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison","type":"text"},{"type":"text","text":" "},{"type":"text","text":"predicate options are not supported in conjunction with comparison modifiers"},{"type":"text","text":" "},{"text":"like ","type":"text"},{"code":"ALL","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ANY"},{"type":"text","text":"."}]},{"level":3,"text":"Operands","type":"heading","anchor":"Operands"},{"type":"paragraph","inlineContent":[{"text":"Operands in predicates can be ","type":"text"},{"isActive":true,"identifier":"#variables","type":"reference"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"#key-paths"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"or almost anything else that can appear","type":"text"},{"type":"text","text":" "},{"identifier":"#using-expressions-to-configure-layout-and-paint-attributes","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Automatic type casting is not performed. Therefore, a feature only matches a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"predicate if its value for the attribute in question is of the same type as the"},{"type":"text","text":" "},{"type":"text","text":"value specified in the predicate. Use the "},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" operator to convert a key"},{"type":"text","text":" "},{"text":"path or variable into a matching type:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"To cast a value to a number, use "},{"code":"CAST(key, 'NSNumber')","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast a value to a string, use "},{"type":"codeVoice","code":"CAST(key, 'NSString')"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast a value to a color, use ","type":"text"},{"code":"CAST(key, 'UIColor')","type":"codeVoice"},{"type":"text","text":" on iOS and "},{"code":"CAST(key, 'NSColor')","type":"codeVoice"},{"text":" on macOS.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast an ","type":"text"},{"type":"codeVoice","code":"NSColor"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" object to an array, use "},{"type":"codeVoice","code":"CAST(noindex(color), 'NSArray')"},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For details about the predicate format string syntax, consult the “Predicate"},{"text":" ","type":"text"},{"text":"Format String Syntax” chapter of the","type":"text"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"reference","overridingTitle":"Predicate Programming Guide","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","overridingTitleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}],"isActive":true}]},{"text":" ","type":"text"},{"text":"in Apple developer documentation.","type":"text"}]},{"text":"Using expressions to configure layout and paint attributes","anchor":"Using-expressions-to-configure-layout-and-paint-attributes","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"An expression can contain subexpressions of various types. Each of the supported"},{"text":" ","type":"text"},{"type":"text","text":"types of expressions is discussed below."}],"type":"paragraph"},{"type":"heading","anchor":"Constant-values","text":"Constant values","level":3},{"type":"paragraph","inlineContent":[{"text":"A constant value can be of any of the following types:","type":"text"}]},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Objective-C"}]}],[{"inlineContent":[{"text":"In Swift","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" (macOS)"},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" (iOS)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSString"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSString"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNumber.doubleValue","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSNumber.doubleValue","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSArray<NSNumber>"}]}],[{"type":"paragraph","inlineContent":[{"code":"[Float]","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSArray<NSString>"}]}],[{"inlineContent":[{"type":"codeVoice","code":"[String]"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.CGVectorValue"},{"type":"text","text":" (iOS)"},{"code":"NSValue","type":"codeVoice"},{"type":"text","text":" containing "},{"code":"CGVector","type":"codeVoice"},{"text":" (macOS)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.cgVectorValue"},{"text":" (iOS)","type":"text"},{"code":"NSValue","type":"codeVoice"},{"text":" containing ","type":"text"},{"type":"codeVoice","code":"CGVector"},{"type":"text","text":" (macOS)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSValue.UIEdgeInsetsValue"},{"text":" (iOS)","type":"text"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"type":"text","text":" (macOS)"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSValue.uiEdgeInsetsValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"text":" (macOS)","type":"text"}],"type":"paragraph"}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"text":"For literal floating-point values, use ","type":"text"},{"type":"codeVoice","code":"-[NSNumber numberWithDouble:]"},{"type":"text","text":" instead"},{"type":"text","text":" "},{"type":"text","text":"of "},{"code":"-[NSNumber numberWithFloat:]","type":"codeVoice"},{"text":" to avoid precision issues.","type":"text"}]},{"level":3,"type":"heading","anchor":"Key-paths","text":"Key paths"},{"inlineContent":[{"text":"A key path expression refers to an attribute of the ","type":"text"},{"type":"codeVoice","code":"MLNFeature"},{"text":" object being","type":"text"},{"type":"text","text":" "},{"type":"text","text":"evaluated for display. For example, if a polygon’s "},{"type":"codeVoice","code":"MLNFeature.attributes"},{"text":" ","type":"text"},{"text":"dictionary contains the ","type":"text"},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" key, then the key path "},{"type":"codeVoice","code":"floorCount"},{"text":" refers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the value of the "},{"type":"codeVoice","code":"floorCount"},{"text":" attribute when evaluating that particular","type":"text"},{"type":"text","text":" "},{"type":"text","text":"polygon."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following special attributes are also available on features that are produced"},{"type":"text","text":" "},{"text":"as a result of clustering multiple point features together in a shape source:","type":"text"}]},{"rows":[[[{"inlineContent":[{"type":"text","text":"Attribute"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type"}]}],[{"type":"paragraph","inlineContent":[{"text":"Meaning","type":"text"}]}]],[[{"inlineContent":[{"type":"text","text":"cluster"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bool"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster."}]}]],[[{"type":"paragraph","inlineContent":[{"text":"cluster_id","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Identifier for the point cluster."}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"point_count","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of point features in a given cluster."}]}]]],"type":"table","header":"row"},{"inlineContent":[{"text":"Some characters may not be used directly as part of a key path in a format","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string. For example, if a feature’s attribute is named "},{"code":"ISO 3166-1:2006","type":"codeVoice"},{"type":"text","text":", an"},{"type":"text","text":" "},{"type":"text","text":"expression format string of "},{"type":"codeVoice","code":"lowercase(ISO 3166-1:2006)"},{"type":"text","text":" or a predicate format"},{"type":"text","text":" "},{"type":"text","text":"string of "},{"code":"ISO 3166-1:2006 == 'US-OH'","type":"codeVoice"},{"type":"text","text":" would raise an exception. Instead, use a"},{"type":"text","text":" "},{"type":"codeVoice","code":"%K"},{"type":"text","text":" placeholder or the "},{"code":"+[NSExpression expressionForKeyPath:]","type":"codeVoice"},{"text":" initializer:","type":"text"}],"type":"paragraph"},{"syntax":"objc","type":"codeListing","code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"]},{"type":"codeListing","code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"],"syntax":"swift"},{"type":"heading","text":"Functions","anchor":"Functions","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of the"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"by the"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","type":"reference","isActive":true},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the following subset is supported in layer attribute values:"}]},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Initializer parameter","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"average:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"average({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sum:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"sum({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"count:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"count({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"min:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"min({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"max:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"max({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"add:to:"}]}],[{"type":"paragraph","inlineContent":[{"code":"1 + 2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"from:subtract:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"2 - 1"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"multiply:by:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 * 2"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"divide:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 \/ 2"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:(1, 2)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"sqrt:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"sqrt(2)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"log:"}]}],[{"inlineContent":[{"code":"log(10)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"ln:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"ln(2)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"raise:toPower:"}]}],[{"type":"paragraph","inlineContent":[{"code":"2 ** 2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"exp:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"exp(0)","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"ceiling:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"ceiling(0.99999)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"abs:"}]}],[{"inlineContent":[{"code":"abs(-1)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"trunc:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"trunc(6378.1370)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"floor:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"floor(-0.99999)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"uppercase:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"uppercase('Elysian Fields')"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"lowercase:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lowercase('DOWNTOWN')"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"noindex:"}]}],[{"inlineContent":[{"code":"noindex(0 + 2 + c)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"length:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"length('Wapakoneta')","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"castObject:toType:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"CAST(ele, 'NSString')"},{"type":"codeVoice","code":"CAST(ele, 'NSNumber')"}],"type":"paragraph"}]]],"header":"row"},{"type":"paragraph","inlineContent":[{"text":"A number of ","type":"text"},{"isActive":true,"type":"reference","identifier":"#MapLibre-specific-functions"},{"type":"text","text":" are also"},{"text":" ","type":"text"},{"type":"text","text":"available."}]},{"inlineContent":[{"type":"text","text":"The following predefined functions are "},{"inlineContent":[{"type":"text","text":"not"}],"type":"strong"},{"type":"text","text":" supported:"}],"type":"paragraph"},{"rows":[[[{"inlineContent":[{"type":"text","text":"Initializer parameter"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"median:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"median({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"mode:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"mode({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"stddev:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"stddev({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"random"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"random()","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"randomn:"}]}],[{"type":"paragraph","inlineContent":[{"code":"randomn(10)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"now","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"now()","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:(5, 3)"}]}]],[[{"inlineContent":[{"code":"bitwiseOr:with:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:(5, 3)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"bitwiseXor:with:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"bitwiseXor:with:(5, 3)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"leftshift:by:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"leftshift:by:(23, 1)"}]}]],[[{"inlineContent":[{"code":"rightshift:by:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"rightshift:by:(23, 1)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"onesComplement:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"onesComplement(255)"}]}]],[[{"inlineContent":[{"code":"distanceToLocation:fromLocation:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:(there, here)"}]}]]],"header":"row","type":"table"},{"type":"heading","level":3,"text":"Conditionals","anchor":"Conditionals"},{"inlineContent":[{"type":"text","text":"Conditionals are supported via the built-in"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"text":" ","type":"text"},{"text":"method and ","type":"text"},{"type":"codeVoice","code":"TERNARY()"},{"text":" operator. If you need to express multiple cases","type":"text"},{"text":" ","type":"text"},{"text":"(“else-if”), you can either nest a conditional within a conditional or use the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_if-code"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"#code-mgl_match-code"},{"text":" function.","type":"text"}],"type":"paragraph"},{"text":"Aggregates","anchor":"Aggregates","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Aggregate expressions can contain arrays of expressions. In some cases, it is","type":"text"},{"type":"text","text":" "},{"text":"possible to use the array itself instead of wrapping the array in an aggregate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression."}]},{"level":3,"text":"Variables","anchor":"Variables","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The following variables are defined by this SDK for use with style layers:","type":"text"}]},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Variable"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Meaning"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$featureIdentifier"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Any GeoJSON data type"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the "},{"code":"NSExpression.featureIdentifierVariableExpression","type":"codeVoice"},{"type":"text","text":" property."}]}]],[[{"type":"paragraph","inlineContent":[{"code":"$geometryType","type":"codeVoice"}]}],[{"inlineContent":[{"text":"String","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:","type":"text"},{"type":"text","text":"*   "},{"type":"codeVoice","code":"Point"},{"text":" for point features, corresponding to the ","type":"text"},{"code":"MLNPointAnnotation","type":"codeVoice"},{"text":" class","type":"text"},{"type":"text","text":"*   "},{"code":"LineString","type":"codeVoice"},{"type":"text","text":" for polyline features, corresponding to the "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","type":"reference","isActive":true},{"type":"text","text":" class"},{"text":"*   ","type":"text"},{"code":"Polygon","type":"codeVoice"},{"type":"text","text":" for polygon features, corresponding to the "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true,"type":"reference"},{"text":" class","type":"text"},{"text":"This variable corresponds to the ","type":"text"},{"code":"NSExpression.geometryTypeVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$heatmapDensity"}]}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","type":"reference"},{"type":"text","text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the "},{"code":"heatmapColor","type":"codeVoice"},{"text":" property. This variable corresponds to the ","type":"text"},{"code":"NSExpression.heatmapDensityVariableExpression","type":"codeVoice"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"$zoomLevel","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the "},{"code":"NSExpression.zoomLevelVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"$lineProgress","type":"codeVoice"}]}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","isActive":true},{"text":" property. It corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.lineProgressVariableExpression"},{"type":"text","text":" property."}]}]]]},{"type":"paragraph","inlineContent":[{"text":"In addition to these variables, you can define your own variables and refer to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"them elsewhere in the expression. The syntax for defining a variable makes use"},{"type":"text","text":" "},{"type":"text","text":"of a "},{"identifier":"#MapLibre-specific-functions","overridingTitle":"MapLibre-specific function","isActive":true,"type":"reference","overridingTitleInlineContent":[{"text":"MapLibre-specific function","type":"text"}]},{"type":"text","text":" that takes an"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" as an argument:","type":"text"}]},{"syntax":"objc","type":"codeListing","code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"]},{"type":"codeListing","code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"],"syntax":"swift"},{"type":"heading","level":2,"text":"MapLibre-specific functions","anchor":"MapLibre-specific-functions"},{"style":"warning","name":"Warning","content":[{"inlineContent":[{"text":"Due to a change in iOS 15.5, some of these stopped working. See ","type":"text"},{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","isActive":true,"type":"reference"},{"type":"text","text":" for more information and workarounds."}],"type":"paragraph"}],"type":"aside"},{"type":"paragraph","inlineContent":[{"text":"For compatibility with the MapLibre Style Spec, the following functions","type":"text"},{"text":" ","type":"text"},{"text":"are defined by this SDK. When setting a style layer property, you can call these","type":"text"},{"text":" ","type":"text"},{"text":"functions just like the predefined functions above, using either the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"type":"text","text":" method or a convenient format"},{"text":" ","type":"text"},{"text":"string syntax:","type":"text"}]},{"anchor":"mgldoeshave","text":"mgl_does:have:","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_does:have:(SELF, '🧀🍔')","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"mgl_does:have:(%@, '🧀🍔')"}]},{"type":"paragraph","inlineContent":[{"text":"Returns a Boolean value indicating whether the dictionary has a value for the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"key or whether the evaluated object ("},{"type":"codeVoice","code":"SELF"},{"type":"text","text":") has a value for the feature"},{"type":"text","text":" "},{"type":"text","text":"attribute. Compared to the "},{"isActive":true,"type":"reference","identifier":"#code-mgl_has-code"},{"text":" custom function,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that function’s target is instead passed in as the first argument to this"},{"text":" ","type":"text"},{"text":"function. Both functions are equivalent to the syntax ","type":"text"},{"code":"key != NIL","type":"codeVoice"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"codeVoice","code":"%@[key] != NIL"},{"type":"text","text":" but can be used outside of a predicate."}]},{"text":"mgl_interpolate:withCurveType:parameters:stops:","level":3,"type":"heading","anchor":"mglinterpolatewithCurveTypeparametersstops"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Produces continuous, smooth results by interpolating between pairs of input and"},{"text":" ","type":"text"},{"text":"output values (“stops”). Compared to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code"},{"text":" ","type":"text"},{"text":"custom function, the input expression (that function’s target) is instead passed","type":"text"},{"text":" ","type":"text"},{"text":"in as the first argument to this function.","type":"text"}]},{"level":3,"text":"mgl_step:from:stops:","type":"heading","anchor":"mglstepfromstops"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_step:from:stops:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_step:from:stops:(x, 11, %@)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Produces discrete, stepped results by evaluating a piecewise-constant function","type":"text"},{"text":" ","type":"text"},{"text":"defined by pairs of input and output values (“stops”). Compared to the","type":"text"},{"type":"text","text":" "},{"identifier":"#code-mgl_stepwithminimum-stops-code","isActive":true,"type":"reference"},{"text":" custom","type":"text"},{"type":"text","text":" "},{"text":"function, the input expression (that function’s target) is instead passed in as","type":"text"},{"text":" ","type":"text"},{"text":"the first argument to this function.","type":"text"}]},{"type":"heading","level":3,"anchor":"mgljoin","text":"mgl_join:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_join:","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_join({'Old', 'MacDonald'})"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of concatenating together all the elements of an array in"},{"type":"text","text":" "},{"type":"text","text":"order. Compared to the"},{"text":" ","type":"text"},{"identifier":"#code-stringbyappendingstring-code","type":"reference","isActive":true},{"type":"text","text":" custom"},{"type":"text","text":" "},{"text":"function, this function takes only one argument, which is an aggregate","type":"text"},{"type":"text","text":" "},{"text":"expression containing the strings to concatenate.","type":"text"}]},{"text":"mgl_acos:","type":"heading","level":3,"anchor":"mglacos"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_acos:"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_acos(1)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the arccosine of the number."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"mgl_asin:","type":"heading","anchor":"mglasin","level":3},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_asin:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_asin(0)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the arcsine of the number."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","level":3,"anchor":"mglatan","text":"mgl_atan:"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_atan:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_atan(20)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the arctangent of the number."}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"mgl_cos:","type":"heading","anchor":"mglcos","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_cos:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_cos(0)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the cosine of the number."}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"level":3,"text":"mgl_log2:","type":"heading","anchor":"mgllog2"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_log2:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_log2(1024)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the base-2 logarithm of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"type":"heading","anchor":"mglround","text":"mgl_round:"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_round:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_round(1.5)"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the number rounded to the nearest integer. If the number is halfway","type":"text"},{"type":"text","text":" "},{"type":"text","text":"between two integers, this function rounds it away from zero."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"type":"heading","text":"mgl_sin:","level":3,"anchor":"mglsin"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_sin:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin(0)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the sine of the number."}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"anchor":"mgltan","level":3,"type":"heading","text":"mgl_tan:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_tan:"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan(0)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the tangent of the number."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mgldistanceFrom","type":"heading","text":"mgl_distanceFrom:","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_distanceFrom:","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_distanceFrom(%@)"},{"type":"text","text":" with an "},{"type":"codeVoice","code":"MLNShape"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the straight-line distance from the evaluated object to the given shape."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"mgl_coalesce:","type":"heading","anchor":"mglcoalesce","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_coalesce:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_coalesce({x, y, z})","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the first non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" value from an array of expressions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","text":"mgl_attributed:","level":3,"anchor":"mglattributed"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_attributed:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_attributed({x, y, z})"}]},{"type":"paragraph","inlineContent":[{"text":"Concatenates and returns the array of ","type":"text"},{"type":"codeVoice","code":"MLNAttributedExpression"},{"type":"text","text":" objects, for use"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"MLNSymbolStyleLayer.text"},{"type":"text","text":" property."}]},{"inlineContent":[{"code":"MLNAttributedExpression.attributes","type":"codeVoice"},{"type":"text","text":" valid attributes."}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Key","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Value Type","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontNamesAttribute"}]}],[{"inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" evaluating to an "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" array."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"MLNFontScaleAttribute"}],"type":"paragraph"}],[{"inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" evaluating to an "},{"type":"codeVoice","code":"NSNumber"},{"type":"text","text":" value."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontColorAttribute"}]}],[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" evaluating to an ","type":"text"},{"type":"codeVoice","code":"UIColor"},{"text":" (iOS) or ","type":"text"},{"type":"codeVoice","code":"NSColor"},{"text":" (macOS).","type":"text"}]}]]]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"anchor":"MLNLET","text":"MLN_LET","type":"heading"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_LET:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))"}]},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" Any number of variable names interspersed with their assigned"},{"text":" ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" values, followed by an ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" ","type":"text"},{"text":"that may contain references to those variables.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the result of evaluating an expression with the given variable values."},{"type":"text","text":" "},{"type":"text","text":"Compared to the"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_expressionwithcontext-code","isActive":true},{"text":" custom","type":"text"},{"text":" ","type":"text"},{"text":"function, this function takes the variable names and values inline before the","type":"text"},{"type":"text","text":" "},{"text":"expression that contains references to those variables.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"MLNMATCH","text":"MLN_MATCH"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_MATCH:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" An input expression, then any number of argument pairs, followed by a default"},{"text":" ","type":"text"},{"type":"text","text":"expression. Each argument pair consists of a constant value followed by an"},{"text":" ","type":"text"},{"text":"expression to produce as a result of matching that constant value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If the input value is an aggregate expression, then any of the constant values within"},{"text":" ","type":"text"},{"text":"that aggregate expression result in the following argument. This is shorthand for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specifying an argument pair for each of the constant values within that aggregate"},{"text":" ","type":"text"},{"text":"expression. It is not possible to match the aggregate expression itself.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of matching the input expression against the given constant"},{"text":" ","type":"text"},{"text":"values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"anchor":"MLNIF","level":3,"text":"MLN_IF","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"MLN_IF:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" Alternating "},{"code":"NSPredicate","type":"codeVoice"},{"text":" conditionals and resulting expressions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"followed by a default expression."}]},{"inlineContent":[{"type":"text","text":"Returns the first expression that meets the condition; otherwise, the default"},{"text":" ","type":"text"},{"type":"text","text":"value. Unlike"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"TERNARY()","type":"codeVoice"},{"text":" syntax, this function can accept multiple “if else” conditions","type":"text"},{"type":"text","text":" "},{"text":"and is supported on iOS 8.","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"text":" and macOS 10.10.","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"type":"text","text":"; however, each conditional"},{"text":" ","type":"text"},{"type":"text","text":"passed into this function must be wrapped in a constant expression."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"MLN_FUNCTION","type":"heading","anchor":"MLNFUNCTION","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"MLN_FUNCTION:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_FUNCTION('typeof', mystery)"}]},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" Any arguments required by the expression operator.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"An expression exactly as defined by the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Custom-functions","level":2,"text":"Custom functions"},{"inlineContent":[{"text":"The following custom functions are also available with the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:selectorName:arguments:]"},{"type":"text","text":" method or the"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION()"},{"text":" format string syntax.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Some of these functions are defined as methods on their respective target"},{"text":" ","type":"text"},{"text":"classes, but you should not call them directly outside the context of an","type":"text"},{"text":" ","type":"text"},{"text":"expression, because the result may differ from the evaluated expression’s result","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or may result in undefined behavior."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The MapLibre Style Spec defines some operators for which no custom","type":"text"},{"type":"text","text":" "},{"type":"text","text":"function is available. To use these operators in an "},{"type":"codeVoice","code":"NSExpression"},{"text":", call the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-mgl_function-code","isActive":true,"type":"reference"},{"type":"text","text":" function with the same arguments"},{"text":" ","type":"text"},{"text":"that the operator expects.","type":"text"}]},{"level":3,"text":"boolValue","anchor":"boolValue","type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"boolValue"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(1, 'boolValue')"}]},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a number or string.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" None."}]},{"inlineContent":[{"type":"text","text":"A Boolean representation of the target: "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":" when then input is an"},{"text":" ","type":"text"},{"text":"empty string, 0, ","type":"text"},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":", or "},{"code":"NaN","type":"codeVoice"},{"type":"text","text":", otherwise "},{"type":"codeVoice","code":"TRUE"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"mgl_has:","anchor":"mglhas","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_has:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to an ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"or the evaluated object ("},{"code":"SELF","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to an "},{"type":"codeVoice","code":"NSString"},{"text":" ","type":"text"},{"type":"text","text":"representing the key to look up in the dictionary or the feature attribute to"},{"text":" ","type":"text"},{"type":"text","text":"look up in the evaluated object (see "},{"type":"codeVoice","code":"MLNFeature.attributes"},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"code":"true","type":"codeVoice"},{"text":" if the dictionary has a value for the key or if the evaluated","type":"text"},{"type":"text","text":" "},{"type":"text","text":"object has a value for the feature attribute."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"#code-mgl_does-have-code"},{"type":"text","text":" function, which is used on its own"},{"text":" ","type":"text"},{"text":"without the ","type":"text"},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator. You can also check whether an object has an","type":"text"},{"type":"text","text":" "},{"text":"attribute by comparing the key path to ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":", for example "},{"type":"codeVoice","code":"cheeseburger != NIL"},{"type":"text","text":" "},{"text":"or ","type":"text"},{"code":"burger.cheese != NIL","type":"codeVoice"}],"type":"paragraph"},{"type":"heading","text":"mgl_expressionWithContext:","anchor":"mglexpressionWithContext","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_expressionWithContext:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)"},{"type":"text","text":" with"},{"text":" ","type":"text"},{"type":"text","text":"a dictionary containing "},{"type":"codeVoice","code":"ios"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"macos"},{"text":" keys","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that may contain references to the variables","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"defined in the context dictionary."}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"NSString"},{"type":"text","text":"s as keys and"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s as values. Each key is a variable name and each"},{"type":"text","text":" "},{"text":"value is the variable’s value within the target expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The target expression with variable subexpressions replaced with the values"},{"text":" ","type":"text"},{"type":"text","text":"defined in the context dictionary."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"identifier":"#code-mgl_let-code","isActive":true,"type":"reference"},{"text":" function, which is used on its own without the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION()"},{"text":" operator.","type":"text"}]},{"type":"heading","text":"mgl_interpolateWithCurveType:parameters:stops:","level":3,"anchor":"mglinterpolateWithCurveTypeparametersstops"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)"},{"type":"text","text":" "},{"type":"text","text":"with a dictionary containing zoom levels or other constant values as keys"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number and contains a"},{"type":"text","text":" "},{"text":"variable or key path expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" The first argument is one of the following strings denoting curve types:"},{"text":" ","type":"text"},{"type":"codeVoice","code":"linear"},{"type":"text","text":", "},{"code":"exponential","type":"codeVoice"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"cubic-bezier"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"The second argument is an expression providing parameters for the curve:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"linear"},{"type":"text","text":", the argument is "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the curve type is ","type":"text"},{"code":"exponential","type":"codeVoice"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"text":"expression that evaluates to a number, specifying the base of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"exponential interpolation."}]}]},{"content":[{"inlineContent":[{"text":"If the curve type is ","type":"text"},{"type":"codeVoice","code":"cubic-bezier"},{"type":"text","text":", the argument is an"},{"text":" ","type":"text"},{"text":"array or aggregate expression containing four expressions, each","type":"text"},{"text":" ","type":"text"},{"text":"evaluating to a number. The four numbers are control points for the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"cubic Bézier curve."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The third argument is an "},{"code":"NSDictionary","type":"codeVoice"},{"text":" object representing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"type":"text","text":" "},{"text":"values.","type":"text"}]},{"inlineContent":[{"text":"A value interpolated along the continuous mathematical function defined by the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"arguments, with the target as the input to the function."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"type":"text","text":" "},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"text":" ","type":"text"},{"type":"text","text":"values may be constant values or "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" objects. For example, you can"},{"type":"text","text":" "},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"type":"text","text":" "},{"text":"yellow, orange, and red as the values.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]"},{"type":"text","text":" "},{"text":"method and the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"function, which is used on its own without the ","type":"text"},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}],"type":"paragraph"},{"anchor":"mglnumberWithFallbackValues","type":"heading","text":"mgl_numberWithFallbackValues:","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"floatValue"},{"type":"text","text":", or"},{"type":"text","text":" "},{"type":"codeVoice","code":"decimalValue"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"string."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" Zero or more "},{"type":"codeVoice","code":"NSExpression"},{"text":"s, each evaluating to a Boolean value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A numeric representation of the target:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"code":"FALSE","type":"codeVoice"},{"text":", the result is 0.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"doubleValue","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"floatValue","type":"codeVoice"},{"type":"text","text":", or"},{"text":" ","type":"text"},{"code":"decimalValue","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" ","type":"text"},{"text":"Zero or more ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":"s, each evaluating to a Boolean value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A numeric representation of the target:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is ","type":"text"},{"code":"NIL","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a string, it is converted to a number as specified by the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"“"},{"isActive":true,"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type"},{"type":"text","text":"”"},{"type":"text","text":" "},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If multiple values are provided, each one is evaluated in order until the"},{"type":"text","text":" "},{"type":"text","text":"first successful conversion is obtained."}]}]}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"text":" ","type":"text"},{"text":"number by passing the value and the string ","type":"text"},{"code":"NSNumber","type":"codeVoice"},{"text":" into the ","type":"text"},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" "},{"type":"text","text":"operator."}],"type":"paragraph"},{"level":3,"text":"mgl_stepWithMinimum:stops:","anchor":"mglstepWithMinimumstops","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)","type":"codeVoice"},{"text":" with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a dictionary with zoom levels or other constant values as keys"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" "},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a number and contains a"},{"type":"text","text":" "},{"text":"variable or key path expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" "},{"text":"The first argument is an expression that evaluates to a number, specifying","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the minimum value in case the target is less than any of the stops in the"},{"text":" ","type":"text"},{"text":"second argument.","type":"text"}]},{"inlineContent":[{"text":"The second argument is an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" object representing the"},{"type":"text","text":" "},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"},{"inlineContent":[{"text":"The output value of the stop whose key is just less than the evaluated target,","type":"text"},{"text":" ","type":"text"},{"text":"or the minimum value if the target is less than the least of the stops’ keys.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The input expression is matched against the keys in the stop dictionary. The","type":"text"},{"type":"text","text":" "},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"text":" ","type":"text"},{"text":"values may be constant values or ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" objects. For example, you can"},{"type":"text","text":" "},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"type":"text","text":" "},{"type":"text","text":"yellow, orange, and red as the values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]"},{"text":" ","type":"text"},{"text":"method and the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"text":"stringByAppendingString:","level":3,"anchor":"stringByAppendingString","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"stringByAppendingString:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a string."}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"One or more "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s, each evaluating to a string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The target string with each of the argument strings appended in order.","type":"text"}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]"},{"text":" ","type":"text"},{"type":"text","text":"method and is similar to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-mgl_join-code","type":"reference","isActive":true},{"type":"text","text":" function, which concatenates multiple"},{"type":"text","text":" "},{"type":"text","text":"expressions and is used on its own without the "},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"stringValue","text":"stringValue"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"stringValue"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"FUNCTION(ele, 'stringValue')","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"None."}]},{"inlineContent":[{"text":"A string representation of the target:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"type":"text","text":"NIL"},{"text":", the result is the empty string.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is a Boolean value, the result is the string "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the target is a number, it is converted to a string as specified by the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"“"},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","isActive":true},{"text":"”","type":"text"},{"type":"text","text":" "},{"text":"algorithm of the ECMAScript Language Specification.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the target is a color, it is converted to a string of the form","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"rgba(r,g,b,a)"},{"type":"text","text":", where "},{"type":"text","text":"r"},{"type":"text","text":", "},{"type":"text","text":"g"},{"text":", and ","type":"text"},{"type":"text","text":"b"},{"text":" are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"numerals ranging from 0 to 255 and "},{"text":"a","type":"text"},{"type":"text","text":" ranges from 0 to 1."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Otherwise, the target is converted to a string in the format specified by the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify"},{"text":" ","type":"text"},{"text":"function of the ECMAScript Language Specification.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. You can also cast a value to a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string by passing the value and the string "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"CAST()"},{"text":" ","type":"text"},{"text":"operator.","type":"text"}]}]}],"references":{"https://maplibre.org/maplibre-style-spec/expressions/#round":{"titleInlineContent":[{"code":"round","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","type":"link","title":"round","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"titleInlineContent":[{"code":"tan","type":"codeVoice"}],"type":"link","title":"tan","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan"},"#code-mgl_if-code":{"titleInlineContent":[{"code":"MLN_IF()","type":"codeVoice"}],"url":"#code-mgl_if-code","type":"link","title":"MLN_IF()","identifier":"#code-mgl_if-code"},"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"titleInlineContent":[{"text":"kernel density estimation","type":"text"}],"type":"link","title":"kernel density estimation","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"role":"symbol","url":"\/documentation\/maplibre\/mlnpolyline","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","kind":"symbol","fragments":[{"kind":"identifier","text":"MLNPolyline"}],"type":"topic","title":"MLNPolyline","abstract":[{"type":"text","text":"An "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true,"type":"reference"},{"text":" object represents a shape consisting of two or more vertices,","type":"text"},{"type":"text","text":" "},{"text":"specified as ","type":"text"},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"type":"text","text":" instances, and the line segments that"},{"text":" ","type":"text"},{"type":"text","text":"connect them. For example, you could use an polyline to represent a road or the"},{"type":"text","text":" "},{"type":"text","text":"path along which something moves."}]},"#code-mgl_join-code":{"titleInlineContent":[{"code":"mgl_join:","type":"codeVoice"}],"url":"#code-mgl_join-code","type":"link","title":"mgl_join:","identifier":"#code-mgl_join-code"},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"titleInlineContent":[{"code":"cos","type":"codeVoice"}],"type":"link","title":"cos","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"titleInlineContent":[{"code":"match","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","type":"link","title":"match","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match"},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"titleInlineContent":[{"text":"NumberToString","type":"text"}],"type":"link","title":"NumberToString","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type"},"#code-mgl_stepwithminimum-stops-code":{"titleInlineContent":[{"code":"mgl_stepWithMinimum:stops:","type":"codeVoice"}],"url":"#code-mgl_stepwithminimum-stops-code","type":"link","title":"mgl_stepWithMinimum:stops:","identifier":"#code-mgl_stepwithminimum-stops-code"},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"titleInlineContent":[{"code":"format","type":"codeVoice"}],"type":"link","title":"format","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format"},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"titleInlineContent":[{"code":"case","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","type":"link","title":"case","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case"},"#code-mgl_match-code":{"titleInlineContent":[{"code":"MLN_MATCH()","type":"codeVoice"}],"type":"link","title":"MLN_MATCH()","identifier":"#code-mgl_match-code","url":"#code-mgl_match-code"},"#key-paths":{"titleInlineContent":[{"text":"key paths","type":"text"}],"url":"#key-paths","type":"link","title":"key paths","identifier":"#key-paths"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","title":"Info.plist Keys","abstract":[{"text":"MapLibre Native for iOS supports custom ","type":"text"},{"type":"codeVoice","code":"Info.plist"},{"text":" keys in your application in order to configure various settings.","type":"text"}],"kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","type":"topic","role":"article"},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"titleInlineContent":[{"code":"NSExpression+MLNAdditions.h","type":"codeVoice"}],"type":"link","title":"NSExpression+MLNAdditions.h","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","type":"topic","title":"Customizing Fonts","url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts","role":"article","abstract":[{"type":"text","text":"Using custom fonts"}]},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"titleInlineContent":[{"code":"step","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","type":"link","title":"step","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step"},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"titleInlineContent":[{"code":"atan","type":"codeVoice"}],"type":"link","title":"atan","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"titleInlineContent":[{"code":"to-string","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","type":"link","title":"to-string","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string"},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"titleInlineContent":[{"code":"coalesce","type":"codeVoice"}],"type":"link","title":"coalesce","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce"},"#code-mgl_function-code":{"titleInlineContent":[{"code":"MLN_FUNCTION()","type":"codeVoice"}],"url":"#code-mgl_function-code","type":"link","title":"MLN_FUNCTION()","identifier":"#code-mgl_function-code"},"#using-expressions-to-configure-layout-and-paint-attributes":{"titleInlineContent":[{"text":"inside an expression","type":"text"}],"type":"link","title":"inside an expression","identifier":"#using-expressions-to-configure-layout-and-paint-attributes","url":"#using-expressions-to-configure-layout-and-paint-attributes"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"titleInlineContent":[{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"type":"text","text":" method"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","type":"link","title":"+[NSExpression expressionForFunction:arguments:] method","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init"},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"titleInlineContent":[{"code":"interpolate","type":"codeVoice"}],"type":"link","title":"interpolate","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},"#code-mgl_does-have-code":{"titleInlineContent":[{"code":"mgl_does:have:","type":"codeVoice"}],"url":"#code-mgl_does-have-code","type":"link","title":"mgl_does:have:","identifier":"#code-mgl_does-have-code"},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"titleInlineContent":[{"code":"concat","type":"codeVoice"}],"type":"link","title":"concat","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"title":"MLNShapeSource","url":"\/documentation\/maplibre\/mlnshapesource","role":"symbol","fragments":[{"text":"MLNShapeSource","kind":"identifier"}],"abstract":[{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource"},{"type":"text","text":" is a map content source that supplies vector shapes to be"},{"type":"text","text":" "},{"type":"text","text":"shown on the map. The shapes may be instances of "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true},{"type":"text","text":" or "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"or they may be defined by local or external","type":"text"},{"text":" ","type":"text"},{"text":"GeoJSON","type":"text"},{"text":" code. A shape source is added to an","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true,"type":"reference"},{"type":"text","text":" object along with an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle"},{"text":" object. The vector style","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"layer defines the appearance of any content supplied by the shape source. You"},{"text":" ","type":"text"},{"type":"text","text":"can update a shape source by setting its "},{"type":"codeVoice","code":"shape"},{"type":"text","text":" or "},{"code":"URL","type":"codeVoice"},{"text":" property.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"topic","kind":"symbol"},"doc://org.swift.MyProject/documentation/MapLibre":{"kind":"symbol","role":"collection","title":"MapLibre","type":"topic","abstract":[{"text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","url":"\/documentation\/maplibre"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"titleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}],"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"link","title":"Predicate Programming Guide","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"role":"symbol","url":"\/documentation\/maplibre\/mlnpolygon","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","kind":"symbol","fragments":[{"kind":"identifier","text":"MLNPolygon"}],"title":"MLNPolygon","type":"topic","abstract":[{"text":"An ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true},{"type":"text","text":" object represents a closed shape consisting of four or more"},{"type":"text","text":" "},{"type":"text","text":"vertices, specified as "},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"text":" instances, and the edges that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"connect them. For example, you could use a polygon shape to represent a"},{"text":" ","type":"text"},{"type":"text","text":"building, a lake, or an area you want to highlight."}]},"#variables":{"titleInlineContent":[{"text":"variables","type":"text"}],"type":"link","title":"variables","identifier":"#variables","url":"#variables"},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"titleInlineContent":[{"code":"mgl_interpolateWithCurveType:parameters:stops:","type":"codeVoice"}],"url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","type":"link","title":"mgl_interpolateWithCurveType:parameters:stops:","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code"},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"titleInlineContent":[{"code":"distance","type":"codeVoice"}],"type":"link","title":"distance","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"titleInlineContent":[{"code":"acos","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","type":"link","title":"acos","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},"#code-mgl_has-code":{"titleInlineContent":[{"code":"mgl_has:","type":"codeVoice"}],"type":"link","title":"mgl_has:","identifier":"#code-mgl_has-code","url":"#code-mgl_has-code"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"titleInlineContent":[{"code":"to-number","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","type":"link","title":"to-number","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"role":"symbol","type":"topic","fragments":[{"text":"lineGradient","kind":"identifier"}],"url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient","abstract":[{"text":"The color gradient with which the line will be drawn. This property only has an","type":"text"},{"type":"text","text":" "},{"text":"effect on lines defined by an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource"},{"type":"text","text":" whose "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true},{"type":"text","text":" "},{"text":"option is set to ","type":"text"},{"code":"YES","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","title":"lineGradient","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient"},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"titleInlineContent":[{"code":"sin","type":"codeVoice"}],"type":"link","title":"sin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"titleInlineContent":[{"code":"has","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","type":"link","title":"has","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"kind":"article","url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers","abstract":[{"text":"Learn how to work with gesture recognizers","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","title":"User Interactions","type":"topic","role":"article"},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"titleInlineContent":[{"code":"log2","type":"codeVoice"}],"type":"link","title":"log2","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"titleInlineContent":[{"code":"let","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","type":"link","title":"let","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"titleInlineContent":[{"text":"ToNumber Applied to the String Type","type":"text"}],"type":"link","title":"ToNumber Applied to the String Type","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"titleInlineContent":[{"code":"asin","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","type":"link","title":"asin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"titleInlineContent":[{"code":"mgl_interpolate:withCurveType:parameters:stops:","type":"codeVoice"}],"type":"link","title":"mgl_interpolate:withCurveType:parameters:stops:","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"titleInlineContent":[{"text":"functions predefined","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","type":"link","title":"functions predefined","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},"https://github.com/maplibre/maplibre-native/issues/331":{"titleInlineContent":[{"text":"#331","type":"text"}],"type":"link","title":"#331","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors","title":"Information for Style Authors","type":"topic","url":"\/documentation\/maplibre-native-for-ios\/for_style_authors","role":"article","abstract":[]},"#code-mgl_let-code":{"titleInlineContent":[{"code":"MLN_LET","type":"codeVoice"}],"url":"#code-mgl_let-code","type":"link","title":"MLN_LET","identifier":"#code-mgl_let-code"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","type":"topic","title":"Adding Multiple Images","url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample","role":"article","abstract":[{"text":"Adding images to the map and assigning them to POI types","type":"text"}]},"https://tc39.github.io/ecma262/#sec-json.stringify":{"titleInlineContent":[{"code":"JSON.stringify()","type":"codeVoice"}],"type":"link","title":"JSON.stringify()","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify"},"#code-stringbyappendingstring-code":{"titleInlineContent":[{"code":"stringByAppendingString:","type":"codeVoice"}],"url":"#code-stringbyappendingstring-code","type":"link","title":"stringByAppendingString:","identifier":"#code-stringbyappendingstring-code"},"#MapLibre-specific-functions":{"titleInlineContent":[{"text":"MapLibre-specific functions","type":"text"}],"type":"link","title":"MapLibre-specific functions","identifier":"#MapLibre-specific-functions","url":"#MapLibre-specific-functions"},"https://maplibre.org/maplibre-style-spec/expressions/":{"titleInlineContent":[{"text":"MapLibre Style Spec","type":"text"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","type":"link","title":"MapLibre Style Spec","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","type":"topic","title":"Tile URL Templates","url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates","role":"article","abstract":[{"text":"Using URL Templates when defining tile sources","type":"text"}]},"#code-mgl_expressionwithcontext-code":{"titleInlineContent":[{"code":"mgl_expressionWithContext:","type":"codeVoice"}],"type":"link","title":"mgl_expressionWithContext:","identifier":"#code-mgl_expressionwithcontext-code","url":"#code-mgl_expressionwithcontext-code"}}}