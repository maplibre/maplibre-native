{"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre","doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapViewDelegate"]]},"kind":"symbol","sections":[],"metadata":{"externalID":"c:objc(pl)MLNMapViewDelegate(im)mapView:shouldChangeFromCamera:toCamera:","symbolKind":"method","fragments":[{"text":"- ","kind":"text"},{"text":"mapView:shouldChangeFromCamera:toCamera:","kind":"identifier"}],"roleHeading":"Instance Method","remoteSource":{"url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/ios\/src\/MLNMapViewDelegate.h#L51","fileName":"MLNMapViewDelegate.h"},"navigatorTitle":[{"text":"mapView:shouldChangeFromCamera:toCamera:","kind":"identifier"}],"modules":[{"name":"MapLibre"}],"title":"mapView:shouldChangeFromCamera:toCamera:","role":"symbol"},"primaryContentSections":[{"declarations":[{"languages":["occ"],"platforms":["iOS"],"tokens":[{"text":"- (","kind":"text"},{"text":"BOOL","kind":"typeIdentifier","preciseIdentifier":"c:@T@BOOL"},{"text":") ","kind":"text"},{"kind":"identifier","text":"mapView:"},{"text":"(","kind":"text"},{"text":"MLNMapView","preciseIdentifier":"c:objc(cs)MLNMapView","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView","kind":"typeIdentifier"},{"kind":"text","text":" *) "},{"text":"mapView","kind":"internalParam"},{"kind":"text","text":" "},{"kind":"identifier","text":"shouldChangeFromCamera:"},{"text":"(","kind":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapCamera","preciseIdentifier":"c:objc(cs)MLNMapCamera","text":"MLNMapCamera","kind":"typeIdentifier"},{"kind":"text","text":" *) "},{"text":"oldCamera","kind":"internalParam"},{"text":" ","kind":"text"},{"text":"toCamera:","kind":"identifier"},{"kind":"text","text":"("},{"text":"MLNMapCamera","kind":"typeIdentifier","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapCamera","preciseIdentifier":"c:objc(cs)MLNMapCamera"},{"kind":"text","text":" *) "},{"kind":"internalParam","text":"newCamera"},{"text":";","kind":"text"}]}],"kind":"declarations"},{"parameters":[{"name":"mapView","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The map view that the user is manipulating."}]}]},{"name":"oldCamera","content":[{"inlineContent":[{"type":"text","text":"The camera representing the viewpoint at the moment the"},{"type":"text","text":" "},{"text":"gesture is recognized. If this method returns ","type":"text"},{"code":"NO","type":"codeVoice"},{"type":"text","text":", the map view’s camera"},{"type":"text","text":" "},{"type":"text","text":"continues to be this camera."}],"type":"paragraph"}]},{"name":"newCamera","content":[{"type":"paragraph","inlineContent":[{"text":"The expected camera after the gesture completes. If this","type":"text"},{"type":"text","text":" "},{"type":"text","text":"method returns "},{"type":"codeVoice","code":"YES"},{"text":", this camera becomes the map view’s camera.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","text":"Return Value","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Boolean value indicating whether the map view should stay at"},{"type":"text","text":" "},{"type":"codeVoice","code":"oldCamera"},{"type":"text","text":" or change to "},{"code":"newCamera","type":"codeVoice"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"inlineContent":[{"type":"text","text":"This method is called as soon as the user gesture is recognized. It is not"},{"type":"text","text":" "},{"type":"text","text":"called in response to a programmatic camera change, such as by setting the"},{"type":"text","text":" "},{"type":"codeVoice","code":"centerCoordinate"},{"text":" property or calling ","type":"text"},{"code":"-flyToCamera:completionHandler:","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"This method is called many times during gesturing, so you should avoid performing","type":"text"},{"text":" ","type":"text"},{"text":"complex or performance-intensive tasks in your implementation.","type":"text"}],"type":"paragraph"},{"anchor":"Related-examples","level":4,"text":"Related examples","type":"heading"},{"items":[{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/BlockingGesturesExample"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapViewDelegate\/mapView:shouldChangeFromCamera:toCamera:","interfaceLanguage":"occ"},"variants":[{"paths":["\/documentation\/maplibre\/mlnmapviewdelegate\/mapview:shouldchangefromcamera:tocamera:"],"traits":[{"interfaceLanguage":"occ"}]}],"abstract":[{"text":"Asks the delegate whether the map view should be allowed to change from the","type":"text"},{"text":" ","type":"text"},{"text":"existing camera to the new camera in response to a user gesture.","type":"text"}],"references":{"doc://org.swift.MyProject/documentation/MapLibre/MLNMapView":{"url":"\/documentation\/maplibre\/mlnmapview","kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView","fragments":[{"kind":"identifier","text":"MLNMapView"}],"title":"MLNMapView","abstract":[{"text":"An interactive, customizable map view with an interface similar to the one","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"provided by Apple’s MapKit."}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNMapViewDelegate":{"title":"MLNMapViewDelegate","url":"\/documentation\/maplibre\/mlnmapviewdelegate","kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapViewDelegate","fragments":[{"kind":"identifier","text":"MLNMapViewDelegate"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapViewDelegate"},{"text":" protocol defines a set of optional methods that you","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can use to receive map-related update messages. Because many map operations"},{"text":" ","type":"text"},{"type":"text","text":"require the "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView","isActive":true},{"type":"text","text":" class to load data asynchronously, the map view calls"},{"text":" ","type":"text"},{"text":"these methods to notify your application when specific operations complete. The","type":"text"},{"type":"text","text":" "},{"text":"map view also uses these methods to request information about annotations","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"displayed on the map, such as the styles and interaction modes to apply to"},{"type":"text","text":" "},{"text":"individual annotations.","type":"text"}],"type":"topic","role":"symbol"},"doc://org.swift.MyProject/documentation/MapLibre":{"role":"collection","kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","title":"MapLibre","type":"topic","url":"\/documentation\/maplibre","abstract":[{"text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling.","type":"text"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/BlockingGesturesExample":{"title":"Blocking Gestures","kind":"article","abstract":[{"text":"Constrain the map to a certain area.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/BlockingGesturesExample","role":"article","type":"topic","url":"\/documentation\/maplibre-native-for-ios\/blockinggesturesexample"},"doc://org.swift.MyProject/documentation/MapLibre/MLNMapCamera":{"abstract":[{"text":"An ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapCamera"},{"type":"text","text":" object represents a viewpoint from which the user observes"},{"text":" ","type":"text"},{"type":"text","text":"some point on an "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView","isActive":true},{"text":".","type":"text"}],"kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapCamera","role":"symbol","fragments":[{"text":"MLNMapCamera","kind":"identifier"}],"type":"topic","title":"MLNMapCamera","url":"\/documentation\/maplibre\/mlnmapcamera"},"doc://org.swift.MyProject/documentation/MapLibre/MLNMapViewDelegate/mapView:shouldChangeFromCamera:toCamera:":{"url":"\/documentation\/maplibre\/mlnmapviewdelegate\/mapview:shouldchangefromcamera:tocamera:","kind":"symbol","navigatorTitle":[{"text":"mapView:shouldChangeFromCamera:toCamera:","kind":"identifier"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapViewDelegate\/mapView:shouldChangeFromCamera:toCamera:","role":"symbol","fragments":[{"text":"- ","kind":"text"},{"kind":"identifier","text":"mapView:shouldChangeFromCamera:toCamera:"}],"abstract":[{"type":"text","text":"Asks the delegate whether the map view should be allowed to change from the"},{"type":"text","text":" "},{"text":"existing camera to the new camera in response to a user gesture.","type":"text"}],"title":"mapView:shouldChangeFromCamera:toCamera:","type":"topic"}}}