name: android-release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: MapLibre_Native_Ubuntu_24_04_x84_16_core
    defaults:
      run:
        working-directory: platform/android
    env:
      JOBS: 8
      BUILDTYPE: Release
      IS_LOCAL_DEVELOPMENT: false
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Get CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 3.24.1
          ninjaVersion: latest

      - name: Ensure source code revision
        run: scripts/ensure-code-revision.sh
        working-directory: platform/android
        shell: bash

      - name: npm install
        run: npm install --ignore-scripts
        working-directory: platform/android

      - name: Android nitpick
        run: make run-android-nitpick

      - name: Update version name
        run: |
          RELEASE_VERSION="$( git describe --tags --match=android-v*.*.* --abbrev=0 | sed 's/^android-v//' )"
          echo version="$RELEASE_VERSION" >> "$GITHUB_ENV"
          echo "Latest version from tag: $RELEASE_VERSION"
          if [ -n "$RELEASE_VERSION" ]; then
            sed -i -e "s/^VERSION_NAME=.*/VERSION_NAME=${RELEASE_VERSION}/" MapLibreAndroid/gradle.properties
            echo "MapLibreAndroid/gradle.properties:"
            cat MapLibreAndroid/gradle.properties
          fi
        shell: bash

      - name: Build package
        run: |
          RENDERER=vulkan make apackage
          RENDERER=drawable make apackage

      # create github release
      - name: Prepare release
        id: prepare_release
        run: |
          RELEASE_NOTES_PATH="${PWD}/release_notes.txt"
          node scripts/release-notes.mjs > "${RELEASE_NOTES_PATH}"
          echo release_notes="${RELEASE_NOTES_PATH}" >> "$GITHUB_OUTPUT"
          echo version_tag="$( git describe --tags --match=android-v*.*.* --abbrev=0 )" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Check if version is pre-release
        id: check_version
        run: |
          version="${{ env.version }}"
          if [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Valid semver: $version"
            echo "prerelease=false" >> "$GITHUB_ENV"
          else
            echo "Invalid semver: $version"
            echo "prerelease=true" >> "$GITHUB_ENV"
          fi

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prepare_release.outputs.version_tag }}
          release_name: ${{steps.prepare_release.outputs.version_tag }}
          body_path: ${{ steps.prepare_release.outputs.release_notes }}
          draft: false
          prerelease: ${{ env.prerelease }}

      - name: Upload aar (OpenGL)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: platform/android/MapLibreAndroid/build/outputs/aar/MapLibreAndroid-drawable-release.aar
          asset_name: MapLibreAndroid-release.aar
          asset_content_type: application/zip

      - name: Upload aar (Vulkan)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: platform/android/MapLibreAndroid/build/outputs/aar/MapLibreAndroid-vulkan-release.aar
          asset_name: MapLibreAndroid-release-vulkan.aar
          asset_content_type: application/zip

      - name: Upload debug symbols (OpenGL)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: platform/android/build/debug-symbols-opengl.tar.gz
          asset_name: debug-symbols-maplibre-android-opengl-${{ steps.prepare_release.outputs.version_tag }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload debug symbols (Vulkan)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: platform/android/build/debug-symbols-vulkan.tar.gz
          asset_name: debug-symbols-maplibre-android-vulkan-${{ steps.prepare_release.outputs.version_tag }}.tar.gz
          asset_content_type: application/gzip

      - name: Clean release
        run: |
          rm -f ${{ steps.prepare_release.outputs.release_notes }}
        shell: bash

      - name: Prepare MavenCentral release
        env:
          GPG_KEY_CONTENTS: ${{ secrets.GPG_KEY_CONTENTS }}
        run: |
          echo "${GPG_KEY_CONTENTS}" | base64 -d > signing-key.gpg
        shell: bash

      - name: Publish to MavenCentral
        run: make run-android-publish
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
          SONATYPE_STAGING_PROFILE_ID: ${{ secrets.SONATYPE_STAGING_PROFILE_ID }}
