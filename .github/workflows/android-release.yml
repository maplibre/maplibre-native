name: android-release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: [self-hosted, ubuntu-20.04]
    defaults:
      run:
        working-directory: platform/android
    container:
      image: ghcr.io/maplibre/android-ndk-r21b
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}
    env:
      LIBSYSCONFCPUS: 8
      JOBS: 8
      BUILDTYPE: Release
      IS_LOCAL_DEVELOPMENT: false
    steps:

      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Ensure source code revision
        run: scripts/ensure-code-revision.sh        
        working-directory: platform/android
        shell: bash 

      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: npm install
        run: npm install --ignore-scripts          
        working-directory: platform/android

      - name: Prepare ccache
        run: ccache --clear       

      - name: Cache ccache
        uses: actions/cache@v3
        env:
          cache-name: ccache-v1     
        with:
          path: ~/.ccache'
          key: ${{ env.cache-name }}-${{ runner.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}-${{ github.head_ref }}
          restore-keys: |
            ${{ env.cache-name }}-${{ runner.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}
            ${{ env.cache-name }}-${{ runner.os }}-${{ github.job }}-${{ github.ref }}
            ${{ env.cache-name }}-${{ runner.os }}-${{ github.job }}  

      - name: Clear ccache statistics
        run: |
          ccache --zero-stats
          ccache --max-size=2G
          ccache --show-stats   

      - name: restore-gradle-cache
        uses: actions/cache@v3
        env:
          cache-name: gradle-v1
        with:
          path: ~/.gradle'     
          key: ${{ env.cache-name }}-{{ hashFiles 'gradle/dependencies.gradle' }}-{{ hashFiles 'build.gradle' }}-{{ hashFiles 'gradle/wrapper/gradle-wrapper.properties' }}'
          restore-keys: |
            - ${{ env.cache-name }}   

      - name: Android nitpick
        run: make run-android-nitpick
        
      - name: Update version name
        run: |
          RELEASE_VERSION="$( git describe --tags --match=android-v*.*.* --abbrev=0 | sed 's/^android-v//' )"
          echo "Latest version from tag: $RELEASE_VERSION"
          if [ ! -z "$RELEASE_VERSION" ]; then
            sed -i -e "s/^VERSION_NAME=.*/VERSION_NAME=${RELEASE_VERSION}/" MapboxGLAndroidSDK/gradle.properties
            echo "MapboxGLAndroidSDK/gradle.properties:"
            cat MapboxGLAndroidSDK/gradle.properties
          fi
        shell: bash

      - name: Build package
        run: make apackage

      - name: Build release Test App
        run: |
          MAPLIBRE_DEVELOPER_CONFIG_XML='${{ secrets.MAPLIBRE_DEVELOPER_CONFIG_XML }}'
          if [ -n "${MAPLIBRE_DEVELOPER_CONFIG_XML}" ]; then
            echo "${MAPLIBRE_DEVELOPER_CONFIG_XML}" > MapboxGLAndroidSDKTestApp/src/main/res/values/developer-config.xml
            make android
          else
            echo "No secrets.MAPLIBRE_DEVELOPER_CONFIG_XML variable set, skipping apk build..."
          fi
        shell: bash
      
      - name: Generate javadoc
        run: make android-javadoc

      - name: Log in to Google Cloud Platform
        run: |
          GLCLOUD_SERVICE_JSON='${{ secrets.GLCLOUD_SERVICE_JSON }}'
          if [[ -n "${GLCLOUD_SERVICE_JSON}" ]]; then
            echo "Activating google cloud account..."
            echo "${GLCLOUD_SERVICE_JSON}" > secret.json
            gcloud auth activate-service-account --key-file secret.json --project maptiler-gl-mobile
            rm secret.json
          else
            echo "No secrets.GLCLOUD_SERVICE_JSON variable set, skipping google cloud login..."
          fi
        shell: bash  

      - name: Run robotest of release Test App on Firebase
        run: |
          GLCLOUD_SERVICE_JSON='${{ secrets.GLCLOUD_SERVICE_JSON }}'
          if [[ -n "${GLCLOUD_SERVICE_JSON}" ]]; then
            gcloud firebase test android run --type robo \
              --app MapboxGLAndroidSDKTestApp/build/outputs/apk/release/MapboxGLAndroidSDKTestApp-release.apk \
              --device-ids walleye --os-version-ids "27" --locales en --orientations portrait --timeout 90s
          else
            echo "No secrets.GLCLOUD_SERVICE_JSON variable set, skipping tests..."
          fi
        shell: bash     

      # create github release
      - name: Prepare release
        id: prepare_release
        run: |
          RELEASE_NOTES_PATH="${PWD}/release_notes.txt"
          ./scripts/release-notes.js > ${RELEASE_NOTES_PATH}
          echo ::set-output name=release_notes::${RELEASE_NOTES_PATH}
          echo ::set-output name=version_tag::$( git describe --tags --match=android-v*.*.* --abbrev=0 )
        shell: bash          

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prepare_release.outputs.version_tag }}
          release_name: ${{steps.prepare_release.outputs.version_tag }}
          body_path: ${{ steps.prepare_release.outputs.release_notes }}
          draft: false
          prerelease: false

      - name: Upload aar
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: platform/android/MapboxGLAndroidSDK/build/outputs/aar/MapboxGLAndroidSDK-release.aar
          asset_name: MapboxGLAndroidSDK-release.aar
          asset_content_type: application/zip 

      - name: Clean release
        run: |
          rm -f ${{ steps.prepare_release.outputs.release_notes }}
        shell: bash                    

      - name: Prepare MavenCentral release
        env:
          GPG_KEY_CONTENTS: ${{ secrets.GPG_KEY_CONTENTS }}
        run: |
          echo "${GPG_KEY_CONTENTS}" | base64 -d > signing-key.gpg
        shell: bash

      - name: Publish to MavenCentral
        run: make run-android-publish
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
          SONATYPE_STAGING_PROFILE_ID: ${{ secrets.SONATYPE_STAGING_PROFILE_ID }}         
