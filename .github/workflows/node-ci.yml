name: node-ci

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - topic/drawable
      - node-*.*.x
    tags:
      - "node-*"
    paths:
      - CMakeLists.txt
      - "platform/linux/**"
      - "platform/default/**"
      - "platform/node/**"
      - "platform/windows/**"
      - "platform/darwin/**"
      - "platform/macos/**"
      - "platform/ios/platform/darwin/**"
      - "platform/ios/platform/macos/**"
      - ".github/workflows/node-ci.yml"
      - "bin/**"
      - "expression-test/**"
      - "include/**"
      - "metrics/**"
      - "render-test/**"
      - "scripts/**"
      - "src/**"
      - "test/**"
      - "vendor/**"
      - ".gitmodules"
      - "!**/*.md"
      - "package.json"
      - "package-lock.json"

  pull_request:
    branches:
      - "*"
    paths:
      - CMakeLists.txt
      - "platform/linux/**"
      - "platform/default/**"
      - "platform/node/**"
      - "platform/windows/**"
      - "platform/darwin/**"
      - "platform/macos/**"
      - "platform/ios/platform/darwin/**"
      - "platform/ios/platform/macos/**"
      - ".github/workflows/node-ci.yml"
      - "bin/**"
      - "expression-test/**"
      - "include/**"
      - "metrics/**"
      - "render-test/**"
      - "scripts/**"
      - "src/**"
      - "test/**"
      - "vendor/**"
      - ".gitmodules"
      - "!**/*.md"
      - "package.json"
      - "package-lock.json"

concurrency:
  # cancel jobs on PRs only
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  test:
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: ubuntu-22.04
            arch: x86_64
          - runs-on: [self-hosted, linux, ARM64]
            arch: arm64
          # Disabled until Metal backend is complete
          # A release for macOS can be made from the opengl-2 branch
          # - runs-on: macos-12
          #   arch: x86_64
          # - runs-on: macos-13-xlarge
          #   arch: arm64
          - runs-on: windows-2022
            arch: x86_64
    continue-on-error: true
    env:
      BUILDTYPE: "Release"

    defaults:
      run:
        working-directory: ./
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup submodules
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c core.longpaths=true -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive || true

      - name: Get OS Architecture
        if: runner.os == 'MacOS' || runner.os == 'Linux'
        run: uname -m

      - name: Install dependencies (MacOS)
        if: runner.os == 'MacOS'
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        run: |
          brew list ccache || brew install ccache
          brew list ninja || brew install ninja
          brew list pkg-config || brew install pkg-config
          brew list glfw || brew install glfw
          brew list libuv || brew install libuv

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ccache \
            ninja-build \
            pkg-config \
            xvfb \
            libcurl4-openssl-dev \
            libglfw3-dev \
            libuv1-dev \
            g++-12 \
            libjpeg-dev \
            libpng-dev \
            libwebp-dev
          /usr/sbin/update-ccache-symlinks

      - name: Use Node.js from nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: npm ci
        run: npm ci --ignore-scripts

      - name: Set up msvc dev cmd (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      # Fixes an issue with the image causing builds to fail - https://github.com/actions/runner-images/issues/8598
      - name: Remove Strawberry Perl from PATH (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $env:PATH = $env:PATH -replace "C:\\Strawberry\\c\\bin;", ""
          "PATH=$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Setup cmake
        if: ${{contains(runner.name, 'GitHub Actions')}}
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.29.2'
 
      - name: cmake version
        run: |
          cmake --version

      - name: Set up ccache (MacOS/Linux)
        if: runner.os == 'MacOS' || runner.os == 'Linux'
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ matrix.runs-on }}-${{ env.BUILDTYPE }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}-${{ github.head_ref }}
          restore-keys: |
            ${{ matrix.runs-on }}-${{ env.BUILDTYPE }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}
            ${{ matrix.runs-on }}-${{ env.BUILDTYPE }}-${{ github.job }}-${{ github.ref }}
            ${{ matrix.runs-on }}-${{ env.BUILDTYPE }}-${{ github.job }}

      - name: Set up ccache (Windows)
        if: runner.os == 'Windows'
        uses: hendrikmuhs/ccache-action@v1
        with:
          variant: "sccache"
          key: ${{ matrix.runs-on }}-${{ env.BUILDTYPE }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}-${{ github.head_ref }}
          restore-keys: |
            ${{ matrix.runs-on }}-${{ env.BUILDTYPE }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}
            ${{ matrix.runs-on }}-${{ env.BUILDTYPE }}-${{ github.job }}-${{ github.ref }}
            ${{ matrix.runs-on }}-${{ env.BUILDTYPE }}-${{ github.job }}

      - name: Cache cmake-node-module deps
        uses: actions/cache@v4
        with:
          # downloaded with platform/node/cmake/module.cmake
          path: build/headers
          key: ${{ runner.os }}-${{ runner.arch }}-cmake-node-module-deps

      - name: Configure maplibre-native (MacOS)
        if: runner.os == 'MacOS'
        run: |
          cmake . -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILDTYPE }} \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DMLN_WITH_NODE=ON

      - name: Configure maplibre-native (Linux)
        if: runner.os == 'Linux'
        shell: bash -leo pipefail {0}
        run: |
          cmake . -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILDTYPE }} \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_C_COMPILER=gcc-12 \
            -DCMAKE_CXX_COMPILER=g++-12 \
            -DMLN_WITH_NODE=ON

      - name: "Create directory '${{ github.workspace }}/platform/windows/vendor/vcpkg/bincache' (Windows)"
        if: runner.os == 'Windows'
        run: mkdir -p ${{ github.workspace }}/platform/windows/vendor/vcpkg/bincache
        shell: bash

      - name: Restore vcpkg cache (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/platform/windows/vendor/vcpkg
            !${{ github.workspace }}/platform/windows/vendor/vcpkg/buildtrees
            !${{ github.workspace }}/platform/windows/vendor/vcpkg/packages
            !${{ github.workspace }}/platform/windows/vendor/vcpkg/downloads
            !${{ github.workspace }}/platform/windows/vendor/vcpkg/installed
          key: |
            ${{ matrix.runs-on }}-${{ env.BUILDTYPE }}-${{ github.job }}-${{ hashFiles( '.git/modules/platform/windows/vendor/vcpkg/HEAD' ) }}-${{ hashFiles( 'platform/windows/Get-VendorPackages.ps1' ) }}

      - name: Configure maplibre-native (Windows)
        if: runner.os == 'Windows'
        run: |
          cmake . -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILDTYPE }} \
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
            -DMLN_WITH_NODE=ON

      - name: Build maplibre-native (MacOS/Linux)
        if: runner.os == 'MacOS' || runner.os == 'Linux'
        run: |
          cmake --build build -j "$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null)"

      - name: Build maplibre-native (Windows)
        if: runner.os == 'Windows'
        run: |
          cmake --build build

      - name: Run render tests on macOS
        if: runner.os == 'macOS'
        run: set -o pipefail && ./build/mbgl-render-test-runner --manifestPath metrics/macos-xcode11-release-style.json

      - name: Upload render test artifacts (MacOS)
        if: runner.os == 'MacOS'
        uses: actions/upload-artifact@v4
        with:
          name: render-query-test-results
          path: metrics/macos-xcode11-release-style.html

      - name: Test (Linux)
        if: runner.os == 'Linux'
        run: xvfb-run --auto-servernum npm test

      - name: Test (MacOS)
        if: runner.os == 'MacOS'
        run: npm test

      - name: Test (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          LIBGL_ALWAYS_SOFTWARE: true
          GALLIUM_DRIVER: softpipe
        run: |
          Invoke-WebRequest https://github.com/pal1000/mesa-dist-win/releases/download/22.3.5/mesa3d-22.3.5-release-msvc.7z -OutFile mesa3d.7z
          & 'C:\Program Files\7-Zip\7z.exe' e -olib\node-v115 .\mesa3d.7z x64\opengl32.dll x64\libgallium_wgl.dll x64\libGLESv2.dll x64\libglapi.dll
          npm test

      # On PRs make sure that the npm package can be packaged.
      - name: Pack
        run: |
          npm pack --dry-run
