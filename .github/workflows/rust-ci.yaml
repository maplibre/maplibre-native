name: rust-ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

defaults:
  run:
    shell: bash
    working-directory: rustutils/

jobs:
  test:
    name: Rust tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Test rustutils
        run: |
          # Eventually this script should be moved to a justfile as a "ci-test" recipe
          # rust-info:
          rustc --version
          cargo --version
          #
          # Test code formatting
          # test-fmt:
          cargo fmt --all -- --check
          #
          # Quick compile
          # check:
          RUSTFLAGS='-D warnings' cargo check --workspace --all-targets
          #
          # Run all tests
          # test:
          cargo test --workspace --all-targets
          #
          # Run cargo clippy
          # clippy:
          cargo clippy --workspace --all-targets -- -D warnings
          #
          # Test documentation
          # test-doc:
          RUSTDOCFLAGS="-D warnings" cargo doc --no-deps

  msrv:
    name: Rust tests MSRV
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Read crate metadata
        id: metadata
        run: echo "rust-version=$(sed -ne 's/rust-version *= *\"\(.*\)\"/\1/p' Cargo.toml)" >> "$GITHUB_OUTPUT"
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.metadata.outputs.rust-version }}
          components: rustfmt
      - name: Test rustutils
        working-directory: rustutils/
        run: |
          # Eventually this script should be moved to a justfile as a "ci-test-msrv" recipe
          # rust-info:
          rustc --version
          cargo --version
          #
          # Quick compile
          # check:
          RUSTFLAGS='-D warnings' cargo check --workspace --all-targets
          #
          # Run all tests
          # test:
          cargo test --workspace --all-targets
