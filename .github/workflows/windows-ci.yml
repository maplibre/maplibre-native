name: windows-ci

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - windows-*.*.x
    tags:
      - windows-*

  pull_request:
    branches:
      - '*'

env:
  SCCACHE_GHA_ENABLED: "true"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  # INFO: We are cancelling the concurrency group if the change is on PR. For workflow dispatch, this will not work.
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

permissions:
  actions: read           # needed for CodeQL
  contents: read          # needed for CodeQL
  security-events: write  # needed for CodeQL

jobs:
  pre-job:
    runs-on: windows-2022
    outputs:
      should_skip: ${{ github.event_name != 'workflow_dispatch' && steps.changed-files.outputs.windows_any_modified != 'true' }}
    steps:
      - run: |
          git config --system core.longpaths true

      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Get all Windows files that have changed
        if: github.event_name != 'workflow_dispatch'
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files_yaml_from_source_file: .github/changed-files.yml

      - name: List changed files
        if: steps.changed-files.outputs.windows_any_modified == 'true'
        run: |
          Write-Host "Changed file(s): ${{ steps.changed-files.outputs.windows_all_changed_files }}"

  windows-get-or-build-dependencies:
    if: needs.pre-job.outputs.should_skip != 'true'
    needs: pre-job
    runs-on: windows-2022
    steps:
      - run: |
          git config --system core.longpaths true

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get vcpkg commit id
        run: |
          $vcpkg_commit_id = ($(git submodule status .\platform\windows\vendor\vcpkg).Trim() -split ' ')[0]
          Add-Content -Path $env:GITHUB_ENV -Value "VCPKG_COMMIT_ID=${vcpkg_commit_id}"

      - name: Restore vcpkg binary cache
        id: vcpkg-cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}\platform\windows\vendor\vcpkg\archives
          key: vcpkg-${{ env.VCPKG_COMMIT_ID }}
          lookup-only: true

      - uses: ilammy/msvc-dev-cmd@v1
        if: steps.vcpkg-cache.outputs.cache-hit != 'true'

      - name: Acquire/Build Maplibre Native Core Dependencies
        if: steps.vcpkg-cache.outputs.cache-hit != 'true'
        env:
          CI: 1,
#          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
          VCPKG_BINARY_SOURCES: "clear;files,${{ github.workspace }}\\platform\\windows\\vendor\\vcpkg\\archives,readwrite"
        timeout-minutes: 60
        run: |
          & ${{ github.workspace }}\platform\windows\Get-VendorPackages.ps1 -Triplet ${{ env.VSCMD_ARG_TGT_ARCH }}-windows -Renderer All

      - name: Save vcpkg binary cache
        if: steps.vcpkg-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}\platform\windows\vendor\vcpkg\archives
          key: vcpkg-${{ env.VCPKG_COMMIT_ID }}


  windows-build-and-test:
#    if: needs.pre-job.outputs.should_skip != 'true'
    needs: windows-get-or-build-dependencies
    strategy:
      matrix:
        renderer: [opengl, egl, vulkan]
    runs-on: windows-2022
    steps:
      - run: |
          git config --system core.longpaths true

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: cpp

      - uses: ilammy/msvc-dev-cmd@v1

      - uses: mozilla-actions/sccache-action@v0.0.9

      - name: Initialize sccache
        run: |
          & $env:SCCACHE_PATH --start-server
          & $env:SCCACHE_PATH --zero-stats

      - name: Get vcpkg commit id
        run: |
          $vcpkg_commit_id = ($(git submodule status .\platform\windows\vendor\vcpkg).Trim() -split ' ')[0]
          Add-Content -Path $env:GITHUB_ENV -Value "VCPKG_COMMIT_ID=${vcpkg_commit_id}"

      - name: Restore vcpkg binary cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}\platform\windows\vendor\vcpkg\archives
          key: vcpkg-${{ env.VCPKG_COMMIT_ID }}

      - name: Configure MapLibre Native Core
        env:
          CI: 1
          VCPKG_INSTALL_OPTIONS: "--debug"
#          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
          VCPKG_BINARY_SOURCES: "clear;files,${{ github.workspace }}\\platform\\windows\\vendor\\vcpkg\\archives,readwrite"
          CMAKE_C_COMPILER_LAUNCHER: "${{ env.SCCACHE_PATH }}"
          CMAKE_CXX_COMPILER_LAUNCHER: "${{ env.SCCACHE_PATH }}"
          RENDERER: "${{ matrix.renderer }}"
        timeout-minutes: 60
        run: |
          cmake --version
          & ${{ github.workspace }}\.github\scripts\windows-ci_configure_wrapper.ps1

      - name: Build MapLibre Native Core
        run: |
          cmake --build build --target mbgl-core mbgl-test-runner mbgl-render-test-runner mbgl-expression-test mbgl-render mbgl-benchmark-runner

      # CodeQL

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:cpp"

      - name: Download Mesa3D
        run: |
          (Invoke-WebRequest https://api.github.com/repos/pal1000/mesa-dist-win/releases -Headers @{ Authorization = ('Bearer {0}' -f '${{ secrets.GITHUB_TOKEN }}') } | ConvertFrom-Json)[0].assets | Where-Object name -match 'mesa3d-.+-(release|devel)-msvc\.7z' | foreach { Invoke-WebRequest $_.browser_download_url -OutFile mesa3d.7z }

      - name: Extract Mesa3D files for OpenGL
        if: matrix.renderer != 'vulkan'
        run: |
          & 'C:\Program Files\7-Zip\7z.exe' e -bb3 -obuild .\mesa3d.7z x64\opengl32.dll x64\libgallium_wgl.dll x64\libGLESv2.dll

      - name: Extract Mesa3D files for EGL
        if: matrix.renderer == 'egl'
        run: |
          & 'C:\Program Files\7-Zip\7z.exe' e -bb3 -obuild .\mesa3d.7z x64\d3d10warp.dll

      - name: Extract Mesa3D files for Vulkan
        if: matrix.renderer == 'vulkan'
        run: |
          & 'C:\Program Files\7-Zip\7z.exe' e -bb3 -obuild .\mesa3d.7z x64\lvp_icd.x86_64.json x64\vulkan_lvp.dll

      # unit tests

      - name: Configure Mesa3D drivers (OpenGL)
        if: matrix.renderer != 'vulkan'
        run: |
          Add-Content -Path $env:GITHUB_ENV -Value 'GALLIUM_DRIVER=llvmpipe'

      - name: Configure Mesa3D drivers (Vulkan)
        if: matrix.renderer == 'vulkan'
        run: |
          reg add 'HKLM\Software\Khronos\Vulkan\Drivers' /f /v '${{ github.workspace }}\build\lvp_icd.x86_64.json' /t REG_DWORD /d 0

      - name: Download and configure Vulkan
        if: matrix.renderer == 'vulkan'
        run: |
          $version = (Invoke-WebRequest -Uri "https://vulkan.lunarg.com/sdk/latest.json" | ConvertFrom-Json).windows
          Invoke-WebRequest https://sdk.lunarg.com/sdk/download/$version/windows/VulkanRT-$version-Components.zip -OutFile VulkanRT.zip
          & 'C:\Program Files\7-Zip\7z.exe' e -bb3 -obuild -r .\VulkanRT.zip *x64\vulkan-1.*

      - name: Run C++ tests
        continue-on-error: ${{ matrix.renderer == 'vulkan' }}
        env:
          ANGLE_DEFAULT_PLATFORM: 'gl'
          GALLIUM_DRIVER: llvmpipe
          LIBGL_ALWAYS_SOFTWARE: true
        run: build/mbgl-test-runner.exe

      # render tests

      - name: Run render test
        id: render_test
        env:
          manifest_file: ${{ matrix.renderer }}
          ANGLE_DEFAULT_PLATFORM: 'gl'
          GALLIUM_DRIVER: llvmpipe
          LIBGL_ALWAYS_SOFTWARE: true
        run: build/mbgl-render-test-runner.exe "--manifestPath=metrics/windows-${env:manifest_file}.json"

      - name: Upload render test result
        if: always() && steps.render_test.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: render-test-result-${{ matrix.renderer }}
          path: |
            metrics/windows-${{ matrix.renderer }}.html

      # expression tests

      - name: Run expression test
        run: build/expression-test/mbgl-expression-test.exe

  windows-ci-result:
    name: Windows CI Result
    if: needs.pre-job.outputs.should_skip != 'true' && always()
    runs-on: windows-2022
    needs:
      - pre-job
      - windows-build-and-test
    steps:
      - name: Mark result as failed
        if: needs.windows-build-and-test.result != 'success'
        run: exit 1
