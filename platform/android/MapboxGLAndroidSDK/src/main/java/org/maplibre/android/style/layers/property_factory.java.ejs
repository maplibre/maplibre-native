<%
  const paintProperties = locals.paintProperties;
  const layoutProperties = locals.layoutProperties;
  const locationIndicator = locals.locationIndicator;
-%>
// This file is generated. Edit scripts/generate-style-code.js, then run `make style-code`.

<% if (locationIndicator) { -%>
package org.maplibre.android.location;
<% } else { -%>
package org.maplibre.android.style.layers;
<% } -%>

import androidx.annotation.ColorInt;

import org.maplibre.android.style.expressions.Expression;
import org.maplibre.android.style.types.Formatted;
import static org.maplibre.android.utils.ColorUtils.colorToRgbaString;
<% if (locationIndicator) { -%>
import org.maplibre.android.style.layers.LayoutPropertyValue;
import org.maplibre.android.style.layers.PaintPropertyValue;
import org.maplibre.android.style.layers.Property;
import org.maplibre.android.style.layers.PropertyValue;
<% } -%>

/**
 * Constructs paint/layout properties for Layers
 *
 * @see <a href="https://maplibre.org/maplibre-style-spec/#layers">Layer style documentation</a>
 */
<% if (locationIndicator) { -%>
class LocationPropertyFactory {
<% } else { -%>
public class PropertyFactory {
<% } -%>

  /**
   * Set the property visibility.
   *
   * @param value the visibility value
   * @return property wrapper around visibility
   */
  public static PropertyValue<String> visibility(@Property.VISIBILITY String value) {
    return new LayoutPropertyValue<>("visibility", value);
  }

<% for (const property of paintProperties) { -%>
<% if (property.type == 'color') { -%>
  /**
   * <%- propertyFactoryMethodDoc(property) %>
   *
   * @param value a int color value
   * @return property wrapper around String color
   */
  public static PropertyValue<String> <%- camelizeWithLeadingLowercase(property.name) %>(@ColorInt int value) {
    return new PaintPropertyValue<>("<%-  property.name %>", colorToRgbaString(value));
  }

<% } -%>
  /**
   * <%- propertyFactoryMethodDoc(property) %>
   *
   * @param value a <%- propertyType(property) %> value
   * @return property wrapper around <%- propertyType(property) %>
   */
  public static PropertyValue<<%- propertyType(property) %>> <%- camelizeWithLeadingLowercase(property.name) %>(<%- propertyTypeAnnotation(property) %><%- iff(() => propertyTypeAnnotation(property), " ") %><%- propertyType(property) %> value) {
    return new PaintPropertyValue<>("<%-  property.name %>", value);
  }

  /**
   * <%- propertyFactoryMethodDoc(property) %>
   *
   * @param expression an expression statement
   * @return property wrapper around an expression statement
   */
  public static PropertyValue<Expression> <%- camelizeWithLeadingLowercase(property.name) %>(Expression expression) {
    return new PaintPropertyValue<>("<%-  property.name %>", expression);
  }

<% } -%>
<% for (const property of layoutProperties) { -%>
<% if (property.type === 'formatted') { -%>
  /**
   * <%- propertyFactoryMethodDoc(property) %>
   *
   * @param value a String value
   * @return property wrapper around String
   */
  public static PropertyValue<String> <%- camelizeWithLeadingLowercase(property.name) %>(String value) {
    return new LayoutPropertyValue<>("<%-  property.name %>", value);
  }

<% } -%>
  /**
   * <%- propertyFactoryMethodDoc(property) %>
   *
   * @param value a <%- propertyType(property) %> value
   * @return property wrapper around <%- propertyType(property) %>
   */
  public static PropertyValue<<%- propertyType(property) %>> <%- camelizeWithLeadingLowercase(property.name) %>(<%- propertyTypeAnnotation(property) %><%- iff(() => propertyTypeAnnotation(property), " ") %><%- propertyType(property) %> value) {
    return new LayoutPropertyValue<>("<%-  property.name %>", value);
  }

  /**
   * <%- propertyFactoryMethodDoc(property) %>
   *
   * @param value a <%- propertyType(property) %> value
   * @return property wrapper around <%- propertyType(property) %>
   */
  public static PropertyValue<Expression> <%- camelizeWithLeadingLowercase(property.name) %>(Expression value) {
    return new LayoutPropertyValue<>("<%-  property.name %>", value);
  }

<% } -%>
}
