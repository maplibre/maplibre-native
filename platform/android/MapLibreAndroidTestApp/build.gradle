plugins {
    alias libs.plugins.kotlinter
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    alias libs.plugins.kotlinPluginSerialization
}

apply from: "${rootDir}/gradle/native-build.gradle"

def obtainTestBuildType() {
    def result = "debug";

    if (project.hasProperty("testBuildType")) {
        result = project.getProperties().get("testBuildType")
    }

    result
}

android {
    defaultConfig {
        applicationId "org.maplibre.android.testapp"
        compileSdk 34
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 14
        versionName "6.0.1"
        testInstrumentationRunner "org.maplibre.android.InstrumentationRunner"
        multiDexEnabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    nativeBuild(["example-custom-layer"])
    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE.txt', 'META-INF/NOTICE.txt', 'LICENSE.txt']
        }
    }


    buildTypes {
        debug {
            jniDebuggable true
            debuggable true
            testCoverageEnabled true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles 'test-proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    testBuildType obtainTestBuildType()

    flavorDimensions += "renderer"
    productFlavors {
        create("legacy") {
            dimension = "renderer"
        }
        create("drawable") {
            dimension = "renderer"
        }
    }

    buildFeatures {
        viewBinding = true
    }

    namespace 'org.maplibre.android.testapp'

    lint {
        abortOnError false
        baseline file('lint-baseline-local.xml')
        checkAllWarnings true
        disable 'MissingTranslation', 'GoogleAppIndexingWarning', 'UnpackedNativeCode', 'IconDipSize', 'TypographyQuotes'
        warningsAsErrors true
    }
}

dependencies {
    implementation project(':MapLibreAndroid')
    implementation libs.maplibreJavaTurf

    implementation libs.supportAppcompatV7
    implementation libs.supportRecyclerView
    implementation libs.supportDesign
    implementation libs.supportConstraintLayout
    implementation libs.kotlinxSerializationJson

    implementation libs.multidex

    implementation libs.timber

    implementation libs.okhttp3

    debugImplementation libs.leakCanary

    androidTestImplementation libs.supportAnnotations
    androidTestImplementation libs.testRunner
    androidTestImplementation libs.testRules
    androidTestImplementation libs.testEspressoCore
    androidTestImplementation libs.testEspressoIntents
    androidTestImplementation libs.testEspressoContrib
    androidTestImplementation libs.testUiAutomator
    androidTestImplementation libs.appCenter
    androidTestImplementation libs.androidxTestExtJUnit
    androidTestImplementation libs.androidxTestCoreKtx

}

apply from: "${rootDir}/gradle/gradle-make.gradle"
apply from: "${rootDir}/gradle/gradle-config.gradle"
apply from: "${rootDir}/gradle/gradle-checkstyle.gradle"
apply from: "${rootDir}/gradle/gradle-lint.gradle"